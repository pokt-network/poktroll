// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package migration

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_MorseAccountState_2_list)(nil)

type _MorseAccountState_2_list struct {
	list *[]*MorseClaimableAccount
}

func (x *_MorseAccountState_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MorseAccountState_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MorseAccountState_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MorseClaimableAccount)
	(*x.list)[i] = concreteValue
}

func (x *_MorseAccountState_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MorseClaimableAccount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MorseAccountState_2_list) AppendMutable() protoreflect.Value {
	v := new(MorseClaimableAccount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MorseAccountState_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MorseAccountState_2_list) NewElement() protoreflect.Value {
	v := new(MorseClaimableAccount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MorseAccountState_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MorseAccountState          protoreflect.MessageDescriptor
	fd_MorseAccountState_accounts protoreflect.FieldDescriptor
)

func init() {
	file_pocket_migration_morse_onchain_proto_init()
	md_MorseAccountState = File_pocket_migration_morse_onchain_proto.Messages().ByName("MorseAccountState")
	fd_MorseAccountState_accounts = md_MorseAccountState.Fields().ByName("accounts")
}

var _ protoreflect.Message = (*fastReflection_MorseAccountState)(nil)

type fastReflection_MorseAccountState MorseAccountState

func (x *MorseAccountState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MorseAccountState)(x)
}

func (x *MorseAccountState) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_migration_morse_onchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MorseAccountState_messageType fastReflection_MorseAccountState_messageType
var _ protoreflect.MessageType = fastReflection_MorseAccountState_messageType{}

type fastReflection_MorseAccountState_messageType struct{}

func (x fastReflection_MorseAccountState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MorseAccountState)(nil)
}
func (x fastReflection_MorseAccountState_messageType) New() protoreflect.Message {
	return new(fastReflection_MorseAccountState)
}
func (x fastReflection_MorseAccountState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MorseAccountState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MorseAccountState) Descriptor() protoreflect.MessageDescriptor {
	return md_MorseAccountState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MorseAccountState) Type() protoreflect.MessageType {
	return _fastReflection_MorseAccountState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MorseAccountState) New() protoreflect.Message {
	return new(fastReflection_MorseAccountState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MorseAccountState) Interface() protoreflect.ProtoMessage {
	return (*MorseAccountState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MorseAccountState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Accounts) != 0 {
		value := protoreflect.ValueOfList(&_MorseAccountState_2_list{list: &x.Accounts})
		if !f(fd_MorseAccountState_accounts, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MorseAccountState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.migration.MorseAccountState.accounts":
		return len(x.Accounts) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseAccountState"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseAccountState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseAccountState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.migration.MorseAccountState.accounts":
		x.Accounts = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseAccountState"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseAccountState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MorseAccountState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.migration.MorseAccountState.accounts":
		if len(x.Accounts) == 0 {
			return protoreflect.ValueOfList(&_MorseAccountState_2_list{})
		}
		listValue := &_MorseAccountState_2_list{list: &x.Accounts}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseAccountState"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseAccountState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseAccountState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.migration.MorseAccountState.accounts":
		lv := value.List()
		clv := lv.(*_MorseAccountState_2_list)
		x.Accounts = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseAccountState"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseAccountState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseAccountState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.migration.MorseAccountState.accounts":
		if x.Accounts == nil {
			x.Accounts = []*MorseClaimableAccount{}
		}
		value := &_MorseAccountState_2_list{list: &x.Accounts}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseAccountState"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseAccountState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MorseAccountState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.migration.MorseAccountState.accounts":
		list := []*MorseClaimableAccount{}
		return protoreflect.ValueOfList(&_MorseAccountState_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseAccountState"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseAccountState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MorseAccountState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.migration.MorseAccountState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MorseAccountState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseAccountState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MorseAccountState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MorseAccountState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MorseAccountState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Accounts) > 0 {
			for _, e := range x.Accounts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MorseAccountState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Accounts) > 0 {
			for iNdEx := len(x.Accounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Accounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MorseAccountState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MorseAccountState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MorseAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Accounts = append(x.Accounts, &MorseClaimableAccount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Accounts[len(x.Accounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MorseClaimableAccount                      protoreflect.MessageDescriptor
	fd_MorseClaimableAccount_shannon_dest_address protoreflect.FieldDescriptor
	fd_MorseClaimableAccount_morse_src_address    protoreflect.FieldDescriptor
	fd_MorseClaimableAccount_public_key           protoreflect.FieldDescriptor
	fd_MorseClaimableAccount_unstaked_balance     protoreflect.FieldDescriptor
	fd_MorseClaimableAccount_supplier_stake       protoreflect.FieldDescriptor
	fd_MorseClaimableAccount_application_stake    protoreflect.FieldDescriptor
	fd_MorseClaimableAccount_claimed_at_height    protoreflect.FieldDescriptor
)

func init() {
	file_pocket_migration_morse_onchain_proto_init()
	md_MorseClaimableAccount = File_pocket_migration_morse_onchain_proto.Messages().ByName("MorseClaimableAccount")
	fd_MorseClaimableAccount_shannon_dest_address = md_MorseClaimableAccount.Fields().ByName("shannon_dest_address")
	fd_MorseClaimableAccount_morse_src_address = md_MorseClaimableAccount.Fields().ByName("morse_src_address")
	fd_MorseClaimableAccount_public_key = md_MorseClaimableAccount.Fields().ByName("public_key")
	fd_MorseClaimableAccount_unstaked_balance = md_MorseClaimableAccount.Fields().ByName("unstaked_balance")
	fd_MorseClaimableAccount_supplier_stake = md_MorseClaimableAccount.Fields().ByName("supplier_stake")
	fd_MorseClaimableAccount_application_stake = md_MorseClaimableAccount.Fields().ByName("application_stake")
	fd_MorseClaimableAccount_claimed_at_height = md_MorseClaimableAccount.Fields().ByName("claimed_at_height")
}

var _ protoreflect.Message = (*fastReflection_MorseClaimableAccount)(nil)

type fastReflection_MorseClaimableAccount MorseClaimableAccount

func (x *MorseClaimableAccount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MorseClaimableAccount)(x)
}

func (x *MorseClaimableAccount) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_migration_morse_onchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MorseClaimableAccount_messageType fastReflection_MorseClaimableAccount_messageType
var _ protoreflect.MessageType = fastReflection_MorseClaimableAccount_messageType{}

type fastReflection_MorseClaimableAccount_messageType struct{}

func (x fastReflection_MorseClaimableAccount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MorseClaimableAccount)(nil)
}
func (x fastReflection_MorseClaimableAccount_messageType) New() protoreflect.Message {
	return new(fastReflection_MorseClaimableAccount)
}
func (x fastReflection_MorseClaimableAccount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MorseClaimableAccount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MorseClaimableAccount) Descriptor() protoreflect.MessageDescriptor {
	return md_MorseClaimableAccount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MorseClaimableAccount) Type() protoreflect.MessageType {
	return _fastReflection_MorseClaimableAccount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MorseClaimableAccount) New() protoreflect.Message {
	return new(fastReflection_MorseClaimableAccount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MorseClaimableAccount) Interface() protoreflect.ProtoMessage {
	return (*MorseClaimableAccount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MorseClaimableAccount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ShannonDestAddress != "" {
		value := protoreflect.ValueOfString(x.ShannonDestAddress)
		if !f(fd_MorseClaimableAccount_shannon_dest_address, value) {
			return
		}
	}
	if x.MorseSrcAddress != "" {
		value := protoreflect.ValueOfString(x.MorseSrcAddress)
		if !f(fd_MorseClaimableAccount_morse_src_address, value) {
			return
		}
	}
	if len(x.PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicKey)
		if !f(fd_MorseClaimableAccount_public_key, value) {
			return
		}
	}
	if x.UnstakedBalance != nil {
		value := protoreflect.ValueOfMessage(x.UnstakedBalance.ProtoReflect())
		if !f(fd_MorseClaimableAccount_unstaked_balance, value) {
			return
		}
	}
	if x.SupplierStake != nil {
		value := protoreflect.ValueOfMessage(x.SupplierStake.ProtoReflect())
		if !f(fd_MorseClaimableAccount_supplier_stake, value) {
			return
		}
	}
	if x.ApplicationStake != nil {
		value := protoreflect.ValueOfMessage(x.ApplicationStake.ProtoReflect())
		if !f(fd_MorseClaimableAccount_application_stake, value) {
			return
		}
	}
	if x.ClaimedAtHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.ClaimedAtHeight)
		if !f(fd_MorseClaimableAccount_claimed_at_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MorseClaimableAccount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.migration.MorseClaimableAccount.shannon_dest_address":
		return x.ShannonDestAddress != ""
	case "pocket.migration.MorseClaimableAccount.morse_src_address":
		return x.MorseSrcAddress != ""
	case "pocket.migration.MorseClaimableAccount.public_key":
		return len(x.PublicKey) != 0
	case "pocket.migration.MorseClaimableAccount.unstaked_balance":
		return x.UnstakedBalance != nil
	case "pocket.migration.MorseClaimableAccount.supplier_stake":
		return x.SupplierStake != nil
	case "pocket.migration.MorseClaimableAccount.application_stake":
		return x.ApplicationStake != nil
	case "pocket.migration.MorseClaimableAccount.claimed_at_height":
		return x.ClaimedAtHeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseClaimableAccount"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseClaimableAccount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseClaimableAccount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.migration.MorseClaimableAccount.shannon_dest_address":
		x.ShannonDestAddress = ""
	case "pocket.migration.MorseClaimableAccount.morse_src_address":
		x.MorseSrcAddress = ""
	case "pocket.migration.MorseClaimableAccount.public_key":
		x.PublicKey = nil
	case "pocket.migration.MorseClaimableAccount.unstaked_balance":
		x.UnstakedBalance = nil
	case "pocket.migration.MorseClaimableAccount.supplier_stake":
		x.SupplierStake = nil
	case "pocket.migration.MorseClaimableAccount.application_stake":
		x.ApplicationStake = nil
	case "pocket.migration.MorseClaimableAccount.claimed_at_height":
		x.ClaimedAtHeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseClaimableAccount"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseClaimableAccount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MorseClaimableAccount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.migration.MorseClaimableAccount.shannon_dest_address":
		value := x.ShannonDestAddress
		return protoreflect.ValueOfString(value)
	case "pocket.migration.MorseClaimableAccount.morse_src_address":
		value := x.MorseSrcAddress
		return protoreflect.ValueOfString(value)
	case "pocket.migration.MorseClaimableAccount.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfBytes(value)
	case "pocket.migration.MorseClaimableAccount.unstaked_balance":
		value := x.UnstakedBalance
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.supplier_stake":
		value := x.SupplierStake
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.application_stake":
		value := x.ApplicationStake
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.claimed_at_height":
		value := x.ClaimedAtHeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseClaimableAccount"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseClaimableAccount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseClaimableAccount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.migration.MorseClaimableAccount.shannon_dest_address":
		x.ShannonDestAddress = value.Interface().(string)
	case "pocket.migration.MorseClaimableAccount.morse_src_address":
		x.MorseSrcAddress = value.Interface().(string)
	case "pocket.migration.MorseClaimableAccount.public_key":
		x.PublicKey = value.Bytes()
	case "pocket.migration.MorseClaimableAccount.unstaked_balance":
		x.UnstakedBalance = value.Message().Interface().(*v1beta1.Coin)
	case "pocket.migration.MorseClaimableAccount.supplier_stake":
		x.SupplierStake = value.Message().Interface().(*v1beta1.Coin)
	case "pocket.migration.MorseClaimableAccount.application_stake":
		x.ApplicationStake = value.Message().Interface().(*v1beta1.Coin)
	case "pocket.migration.MorseClaimableAccount.claimed_at_height":
		x.ClaimedAtHeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseClaimableAccount"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseClaimableAccount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseClaimableAccount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.migration.MorseClaimableAccount.unstaked_balance":
		if x.UnstakedBalance == nil {
			x.UnstakedBalance = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.UnstakedBalance.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.supplier_stake":
		if x.SupplierStake == nil {
			x.SupplierStake = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.SupplierStake.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.application_stake":
		if x.ApplicationStake == nil {
			x.ApplicationStake = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ApplicationStake.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.shannon_dest_address":
		panic(fmt.Errorf("field shannon_dest_address of message pocket.migration.MorseClaimableAccount is not mutable"))
	case "pocket.migration.MorseClaimableAccount.morse_src_address":
		panic(fmt.Errorf("field morse_src_address of message pocket.migration.MorseClaimableAccount is not mutable"))
	case "pocket.migration.MorseClaimableAccount.public_key":
		panic(fmt.Errorf("field public_key of message pocket.migration.MorseClaimableAccount is not mutable"))
	case "pocket.migration.MorseClaimableAccount.claimed_at_height":
		panic(fmt.Errorf("field claimed_at_height of message pocket.migration.MorseClaimableAccount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseClaimableAccount"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseClaimableAccount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MorseClaimableAccount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.migration.MorseClaimableAccount.shannon_dest_address":
		return protoreflect.ValueOfString("")
	case "pocket.migration.MorseClaimableAccount.morse_src_address":
		return protoreflect.ValueOfString("")
	case "pocket.migration.MorseClaimableAccount.public_key":
		return protoreflect.ValueOfBytes(nil)
	case "pocket.migration.MorseClaimableAccount.unstaked_balance":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.supplier_stake":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.application_stake":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.migration.MorseClaimableAccount.claimed_at_height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.migration.MorseClaimableAccount"))
		}
		panic(fmt.Errorf("message pocket.migration.MorseClaimableAccount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MorseClaimableAccount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.migration.MorseClaimableAccount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MorseClaimableAccount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MorseClaimableAccount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MorseClaimableAccount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MorseClaimableAccount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MorseClaimableAccount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ShannonDestAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MorseSrcAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnstakedBalance != nil {
			l = options.Size(x.UnstakedBalance)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SupplierStake != nil {
			l = options.Size(x.SupplierStake)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ApplicationStake != nil {
			l = options.Size(x.ApplicationStake)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ClaimedAtHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ClaimedAtHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MorseClaimableAccount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClaimedAtHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClaimedAtHeight))
			i--
			dAtA[i] = 0x40
		}
		if x.ApplicationStake != nil {
			encoded, err := options.Marshal(x.ApplicationStake)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.SupplierStake != nil {
			encoded, err := options.Marshal(x.SupplierStake)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.UnstakedBalance != nil {
			encoded, err := options.Marshal(x.UnstakedBalance)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.MorseSrcAddress) > 0 {
			i -= len(x.MorseSrcAddress)
			copy(dAtA[i:], x.MorseSrcAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MorseSrcAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ShannonDestAddress) > 0 {
			i -= len(x.ShannonDestAddress)
			copy(dAtA[i:], x.ShannonDestAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ShannonDestAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MorseClaimableAccount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MorseClaimableAccount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MorseClaimableAccount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = append(x.PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicKey == nil {
					x.PublicKey = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnstakedBalance", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UnstakedBalance == nil {
					x.UnstakedBalance = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnstakedBalance); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SupplierStake", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SupplierStake == nil {
					x.SupplierStake = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SupplierStake); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApplicationStake", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ApplicationStake == nil {
					x.ApplicationStake = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ApplicationStake); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedAtHeight", wireType)
				}
				x.ClaimedAtHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClaimedAtHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: pocket/migration/morse_onchain.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MorseAccountState is the onchain representation of all account state to be migrated from Morse.
// It is NEVER persisted onchain but is a dependency of the MsgImportMorseClaimableAccount handler.
// It's main purpose is to expose the #GetHash() method for verifying the integrity of all MorseClaimableAccounts.
type MorseAccountState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*MorseClaimableAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *MorseAccountState) Reset() {
	*x = MorseAccountState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_migration_morse_onchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MorseAccountState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorseAccountState) ProtoMessage() {}

// Deprecated: Use MorseAccountState.ProtoReflect.Descriptor instead.
func (*MorseAccountState) Descriptor() ([]byte, []int) {
	return file_pocket_migration_morse_onchain_proto_rawDescGZIP(), []int{0}
}

func (x *MorseAccountState) GetAccounts() []*MorseClaimableAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// MorseClaimableAccount is the onchain (persisted) representation of a Morse
// account which is claimable as part of the Morse -> Shannon migration.
// They are intended to be created during MorseAccountState import (see: MsgImportMorseClaimableAccount).
// It is created ONLY ONCE and NEVER deleted (per morse_src_address per network / re-genesis).
// It is updated ONLY ONCE, when it is claimed (per morse_src_address per network / re-genesis).
type MorseClaimableAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bech32-encoded address of the Shannon account to which the claimed balance will be minted.
	// This field is intended to remain empty until the account has been claimed.
	ShannonDestAddress string `protobuf:"bytes,1,opt,name=shannon_dest_address,json=shannonDestAddress,proto3" json:"shannon_dest_address,omitempty"`
	// The hex-encoded address of the Morse account whose balance will be claimed.
	MorseSrcAddress string `protobuf:"bytes,2,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address,omitempty"`
	// The ed25519 public key of the account.
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The unstaked upokt tokens (i.e. account balance) available for claiming.
	UnstakedBalance *v1beta1.Coin `protobuf:"bytes,5,opt,name=unstaked_balance,json=unstakedBalance,proto3" json:"unstaked_balance,omitempty"`
	// The staked tokens associated with a supplier actor which corresponds to this account address.
	// DEV_NOTE: A few contextual notes related to Morse:
	// - A Supplier is called a Servicer or Node (not a full node) in Morse
	// - All Validators are Servicers, not all servicers are Validators
	// - Automatically, the top 100 staked Servicers are validator
	// - This only accounts for servicer stake balance transition
	// TODO_MAINNET(@Olshansk): Develop a strategy for bootstrapping validators in Shannon by working with the cosmos ecosystem
	SupplierStake *v1beta1.Coin `protobuf:"bytes,6,opt,name=supplier_stake,json=supplierStake,proto3" json:"supplier_stake,omitempty"`
	// The staked tokens associated with an application actor which corresponds to this account address.
	ApplicationStake *v1beta1.Coin `protobuf:"bytes,7,opt,name=application_stake,json=applicationStake,proto3" json:"application_stake,omitempty"`
	// The Shannon height at which the account was claimed.
	// This field is intended to remain empty until the account has been claimed.
	ClaimedAtHeight int64 `protobuf:"varint,8,opt,name=claimed_at_height,json=claimedAtHeight,proto3" json:"claimed_at_height,omitempty"`
}

func (x *MorseClaimableAccount) Reset() {
	*x = MorseClaimableAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_migration_morse_onchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MorseClaimableAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorseClaimableAccount) ProtoMessage() {}

// Deprecated: Use MorseClaimableAccount.ProtoReflect.Descriptor instead.
func (*MorseClaimableAccount) Descriptor() ([]byte, []int) {
	return file_pocket_migration_morse_onchain_proto_rawDescGZIP(), []int{1}
}

func (x *MorseClaimableAccount) GetShannonDestAddress() string {
	if x != nil {
		return x.ShannonDestAddress
	}
	return ""
}

func (x *MorseClaimableAccount) GetMorseSrcAddress() string {
	if x != nil {
		return x.MorseSrcAddress
	}
	return ""
}

func (x *MorseClaimableAccount) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *MorseClaimableAccount) GetUnstakedBalance() *v1beta1.Coin {
	if x != nil {
		return x.UnstakedBalance
	}
	return nil
}

func (x *MorseClaimableAccount) GetSupplierStake() *v1beta1.Coin {
	if x != nil {
		return x.SupplierStake
	}
	return nil
}

func (x *MorseClaimableAccount) GetApplicationStake() *v1beta1.Coin {
	if x != nil {
		return x.ApplicationStake
	}
	return nil
}

func (x *MorseClaimableAccount) GetClaimedAtHeight() int64 {
	if x != nil {
		return x.ClaimedAtHeight
	}
	return 0
}

var File_pocket_migration_morse_onchain_proto protoreflect.FileDescriptor

var file_pocket_migration_morse_onchain_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x11, 0x4d, 0x6f, 0x72,
	0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0xff, 0x04, 0x0a, 0x15, 0x4d, 0x6f, 0x72, 0x73, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x66,
	0x0a, 0x14, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xc8, 0xde,
	0x1f, 0x01, 0xea, 0xde, 0x1f, 0x14, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x73, 0x68, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x6d, 0x6f, 0x72, 0x73, 0x65, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x6d, 0x6f, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6d, 0x6f, 0x72, 0x73, 0x65, 0x53,
	0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1c, 0xfa,
	0xde, 0x1f, 0x18, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x18, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x61, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x19, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x35,
	0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x41, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0xb1, 0x01, 0xd8, 0xe2, 0x1e, 0x01, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x4d, 0x6f, 0x72, 0x73, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x50, 0x4d,
	0x58, 0xaa, 0x02, 0x10, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x10, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5c, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x1c, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x5c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x3a,
	0x3a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pocket_migration_morse_onchain_proto_rawDescOnce sync.Once
	file_pocket_migration_morse_onchain_proto_rawDescData = file_pocket_migration_morse_onchain_proto_rawDesc
)

func file_pocket_migration_morse_onchain_proto_rawDescGZIP() []byte {
	file_pocket_migration_morse_onchain_proto_rawDescOnce.Do(func() {
		file_pocket_migration_morse_onchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_pocket_migration_morse_onchain_proto_rawDescData)
	})
	return file_pocket_migration_morse_onchain_proto_rawDescData
}

var file_pocket_migration_morse_onchain_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pocket_migration_morse_onchain_proto_goTypes = []interface{}{
	(*MorseAccountState)(nil),     // 0: pocket.migration.MorseAccountState
	(*MorseClaimableAccount)(nil), // 1: pocket.migration.MorseClaimableAccount
	(*v1beta1.Coin)(nil),          // 2: cosmos.base.v1beta1.Coin
}
var file_pocket_migration_morse_onchain_proto_depIdxs = []int32{
	1, // 0: pocket.migration.MorseAccountState.accounts:type_name -> pocket.migration.MorseClaimableAccount
	2, // 1: pocket.migration.MorseClaimableAccount.unstaked_balance:type_name -> cosmos.base.v1beta1.Coin
	2, // 2: pocket.migration.MorseClaimableAccount.supplier_stake:type_name -> cosmos.base.v1beta1.Coin
	2, // 3: pocket.migration.MorseClaimableAccount.application_stake:type_name -> cosmos.base.v1beta1.Coin
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pocket_migration_morse_onchain_proto_init() }
func file_pocket_migration_morse_onchain_proto_init() {
	if File_pocket_migration_morse_onchain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pocket_migration_morse_onchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MorseAccountState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pocket_migration_morse_onchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MorseClaimableAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pocket_migration_morse_onchain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pocket_migration_morse_onchain_proto_goTypes,
		DependencyIndexes: file_pocket_migration_morse_onchain_proto_depIdxs,
		MessageInfos:      file_pocket_migration_morse_onchain_proto_msgTypes,
	}.Build()
	File_pocket_migration_morse_onchain_proto = out.File
	file_pocket_migration_morse_onchain_proto_rawDesc = nil
	file_pocket_migration_morse_onchain_proto_goTypes = nil
	file_pocket_migration_morse_onchain_proto_depIdxs = nil
}
