// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package proof

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_EventClaimCreated                             protoreflect.MessageDescriptor
	fd_EventClaimCreated_claim                       protoreflect.FieldDescriptor
	fd_EventClaimCreated_num_relays                  protoreflect.FieldDescriptor
	fd_EventClaimCreated_num_claimed_compute_units   protoreflect.FieldDescriptor
	fd_EventClaimCreated_num_estimated_compute_units protoreflect.FieldDescriptor
	fd_EventClaimCreated_claimed_upokt               protoreflect.FieldDescriptor
)

func init() {
	file_pocket_proof_event_proto_init()
	md_EventClaimCreated = File_pocket_proof_event_proto.Messages().ByName("EventClaimCreated")
	fd_EventClaimCreated_claim = md_EventClaimCreated.Fields().ByName("claim")
	fd_EventClaimCreated_num_relays = md_EventClaimCreated.Fields().ByName("num_relays")
	fd_EventClaimCreated_num_claimed_compute_units = md_EventClaimCreated.Fields().ByName("num_claimed_compute_units")
	fd_EventClaimCreated_num_estimated_compute_units = md_EventClaimCreated.Fields().ByName("num_estimated_compute_units")
	fd_EventClaimCreated_claimed_upokt = md_EventClaimCreated.Fields().ByName("claimed_upokt")
}

var _ protoreflect.Message = (*fastReflection_EventClaimCreated)(nil)

type fastReflection_EventClaimCreated EventClaimCreated

func (x *EventClaimCreated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventClaimCreated)(x)
}

func (x *EventClaimCreated) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_proof_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventClaimCreated_messageType fastReflection_EventClaimCreated_messageType
var _ protoreflect.MessageType = fastReflection_EventClaimCreated_messageType{}

type fastReflection_EventClaimCreated_messageType struct{}

func (x fastReflection_EventClaimCreated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventClaimCreated)(nil)
}
func (x fastReflection_EventClaimCreated_messageType) New() protoreflect.Message {
	return new(fastReflection_EventClaimCreated)
}
func (x fastReflection_EventClaimCreated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventClaimCreated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventClaimCreated) Descriptor() protoreflect.MessageDescriptor {
	return md_EventClaimCreated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventClaimCreated) Type() protoreflect.MessageType {
	return _fastReflection_EventClaimCreated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventClaimCreated) New() protoreflect.Message {
	return new(fastReflection_EventClaimCreated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventClaimCreated) Interface() protoreflect.ProtoMessage {
	return (*EventClaimCreated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventClaimCreated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Claim != nil {
		value := protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
		if !f(fd_EventClaimCreated_claim, value) {
			return
		}
	}
	if x.NumRelays != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumRelays)
		if !f(fd_EventClaimCreated_num_relays, value) {
			return
		}
	}
	if x.NumClaimedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumClaimedComputeUnits)
		if !f(fd_EventClaimCreated_num_claimed_compute_units, value) {
			return
		}
	}
	if x.NumEstimatedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumEstimatedComputeUnits)
		if !f(fd_EventClaimCreated_num_estimated_compute_units, value) {
			return
		}
	}
	if x.ClaimedUpokt != nil {
		value := protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
		if !f(fd_EventClaimCreated_claimed_upokt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventClaimCreated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.proof.EventClaimCreated.claim":
		return x.Claim != nil
	case "pocket.proof.EventClaimCreated.num_relays":
		return x.NumRelays != uint64(0)
	case "pocket.proof.EventClaimCreated.num_claimed_compute_units":
		return x.NumClaimedComputeUnits != uint64(0)
	case "pocket.proof.EventClaimCreated.num_estimated_compute_units":
		return x.NumEstimatedComputeUnits != uint64(0)
	case "pocket.proof.EventClaimCreated.claimed_upokt":
		return x.ClaimedUpokt != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimCreated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimCreated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimCreated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.proof.EventClaimCreated.claim":
		x.Claim = nil
	case "pocket.proof.EventClaimCreated.num_relays":
		x.NumRelays = uint64(0)
	case "pocket.proof.EventClaimCreated.num_claimed_compute_units":
		x.NumClaimedComputeUnits = uint64(0)
	case "pocket.proof.EventClaimCreated.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = uint64(0)
	case "pocket.proof.EventClaimCreated.claimed_upokt":
		x.ClaimedUpokt = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimCreated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimCreated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventClaimCreated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.proof.EventClaimCreated.claim":
		value := x.Claim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventClaimCreated.num_relays":
		value := x.NumRelays
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventClaimCreated.num_claimed_compute_units":
		value := x.NumClaimedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventClaimCreated.num_estimated_compute_units":
		value := x.NumEstimatedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventClaimCreated.claimed_upokt":
		value := x.ClaimedUpokt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimCreated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimCreated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimCreated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.proof.EventClaimCreated.claim":
		x.Claim = value.Message().Interface().(*Claim)
	case "pocket.proof.EventClaimCreated.num_relays":
		x.NumRelays = value.Uint()
	case "pocket.proof.EventClaimCreated.num_claimed_compute_units":
		x.NumClaimedComputeUnits = value.Uint()
	case "pocket.proof.EventClaimCreated.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = value.Uint()
	case "pocket.proof.EventClaimCreated.claimed_upokt":
		x.ClaimedUpokt = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimCreated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimCreated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimCreated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventClaimCreated.claim":
		if x.Claim == nil {
			x.Claim = new(Claim)
		}
		return protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
	case "pocket.proof.EventClaimCreated.claimed_upokt":
		if x.ClaimedUpokt == nil {
			x.ClaimedUpokt = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
	case "pocket.proof.EventClaimCreated.num_relays":
		panic(fmt.Errorf("field num_relays of message pocket.proof.EventClaimCreated is not mutable"))
	case "pocket.proof.EventClaimCreated.num_claimed_compute_units":
		panic(fmt.Errorf("field num_claimed_compute_units of message pocket.proof.EventClaimCreated is not mutable"))
	case "pocket.proof.EventClaimCreated.num_estimated_compute_units":
		panic(fmt.Errorf("field num_estimated_compute_units of message pocket.proof.EventClaimCreated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimCreated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimCreated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventClaimCreated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventClaimCreated.claim":
		m := new(Claim)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventClaimCreated.num_relays":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventClaimCreated.num_claimed_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventClaimCreated.num_estimated_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventClaimCreated.claimed_upokt":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimCreated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimCreated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventClaimCreated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.proof.EventClaimCreated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventClaimCreated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimCreated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventClaimCreated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventClaimCreated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventClaimCreated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Claim != nil {
			l = options.Size(x.Claim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NumRelays != 0 {
			n += 1 + runtime.Sov(uint64(x.NumRelays))
		}
		if x.NumClaimedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumClaimedComputeUnits))
		}
		if x.NumEstimatedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumEstimatedComputeUnits))
		}
		if x.ClaimedUpokt != nil {
			l = options.Size(x.ClaimedUpokt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventClaimCreated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClaimedUpokt != nil {
			encoded, err := options.Marshal(x.ClaimedUpokt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.NumEstimatedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumEstimatedComputeUnits))
			i--
			dAtA[i] = 0x28
		}
		if x.NumClaimedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumClaimedComputeUnits))
			i--
			dAtA[i] = 0x20
		}
		if x.NumRelays != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumRelays))
			i--
			dAtA[i] = 0x10
		}
		if x.Claim != nil {
			encoded, err := options.Marshal(x.Claim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventClaimCreated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventClaimCreated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventClaimCreated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Claim == nil {
					x.Claim = &Claim{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Claim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
				}
				x.NumRelays = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumRelays |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
				}
				x.NumClaimedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
				}
				x.NumEstimatedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ClaimedUpokt == nil {
					x.ClaimedUpokt = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ClaimedUpokt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventClaimUpdated                             protoreflect.MessageDescriptor
	fd_EventClaimUpdated_claim                       protoreflect.FieldDescriptor
	fd_EventClaimUpdated_num_relays                  protoreflect.FieldDescriptor
	fd_EventClaimUpdated_num_claimed_compute_units   protoreflect.FieldDescriptor
	fd_EventClaimUpdated_num_estimated_compute_units protoreflect.FieldDescriptor
	fd_EventClaimUpdated_claimed_upokt               protoreflect.FieldDescriptor
)

func init() {
	file_pocket_proof_event_proto_init()
	md_EventClaimUpdated = File_pocket_proof_event_proto.Messages().ByName("EventClaimUpdated")
	fd_EventClaimUpdated_claim = md_EventClaimUpdated.Fields().ByName("claim")
	fd_EventClaimUpdated_num_relays = md_EventClaimUpdated.Fields().ByName("num_relays")
	fd_EventClaimUpdated_num_claimed_compute_units = md_EventClaimUpdated.Fields().ByName("num_claimed_compute_units")
	fd_EventClaimUpdated_num_estimated_compute_units = md_EventClaimUpdated.Fields().ByName("num_estimated_compute_units")
	fd_EventClaimUpdated_claimed_upokt = md_EventClaimUpdated.Fields().ByName("claimed_upokt")
}

var _ protoreflect.Message = (*fastReflection_EventClaimUpdated)(nil)

type fastReflection_EventClaimUpdated EventClaimUpdated

func (x *EventClaimUpdated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventClaimUpdated)(x)
}

func (x *EventClaimUpdated) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_proof_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventClaimUpdated_messageType fastReflection_EventClaimUpdated_messageType
var _ protoreflect.MessageType = fastReflection_EventClaimUpdated_messageType{}

type fastReflection_EventClaimUpdated_messageType struct{}

func (x fastReflection_EventClaimUpdated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventClaimUpdated)(nil)
}
func (x fastReflection_EventClaimUpdated_messageType) New() protoreflect.Message {
	return new(fastReflection_EventClaimUpdated)
}
func (x fastReflection_EventClaimUpdated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventClaimUpdated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventClaimUpdated) Descriptor() protoreflect.MessageDescriptor {
	return md_EventClaimUpdated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventClaimUpdated) Type() protoreflect.MessageType {
	return _fastReflection_EventClaimUpdated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventClaimUpdated) New() protoreflect.Message {
	return new(fastReflection_EventClaimUpdated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventClaimUpdated) Interface() protoreflect.ProtoMessage {
	return (*EventClaimUpdated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventClaimUpdated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Claim != nil {
		value := protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
		if !f(fd_EventClaimUpdated_claim, value) {
			return
		}
	}
	if x.NumRelays != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumRelays)
		if !f(fd_EventClaimUpdated_num_relays, value) {
			return
		}
	}
	if x.NumClaimedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumClaimedComputeUnits)
		if !f(fd_EventClaimUpdated_num_claimed_compute_units, value) {
			return
		}
	}
	if x.NumEstimatedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumEstimatedComputeUnits)
		if !f(fd_EventClaimUpdated_num_estimated_compute_units, value) {
			return
		}
	}
	if x.ClaimedUpokt != nil {
		value := protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
		if !f(fd_EventClaimUpdated_claimed_upokt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventClaimUpdated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.proof.EventClaimUpdated.claim":
		return x.Claim != nil
	case "pocket.proof.EventClaimUpdated.num_relays":
		return x.NumRelays != uint64(0)
	case "pocket.proof.EventClaimUpdated.num_claimed_compute_units":
		return x.NumClaimedComputeUnits != uint64(0)
	case "pocket.proof.EventClaimUpdated.num_estimated_compute_units":
		return x.NumEstimatedComputeUnits != uint64(0)
	case "pocket.proof.EventClaimUpdated.claimed_upokt":
		return x.ClaimedUpokt != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimUpdated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimUpdated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.proof.EventClaimUpdated.claim":
		x.Claim = nil
	case "pocket.proof.EventClaimUpdated.num_relays":
		x.NumRelays = uint64(0)
	case "pocket.proof.EventClaimUpdated.num_claimed_compute_units":
		x.NumClaimedComputeUnits = uint64(0)
	case "pocket.proof.EventClaimUpdated.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = uint64(0)
	case "pocket.proof.EventClaimUpdated.claimed_upokt":
		x.ClaimedUpokt = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimUpdated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventClaimUpdated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.proof.EventClaimUpdated.claim":
		value := x.Claim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventClaimUpdated.num_relays":
		value := x.NumRelays
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventClaimUpdated.num_claimed_compute_units":
		value := x.NumClaimedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventClaimUpdated.num_estimated_compute_units":
		value := x.NumEstimatedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventClaimUpdated.claimed_upokt":
		value := x.ClaimedUpokt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimUpdated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimUpdated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.proof.EventClaimUpdated.claim":
		x.Claim = value.Message().Interface().(*Claim)
	case "pocket.proof.EventClaimUpdated.num_relays":
		x.NumRelays = value.Uint()
	case "pocket.proof.EventClaimUpdated.num_claimed_compute_units":
		x.NumClaimedComputeUnits = value.Uint()
	case "pocket.proof.EventClaimUpdated.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = value.Uint()
	case "pocket.proof.EventClaimUpdated.claimed_upokt":
		x.ClaimedUpokt = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimUpdated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimUpdated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventClaimUpdated.claim":
		if x.Claim == nil {
			x.Claim = new(Claim)
		}
		return protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
	case "pocket.proof.EventClaimUpdated.claimed_upokt":
		if x.ClaimedUpokt == nil {
			x.ClaimedUpokt = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
	case "pocket.proof.EventClaimUpdated.num_relays":
		panic(fmt.Errorf("field num_relays of message pocket.proof.EventClaimUpdated is not mutable"))
	case "pocket.proof.EventClaimUpdated.num_claimed_compute_units":
		panic(fmt.Errorf("field num_claimed_compute_units of message pocket.proof.EventClaimUpdated is not mutable"))
	case "pocket.proof.EventClaimUpdated.num_estimated_compute_units":
		panic(fmt.Errorf("field num_estimated_compute_units of message pocket.proof.EventClaimUpdated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimUpdated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventClaimUpdated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventClaimUpdated.claim":
		m := new(Claim)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventClaimUpdated.num_relays":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventClaimUpdated.num_claimed_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventClaimUpdated.num_estimated_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventClaimUpdated.claimed_upokt":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventClaimUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventClaimUpdated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventClaimUpdated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.proof.EventClaimUpdated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventClaimUpdated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventClaimUpdated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventClaimUpdated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventClaimUpdated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventClaimUpdated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Claim != nil {
			l = options.Size(x.Claim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NumRelays != 0 {
			n += 1 + runtime.Sov(uint64(x.NumRelays))
		}
		if x.NumClaimedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumClaimedComputeUnits))
		}
		if x.NumEstimatedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumEstimatedComputeUnits))
		}
		if x.ClaimedUpokt != nil {
			l = options.Size(x.ClaimedUpokt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventClaimUpdated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClaimedUpokt != nil {
			encoded, err := options.Marshal(x.ClaimedUpokt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.NumEstimatedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumEstimatedComputeUnits))
			i--
			dAtA[i] = 0x28
		}
		if x.NumClaimedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumClaimedComputeUnits))
			i--
			dAtA[i] = 0x20
		}
		if x.NumRelays != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumRelays))
			i--
			dAtA[i] = 0x10
		}
		if x.Claim != nil {
			encoded, err := options.Marshal(x.Claim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventClaimUpdated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventClaimUpdated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventClaimUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Claim == nil {
					x.Claim = &Claim{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Claim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
				}
				x.NumRelays = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumRelays |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
				}
				x.NumClaimedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
				}
				x.NumEstimatedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ClaimedUpokt == nil {
					x.ClaimedUpokt = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ClaimedUpokt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventProofSubmitted                             protoreflect.MessageDescriptor
	fd_EventProofSubmitted_claim                       protoreflect.FieldDescriptor
	fd_EventProofSubmitted_proof                       protoreflect.FieldDescriptor
	fd_EventProofSubmitted_num_relays                  protoreflect.FieldDescriptor
	fd_EventProofSubmitted_num_claimed_compute_units   protoreflect.FieldDescriptor
	fd_EventProofSubmitted_num_estimated_compute_units protoreflect.FieldDescriptor
	fd_EventProofSubmitted_claimed_upokt               protoreflect.FieldDescriptor
)

func init() {
	file_pocket_proof_event_proto_init()
	md_EventProofSubmitted = File_pocket_proof_event_proto.Messages().ByName("EventProofSubmitted")
	fd_EventProofSubmitted_claim = md_EventProofSubmitted.Fields().ByName("claim")
	fd_EventProofSubmitted_proof = md_EventProofSubmitted.Fields().ByName("proof")
	fd_EventProofSubmitted_num_relays = md_EventProofSubmitted.Fields().ByName("num_relays")
	fd_EventProofSubmitted_num_claimed_compute_units = md_EventProofSubmitted.Fields().ByName("num_claimed_compute_units")
	fd_EventProofSubmitted_num_estimated_compute_units = md_EventProofSubmitted.Fields().ByName("num_estimated_compute_units")
	fd_EventProofSubmitted_claimed_upokt = md_EventProofSubmitted.Fields().ByName("claimed_upokt")
}

var _ protoreflect.Message = (*fastReflection_EventProofSubmitted)(nil)

type fastReflection_EventProofSubmitted EventProofSubmitted

func (x *EventProofSubmitted) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventProofSubmitted)(x)
}

func (x *EventProofSubmitted) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_proof_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventProofSubmitted_messageType fastReflection_EventProofSubmitted_messageType
var _ protoreflect.MessageType = fastReflection_EventProofSubmitted_messageType{}

type fastReflection_EventProofSubmitted_messageType struct{}

func (x fastReflection_EventProofSubmitted_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventProofSubmitted)(nil)
}
func (x fastReflection_EventProofSubmitted_messageType) New() protoreflect.Message {
	return new(fastReflection_EventProofSubmitted)
}
func (x fastReflection_EventProofSubmitted_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventProofSubmitted
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventProofSubmitted) Descriptor() protoreflect.MessageDescriptor {
	return md_EventProofSubmitted
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventProofSubmitted) Type() protoreflect.MessageType {
	return _fastReflection_EventProofSubmitted_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventProofSubmitted) New() protoreflect.Message {
	return new(fastReflection_EventProofSubmitted)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventProofSubmitted) Interface() protoreflect.ProtoMessage {
	return (*EventProofSubmitted)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventProofSubmitted) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Claim != nil {
		value := protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
		if !f(fd_EventProofSubmitted_claim, value) {
			return
		}
	}
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_EventProofSubmitted_proof, value) {
			return
		}
	}
	if x.NumRelays != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumRelays)
		if !f(fd_EventProofSubmitted_num_relays, value) {
			return
		}
	}
	if x.NumClaimedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumClaimedComputeUnits)
		if !f(fd_EventProofSubmitted_num_claimed_compute_units, value) {
			return
		}
	}
	if x.NumEstimatedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumEstimatedComputeUnits)
		if !f(fd_EventProofSubmitted_num_estimated_compute_units, value) {
			return
		}
	}
	if x.ClaimedUpokt != nil {
		value := protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
		if !f(fd_EventProofSubmitted_claimed_upokt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventProofSubmitted) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.proof.EventProofSubmitted.claim":
		return x.Claim != nil
	case "pocket.proof.EventProofSubmitted.proof":
		return x.Proof != nil
	case "pocket.proof.EventProofSubmitted.num_relays":
		return x.NumRelays != uint64(0)
	case "pocket.proof.EventProofSubmitted.num_claimed_compute_units":
		return x.NumClaimedComputeUnits != uint64(0)
	case "pocket.proof.EventProofSubmitted.num_estimated_compute_units":
		return x.NumEstimatedComputeUnits != uint64(0)
	case "pocket.proof.EventProofSubmitted.claimed_upokt":
		return x.ClaimedUpokt != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofSubmitted"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofSubmitted does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofSubmitted) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.proof.EventProofSubmitted.claim":
		x.Claim = nil
	case "pocket.proof.EventProofSubmitted.proof":
		x.Proof = nil
	case "pocket.proof.EventProofSubmitted.num_relays":
		x.NumRelays = uint64(0)
	case "pocket.proof.EventProofSubmitted.num_claimed_compute_units":
		x.NumClaimedComputeUnits = uint64(0)
	case "pocket.proof.EventProofSubmitted.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = uint64(0)
	case "pocket.proof.EventProofSubmitted.claimed_upokt":
		x.ClaimedUpokt = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofSubmitted"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofSubmitted does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventProofSubmitted) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.proof.EventProofSubmitted.claim":
		value := x.Claim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.num_relays":
		value := x.NumRelays
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofSubmitted.num_claimed_compute_units":
		value := x.NumClaimedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofSubmitted.num_estimated_compute_units":
		value := x.NumEstimatedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofSubmitted.claimed_upokt":
		value := x.ClaimedUpokt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofSubmitted"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofSubmitted does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofSubmitted) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.proof.EventProofSubmitted.claim":
		x.Claim = value.Message().Interface().(*Claim)
	case "pocket.proof.EventProofSubmitted.proof":
		x.Proof = value.Message().Interface().(*Proof)
	case "pocket.proof.EventProofSubmitted.num_relays":
		x.NumRelays = value.Uint()
	case "pocket.proof.EventProofSubmitted.num_claimed_compute_units":
		x.NumClaimedComputeUnits = value.Uint()
	case "pocket.proof.EventProofSubmitted.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = value.Uint()
	case "pocket.proof.EventProofSubmitted.claimed_upokt":
		x.ClaimedUpokt = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofSubmitted"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofSubmitted does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofSubmitted) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventProofSubmitted.claim":
		if x.Claim == nil {
			x.Claim = new(Claim)
		}
		return protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.proof":
		if x.Proof == nil {
			x.Proof = new(Proof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.claimed_upokt":
		if x.ClaimedUpokt == nil {
			x.ClaimedUpokt = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.num_relays":
		panic(fmt.Errorf("field num_relays of message pocket.proof.EventProofSubmitted is not mutable"))
	case "pocket.proof.EventProofSubmitted.num_claimed_compute_units":
		panic(fmt.Errorf("field num_claimed_compute_units of message pocket.proof.EventProofSubmitted is not mutable"))
	case "pocket.proof.EventProofSubmitted.num_estimated_compute_units":
		panic(fmt.Errorf("field num_estimated_compute_units of message pocket.proof.EventProofSubmitted is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofSubmitted"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofSubmitted does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventProofSubmitted) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventProofSubmitted.claim":
		m := new(Claim)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.proof":
		m := new(Proof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventProofSubmitted.num_relays":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofSubmitted.num_claimed_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofSubmitted.num_estimated_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofSubmitted.claimed_upokt":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofSubmitted"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofSubmitted does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventProofSubmitted) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.proof.EventProofSubmitted", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventProofSubmitted) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofSubmitted) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventProofSubmitted) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventProofSubmitted) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventProofSubmitted)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Claim != nil {
			l = options.Size(x.Claim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NumRelays != 0 {
			n += 1 + runtime.Sov(uint64(x.NumRelays))
		}
		if x.NumClaimedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumClaimedComputeUnits))
		}
		if x.NumEstimatedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumEstimatedComputeUnits))
		}
		if x.ClaimedUpokt != nil {
			l = options.Size(x.ClaimedUpokt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventProofSubmitted)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClaimedUpokt != nil {
			encoded, err := options.Marshal(x.ClaimedUpokt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.NumEstimatedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumEstimatedComputeUnits))
			i--
			dAtA[i] = 0x28
		}
		if x.NumClaimedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumClaimedComputeUnits))
			i--
			dAtA[i] = 0x20
		}
		if x.NumRelays != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumRelays))
			i--
			dAtA[i] = 0x18
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Claim != nil {
			encoded, err := options.Marshal(x.Claim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventProofSubmitted)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventProofSubmitted: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventProofSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Claim == nil {
					x.Claim = &Claim{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Claim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &Proof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
				}
				x.NumRelays = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumRelays |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
				}
				x.NumClaimedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
				}
				x.NumEstimatedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ClaimedUpokt == nil {
					x.ClaimedUpokt = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ClaimedUpokt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventProofUpdated                             protoreflect.MessageDescriptor
	fd_EventProofUpdated_claim                       protoreflect.FieldDescriptor
	fd_EventProofUpdated_proof                       protoreflect.FieldDescriptor
	fd_EventProofUpdated_num_relays                  protoreflect.FieldDescriptor
	fd_EventProofUpdated_num_claimed_compute_units   protoreflect.FieldDescriptor
	fd_EventProofUpdated_num_estimated_compute_units protoreflect.FieldDescriptor
	fd_EventProofUpdated_claimed_upokt               protoreflect.FieldDescriptor
)

func init() {
	file_pocket_proof_event_proto_init()
	md_EventProofUpdated = File_pocket_proof_event_proto.Messages().ByName("EventProofUpdated")
	fd_EventProofUpdated_claim = md_EventProofUpdated.Fields().ByName("claim")
	fd_EventProofUpdated_proof = md_EventProofUpdated.Fields().ByName("proof")
	fd_EventProofUpdated_num_relays = md_EventProofUpdated.Fields().ByName("num_relays")
	fd_EventProofUpdated_num_claimed_compute_units = md_EventProofUpdated.Fields().ByName("num_claimed_compute_units")
	fd_EventProofUpdated_num_estimated_compute_units = md_EventProofUpdated.Fields().ByName("num_estimated_compute_units")
	fd_EventProofUpdated_claimed_upokt = md_EventProofUpdated.Fields().ByName("claimed_upokt")
}

var _ protoreflect.Message = (*fastReflection_EventProofUpdated)(nil)

type fastReflection_EventProofUpdated EventProofUpdated

func (x *EventProofUpdated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventProofUpdated)(x)
}

func (x *EventProofUpdated) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_proof_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventProofUpdated_messageType fastReflection_EventProofUpdated_messageType
var _ protoreflect.MessageType = fastReflection_EventProofUpdated_messageType{}

type fastReflection_EventProofUpdated_messageType struct{}

func (x fastReflection_EventProofUpdated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventProofUpdated)(nil)
}
func (x fastReflection_EventProofUpdated_messageType) New() protoreflect.Message {
	return new(fastReflection_EventProofUpdated)
}
func (x fastReflection_EventProofUpdated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventProofUpdated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventProofUpdated) Descriptor() protoreflect.MessageDescriptor {
	return md_EventProofUpdated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventProofUpdated) Type() protoreflect.MessageType {
	return _fastReflection_EventProofUpdated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventProofUpdated) New() protoreflect.Message {
	return new(fastReflection_EventProofUpdated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventProofUpdated) Interface() protoreflect.ProtoMessage {
	return (*EventProofUpdated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventProofUpdated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Claim != nil {
		value := protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
		if !f(fd_EventProofUpdated_claim, value) {
			return
		}
	}
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_EventProofUpdated_proof, value) {
			return
		}
	}
	if x.NumRelays != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumRelays)
		if !f(fd_EventProofUpdated_num_relays, value) {
			return
		}
	}
	if x.NumClaimedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumClaimedComputeUnits)
		if !f(fd_EventProofUpdated_num_claimed_compute_units, value) {
			return
		}
	}
	if x.NumEstimatedComputeUnits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NumEstimatedComputeUnits)
		if !f(fd_EventProofUpdated_num_estimated_compute_units, value) {
			return
		}
	}
	if x.ClaimedUpokt != nil {
		value := protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
		if !f(fd_EventProofUpdated_claimed_upokt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventProofUpdated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.proof.EventProofUpdated.claim":
		return x.Claim != nil
	case "pocket.proof.EventProofUpdated.proof":
		return x.Proof != nil
	case "pocket.proof.EventProofUpdated.num_relays":
		return x.NumRelays != uint64(0)
	case "pocket.proof.EventProofUpdated.num_claimed_compute_units":
		return x.NumClaimedComputeUnits != uint64(0)
	case "pocket.proof.EventProofUpdated.num_estimated_compute_units":
		return x.NumEstimatedComputeUnits != uint64(0)
	case "pocket.proof.EventProofUpdated.claimed_upokt":
		return x.ClaimedUpokt != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofUpdated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofUpdated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.proof.EventProofUpdated.claim":
		x.Claim = nil
	case "pocket.proof.EventProofUpdated.proof":
		x.Proof = nil
	case "pocket.proof.EventProofUpdated.num_relays":
		x.NumRelays = uint64(0)
	case "pocket.proof.EventProofUpdated.num_claimed_compute_units":
		x.NumClaimedComputeUnits = uint64(0)
	case "pocket.proof.EventProofUpdated.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = uint64(0)
	case "pocket.proof.EventProofUpdated.claimed_upokt":
		x.ClaimedUpokt = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofUpdated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventProofUpdated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.proof.EventProofUpdated.claim":
		value := x.Claim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventProofUpdated.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventProofUpdated.num_relays":
		value := x.NumRelays
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofUpdated.num_claimed_compute_units":
		value := x.NumClaimedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofUpdated.num_estimated_compute_units":
		value := x.NumEstimatedComputeUnits
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofUpdated.claimed_upokt":
		value := x.ClaimedUpokt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofUpdated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofUpdated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.proof.EventProofUpdated.claim":
		x.Claim = value.Message().Interface().(*Claim)
	case "pocket.proof.EventProofUpdated.proof":
		x.Proof = value.Message().Interface().(*Proof)
	case "pocket.proof.EventProofUpdated.num_relays":
		x.NumRelays = value.Uint()
	case "pocket.proof.EventProofUpdated.num_claimed_compute_units":
		x.NumClaimedComputeUnits = value.Uint()
	case "pocket.proof.EventProofUpdated.num_estimated_compute_units":
		x.NumEstimatedComputeUnits = value.Uint()
	case "pocket.proof.EventProofUpdated.claimed_upokt":
		x.ClaimedUpokt = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofUpdated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofUpdated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventProofUpdated.claim":
		if x.Claim == nil {
			x.Claim = new(Claim)
		}
		return protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
	case "pocket.proof.EventProofUpdated.proof":
		if x.Proof == nil {
			x.Proof = new(Proof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "pocket.proof.EventProofUpdated.claimed_upokt":
		if x.ClaimedUpokt == nil {
			x.ClaimedUpokt = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ClaimedUpokt.ProtoReflect())
	case "pocket.proof.EventProofUpdated.num_relays":
		panic(fmt.Errorf("field num_relays of message pocket.proof.EventProofUpdated is not mutable"))
	case "pocket.proof.EventProofUpdated.num_claimed_compute_units":
		panic(fmt.Errorf("field num_claimed_compute_units of message pocket.proof.EventProofUpdated is not mutable"))
	case "pocket.proof.EventProofUpdated.num_estimated_compute_units":
		panic(fmt.Errorf("field num_estimated_compute_units of message pocket.proof.EventProofUpdated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofUpdated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventProofUpdated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventProofUpdated.claim":
		m := new(Claim)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventProofUpdated.proof":
		m := new(Proof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventProofUpdated.num_relays":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofUpdated.num_claimed_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofUpdated.num_estimated_compute_units":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofUpdated.claimed_upokt":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofUpdated"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofUpdated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventProofUpdated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.proof.EventProofUpdated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventProofUpdated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofUpdated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventProofUpdated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventProofUpdated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventProofUpdated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Claim != nil {
			l = options.Size(x.Claim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NumRelays != 0 {
			n += 1 + runtime.Sov(uint64(x.NumRelays))
		}
		if x.NumClaimedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumClaimedComputeUnits))
		}
		if x.NumEstimatedComputeUnits != 0 {
			n += 1 + runtime.Sov(uint64(x.NumEstimatedComputeUnits))
		}
		if x.ClaimedUpokt != nil {
			l = options.Size(x.ClaimedUpokt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventProofUpdated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ClaimedUpokt != nil {
			encoded, err := options.Marshal(x.ClaimedUpokt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.NumEstimatedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumEstimatedComputeUnits))
			i--
			dAtA[i] = 0x28
		}
		if x.NumClaimedComputeUnits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumClaimedComputeUnits))
			i--
			dAtA[i] = 0x20
		}
		if x.NumRelays != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumRelays))
			i--
			dAtA[i] = 0x18
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Claim != nil {
			encoded, err := options.Marshal(x.Claim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventProofUpdated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventProofUpdated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventProofUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Claim == nil {
					x.Claim = &Claim{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Claim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &Proof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
				}
				x.NumRelays = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumRelays |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
				}
				x.NumClaimedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
				}
				x.NumEstimatedComputeUnits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ClaimedUpokt == nil {
					x.ClaimedUpokt = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ClaimedUpokt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventProofValidityChecked                protoreflect.MessageDescriptor
	fd_EventProofValidityChecked_proof          protoreflect.FieldDescriptor
	fd_EventProofValidityChecked_block_height   protoreflect.FieldDescriptor
	fd_EventProofValidityChecked_proof_status   protoreflect.FieldDescriptor
	fd_EventProofValidityChecked_failure_reason protoreflect.FieldDescriptor
)

func init() {
	file_pocket_proof_event_proto_init()
	md_EventProofValidityChecked = File_pocket_proof_event_proto.Messages().ByName("EventProofValidityChecked")
	fd_EventProofValidityChecked_proof = md_EventProofValidityChecked.Fields().ByName("proof")
	fd_EventProofValidityChecked_block_height = md_EventProofValidityChecked.Fields().ByName("block_height")
	fd_EventProofValidityChecked_proof_status = md_EventProofValidityChecked.Fields().ByName("proof_status")
	fd_EventProofValidityChecked_failure_reason = md_EventProofValidityChecked.Fields().ByName("failure_reason")
}

var _ protoreflect.Message = (*fastReflection_EventProofValidityChecked)(nil)

type fastReflection_EventProofValidityChecked EventProofValidityChecked

func (x *EventProofValidityChecked) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventProofValidityChecked)(x)
}

func (x *EventProofValidityChecked) slowProtoReflect() protoreflect.Message {
	mi := &file_pocket_proof_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventProofValidityChecked_messageType fastReflection_EventProofValidityChecked_messageType
var _ protoreflect.MessageType = fastReflection_EventProofValidityChecked_messageType{}

type fastReflection_EventProofValidityChecked_messageType struct{}

func (x fastReflection_EventProofValidityChecked_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventProofValidityChecked)(nil)
}
func (x fastReflection_EventProofValidityChecked_messageType) New() protoreflect.Message {
	return new(fastReflection_EventProofValidityChecked)
}
func (x fastReflection_EventProofValidityChecked_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventProofValidityChecked
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventProofValidityChecked) Descriptor() protoreflect.MessageDescriptor {
	return md_EventProofValidityChecked
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventProofValidityChecked) Type() protoreflect.MessageType {
	return _fastReflection_EventProofValidityChecked_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventProofValidityChecked) New() protoreflect.Message {
	return new(fastReflection_EventProofValidityChecked)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventProofValidityChecked) Interface() protoreflect.ProtoMessage {
	return (*EventProofValidityChecked)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventProofValidityChecked) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_EventProofValidityChecked_proof, value) {
			return
		}
	}
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_EventProofValidityChecked_block_height, value) {
			return
		}
	}
	if x.ProofStatus != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.ProofStatus))
		if !f(fd_EventProofValidityChecked_proof_status, value) {
			return
		}
	}
	if x.FailureReason != "" {
		value := protoreflect.ValueOfString(x.FailureReason)
		if !f(fd_EventProofValidityChecked_failure_reason, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventProofValidityChecked) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "pocket.proof.EventProofValidityChecked.proof":
		return x.Proof != nil
	case "pocket.proof.EventProofValidityChecked.block_height":
		return x.BlockHeight != uint64(0)
	case "pocket.proof.EventProofValidityChecked.proof_status":
		return x.ProofStatus != 0
	case "pocket.proof.EventProofValidityChecked.failure_reason":
		return x.FailureReason != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofValidityChecked"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofValidityChecked does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofValidityChecked) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "pocket.proof.EventProofValidityChecked.proof":
		x.Proof = nil
	case "pocket.proof.EventProofValidityChecked.block_height":
		x.BlockHeight = uint64(0)
	case "pocket.proof.EventProofValidityChecked.proof_status":
		x.ProofStatus = 0
	case "pocket.proof.EventProofValidityChecked.failure_reason":
		x.FailureReason = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofValidityChecked"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofValidityChecked does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventProofValidityChecked) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "pocket.proof.EventProofValidityChecked.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "pocket.proof.EventProofValidityChecked.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "pocket.proof.EventProofValidityChecked.proof_status":
		value := x.ProofStatus
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "pocket.proof.EventProofValidityChecked.failure_reason":
		value := x.FailureReason
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofValidityChecked"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofValidityChecked does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofValidityChecked) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "pocket.proof.EventProofValidityChecked.proof":
		x.Proof = value.Message().Interface().(*Proof)
	case "pocket.proof.EventProofValidityChecked.block_height":
		x.BlockHeight = value.Uint()
	case "pocket.proof.EventProofValidityChecked.proof_status":
		x.ProofStatus = (ClaimProofStatus)(value.Enum())
	case "pocket.proof.EventProofValidityChecked.failure_reason":
		x.FailureReason = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofValidityChecked"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofValidityChecked does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofValidityChecked) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventProofValidityChecked.proof":
		if x.Proof == nil {
			x.Proof = new(Proof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "pocket.proof.EventProofValidityChecked.block_height":
		panic(fmt.Errorf("field block_height of message pocket.proof.EventProofValidityChecked is not mutable"))
	case "pocket.proof.EventProofValidityChecked.proof_status":
		panic(fmt.Errorf("field proof_status of message pocket.proof.EventProofValidityChecked is not mutable"))
	case "pocket.proof.EventProofValidityChecked.failure_reason":
		panic(fmt.Errorf("field failure_reason of message pocket.proof.EventProofValidityChecked is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofValidityChecked"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofValidityChecked does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventProofValidityChecked) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "pocket.proof.EventProofValidityChecked.proof":
		m := new(Proof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "pocket.proof.EventProofValidityChecked.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "pocket.proof.EventProofValidityChecked.proof_status":
		return protoreflect.ValueOfEnum(0)
	case "pocket.proof.EventProofValidityChecked.failure_reason":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: pocket.proof.EventProofValidityChecked"))
		}
		panic(fmt.Errorf("message pocket.proof.EventProofValidityChecked does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventProofValidityChecked) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in pocket.proof.EventProofValidityChecked", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventProofValidityChecked) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventProofValidityChecked) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventProofValidityChecked) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventProofValidityChecked) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventProofValidityChecked)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.ProofStatus != 0 {
			n += 1 + runtime.Sov(uint64(x.ProofStatus))
		}
		l = len(x.FailureReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventProofValidityChecked)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.FailureReason) > 0 {
			i -= len(x.FailureReason)
			copy(dAtA[i:], x.FailureReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FailureReason)))
			i--
			dAtA[i] = 0x22
		}
		if x.ProofStatus != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProofStatus))
			i--
			dAtA[i] = 0x18
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventProofValidityChecked)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventProofValidityChecked: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventProofValidityChecked: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &Proof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProofStatus", wireType)
				}
				x.ProofStatus = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProofStatus |= ClaimProofStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FailureReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: pocket/proof/event.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventClaimCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim                    *Claim        `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	NumRelays                uint64        `protobuf:"varint,2,opt,name=num_relays,json=numRelays,proto3" json:"num_relays,omitempty"`
	NumClaimedComputeUnits   uint64        `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units,omitempty"`
	NumEstimatedComputeUnits uint64        `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units,omitempty"`
	ClaimedUpokt             *v1beta1.Coin `protobuf:"bytes,6,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt,omitempty"`
}

func (x *EventClaimCreated) Reset() {
	*x = EventClaimCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_proof_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventClaimCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventClaimCreated) ProtoMessage() {}

// Deprecated: Use EventClaimCreated.ProtoReflect.Descriptor instead.
func (*EventClaimCreated) Descriptor() ([]byte, []int) {
	return file_pocket_proof_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventClaimCreated) GetClaim() *Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *EventClaimCreated) GetNumRelays() uint64 {
	if x != nil {
		return x.NumRelays
	}
	return 0
}

func (x *EventClaimCreated) GetNumClaimedComputeUnits() uint64 {
	if x != nil {
		return x.NumClaimedComputeUnits
	}
	return 0
}

func (x *EventClaimCreated) GetNumEstimatedComputeUnits() uint64 {
	if x != nil {
		return x.NumEstimatedComputeUnits
	}
	return 0
}

func (x *EventClaimCreated) GetClaimedUpokt() *v1beta1.Coin {
	if x != nil {
		return x.ClaimedUpokt
	}
	return nil
}

// TODO_TEST: Add coverage for claim updates.
type EventClaimUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim                    *Claim        `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	NumRelays                uint64        `protobuf:"varint,2,opt,name=num_relays,json=numRelays,proto3" json:"num_relays,omitempty"`
	NumClaimedComputeUnits   uint64        `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units,omitempty"`
	NumEstimatedComputeUnits uint64        `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units,omitempty"`
	ClaimedUpokt             *v1beta1.Coin `protobuf:"bytes,6,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt,omitempty"`
}

func (x *EventClaimUpdated) Reset() {
	*x = EventClaimUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_proof_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventClaimUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventClaimUpdated) ProtoMessage() {}

// Deprecated: Use EventClaimUpdated.ProtoReflect.Descriptor instead.
func (*EventClaimUpdated) Descriptor() ([]byte, []int) {
	return file_pocket_proof_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventClaimUpdated) GetClaim() *Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *EventClaimUpdated) GetNumRelays() uint64 {
	if x != nil {
		return x.NumRelays
	}
	return 0
}

func (x *EventClaimUpdated) GetNumClaimedComputeUnits() uint64 {
	if x != nil {
		return x.NumClaimedComputeUnits
	}
	return 0
}

func (x *EventClaimUpdated) GetNumEstimatedComputeUnits() uint64 {
	if x != nil {
		return x.NumEstimatedComputeUnits
	}
	return 0
}

func (x *EventClaimUpdated) GetClaimedUpokt() *v1beta1.Coin {
	if x != nil {
		return x.ClaimedUpokt
	}
	return nil
}

type EventProofSubmitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim                    *Claim        `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Proof                    *Proof        `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	NumRelays                uint64        `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays,omitempty"`
	NumClaimedComputeUnits   uint64        `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units,omitempty"`
	NumEstimatedComputeUnits uint64        `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units,omitempty"`
	ClaimedUpokt             *v1beta1.Coin `protobuf:"bytes,6,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt,omitempty"`
}

func (x *EventProofSubmitted) Reset() {
	*x = EventProofSubmitted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_proof_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProofSubmitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProofSubmitted) ProtoMessage() {}

// Deprecated: Use EventProofSubmitted.ProtoReflect.Descriptor instead.
func (*EventProofSubmitted) Descriptor() ([]byte, []int) {
	return file_pocket_proof_event_proto_rawDescGZIP(), []int{2}
}

func (x *EventProofSubmitted) GetClaim() *Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *EventProofSubmitted) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *EventProofSubmitted) GetNumRelays() uint64 {
	if x != nil {
		return x.NumRelays
	}
	return 0
}

func (x *EventProofSubmitted) GetNumClaimedComputeUnits() uint64 {
	if x != nil {
		return x.NumClaimedComputeUnits
	}
	return 0
}

func (x *EventProofSubmitted) GetNumEstimatedComputeUnits() uint64 {
	if x != nil {
		return x.NumEstimatedComputeUnits
	}
	return 0
}

func (x *EventProofSubmitted) GetClaimedUpokt() *v1beta1.Coin {
	if x != nil {
		return x.ClaimedUpokt
	}
	return nil
}

// TODO_TEST: Add coverage for proof updates.
type EventProofUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim                    *Claim        `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Proof                    *Proof        `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	NumRelays                uint64        `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays,omitempty"`
	NumClaimedComputeUnits   uint64        `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units,omitempty"`
	NumEstimatedComputeUnits uint64        `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units,omitempty"`
	ClaimedUpokt             *v1beta1.Coin `protobuf:"bytes,6,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt,omitempty"`
}

func (x *EventProofUpdated) Reset() {
	*x = EventProofUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_proof_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProofUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProofUpdated) ProtoMessage() {}

// Deprecated: Use EventProofUpdated.ProtoReflect.Descriptor instead.
func (*EventProofUpdated) Descriptor() ([]byte, []int) {
	return file_pocket_proof_event_proto_rawDescGZIP(), []int{3}
}

func (x *EventProofUpdated) GetClaim() *Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *EventProofUpdated) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *EventProofUpdated) GetNumRelays() uint64 {
	if x != nil {
		return x.NumRelays
	}
	return 0
}

func (x *EventProofUpdated) GetNumClaimedComputeUnits() uint64 {
	if x != nil {
		return x.NumClaimedComputeUnits
	}
	return 0
}

func (x *EventProofUpdated) GetNumEstimatedComputeUnits() uint64 {
	if x != nil {
		return x.NumEstimatedComputeUnits
	}
	return 0
}

func (x *EventProofUpdated) GetClaimedUpokt() *v1beta1.Coin {
	if x != nil {
		return x.ClaimedUpokt
	}
	return nil
}

// Event emitted after a proof has been checked for validity in the proof module's
// EndBlocker.
type EventProofValidityChecked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof       *Proof           `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHeight uint64           `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ProofStatus ClaimProofStatus `protobuf:"varint,3,opt,name=proof_status,json=proofStatus,proto3,enum=pocket.proof.ClaimProofStatus" json:"proof_status,omitempty"`
	// reason is the string representation of the error that led to the proof being
	// marked as invalid (e.g. "invalid closest merkle proof", "invalid relay request signature")
	FailureReason string `protobuf:"bytes,4,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *EventProofValidityChecked) Reset() {
	*x = EventProofValidityChecked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pocket_proof_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProofValidityChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProofValidityChecked) ProtoMessage() {}

// Deprecated: Use EventProofValidityChecked.ProtoReflect.Descriptor instead.
func (*EventProofValidityChecked) Descriptor() ([]byte, []int) {
	return file_pocket_proof_event_proto_rawDescGZIP(), []int{4}
}

func (x *EventProofValidityChecked) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *EventProofValidityChecked) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *EventProofValidityChecked) GetProofStatus() ClaimProofStatus {
	if x != nil {
		return x.ProofStatus
	}
	return ClaimProofStatus_PENDING_VALIDATION
}

func (x *EventProofValidityChecked) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

var File_pocket_proof_event_proto protoreflect.FileDescriptor

var file_pocket_proof_event_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x03, 0x0a, 0x11, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x19, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x5e, 0x0a,
	0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a,
	0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6f, 0x6b, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x11, 0xea, 0xde, 0x1f, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6f,
	0x6b, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x55, 0x70, 0x6f, 0x6b, 0x74,
	0x22, 0x85, 0x03, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d,
	0xea, 0xde, 0x1f, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b,
	0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x18, 0x6e, 0x75, 0x6d,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x6f, 0x6b, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6f, 0x6b, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x55, 0x70, 0x6f, 0x6b, 0x74, 0x22, 0xbd, 0x03, 0x0a, 0x13, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d,
	0xea, 0xde, 0x1f, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b,
	0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x18, 0x6e, 0x75, 0x6d,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x6f, 0x6b, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6f, 0x6b, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x55, 0x70, 0x6f, 0x6b, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x11, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e,
	0xea, 0xde, 0x1f, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0xea, 0xde,
	0x1f, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x16, 0x6e, 0x75, 0x6d,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x6f, 0x6b, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x6f, 0x6b, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x55, 0x70, 0x6f, 0x6b, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x33, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x53, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde,
	0x1f, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x92, 0x01, 0xd8, 0xe2, 0x1e, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1d, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0xa2, 0x02, 0x03, 0x50, 0x50, 0x58, 0xaa, 0x02, 0x0c, 0x50, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0xca, 0x02, 0x0c, 0x50, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0xe2, 0x02, 0x18, 0x50, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x5c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pocket_proof_event_proto_rawDescOnce sync.Once
	file_pocket_proof_event_proto_rawDescData = file_pocket_proof_event_proto_rawDesc
)

func file_pocket_proof_event_proto_rawDescGZIP() []byte {
	file_pocket_proof_event_proto_rawDescOnce.Do(func() {
		file_pocket_proof_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_pocket_proof_event_proto_rawDescData)
	})
	return file_pocket_proof_event_proto_rawDescData
}

var file_pocket_proof_event_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pocket_proof_event_proto_goTypes = []interface{}{
	(*EventClaimCreated)(nil),         // 0: pocket.proof.EventClaimCreated
	(*EventClaimUpdated)(nil),         // 1: pocket.proof.EventClaimUpdated
	(*EventProofSubmitted)(nil),       // 2: pocket.proof.EventProofSubmitted
	(*EventProofUpdated)(nil),         // 3: pocket.proof.EventProofUpdated
	(*EventProofValidityChecked)(nil), // 4: pocket.proof.EventProofValidityChecked
	(*Claim)(nil),                     // 5: pocket.proof.Claim
	(*v1beta1.Coin)(nil),              // 6: cosmos.base.v1beta1.Coin
	(*Proof)(nil),                     // 7: pocket.proof.Proof
	(ClaimProofStatus)(0),             // 8: pocket.proof.ClaimProofStatus
}
var file_pocket_proof_event_proto_depIdxs = []int32{
	5,  // 0: pocket.proof.EventClaimCreated.claim:type_name -> pocket.proof.Claim
	6,  // 1: pocket.proof.EventClaimCreated.claimed_upokt:type_name -> cosmos.base.v1beta1.Coin
	5,  // 2: pocket.proof.EventClaimUpdated.claim:type_name -> pocket.proof.Claim
	6,  // 3: pocket.proof.EventClaimUpdated.claimed_upokt:type_name -> cosmos.base.v1beta1.Coin
	5,  // 4: pocket.proof.EventProofSubmitted.claim:type_name -> pocket.proof.Claim
	7,  // 5: pocket.proof.EventProofSubmitted.proof:type_name -> pocket.proof.Proof
	6,  // 6: pocket.proof.EventProofSubmitted.claimed_upokt:type_name -> cosmos.base.v1beta1.Coin
	5,  // 7: pocket.proof.EventProofUpdated.claim:type_name -> pocket.proof.Claim
	7,  // 8: pocket.proof.EventProofUpdated.proof:type_name -> pocket.proof.Proof
	6,  // 9: pocket.proof.EventProofUpdated.claimed_upokt:type_name -> cosmos.base.v1beta1.Coin
	7,  // 10: pocket.proof.EventProofValidityChecked.proof:type_name -> pocket.proof.Proof
	8,  // 11: pocket.proof.EventProofValidityChecked.proof_status:type_name -> pocket.proof.ClaimProofStatus
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pocket_proof_event_proto_init() }
func file_pocket_proof_event_proto_init() {
	if File_pocket_proof_event_proto != nil {
		return
	}
	file_pocket_proof_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pocket_proof_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventClaimCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pocket_proof_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventClaimUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pocket_proof_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProofSubmitted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pocket_proof_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProofUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pocket_proof_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProofValidityChecked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pocket_proof_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pocket_proof_event_proto_goTypes,
		DependencyIndexes: file_pocket_proof_event_proto_depIdxs,
		MessageInfos:      file_pocket_proof_event_proto_msgTypes,
	}.Build()
	File_pocket_proof_event_proto = out.File
	file_pocket_proof_event_proto_rawDesc = nil
	file_pocket_proof_event_proto_goTypes = nil
	file_pocket_proof_event_proto_depIdxs = nil
}
