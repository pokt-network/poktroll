// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: poktroll/migration/query.proto

package migration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Query_Params_FullMethodName               = "/poktroll.migration.Query/Params"
	Query_MorseAccountState_FullMethodName    = "/poktroll.migration.Query/MorseAccountState"
	Query_MorseAccountClaim_FullMethodName    = "/poktroll.migration.Query/MorseAccountClaim"
	Query_MorseAccountClaimAll_FullMethodName = "/poktroll.migration.Query/MorseAccountClaimAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries the MorseAccountState.
	MorseAccountState(ctx context.Context, in *QueryGetMorseAccountStateRequest, opts ...grpc.CallOption) (*QueryGetMorseAccountStateResponse, error)
	// Queries a list of MorseAccountClaim items.
	MorseAccountClaim(ctx context.Context, in *QueryGetMorseAccountClaimRequest, opts ...grpc.CallOption) (*QueryGetMorseAccountClaimResponse, error)
	MorseAccountClaimAll(ctx context.Context, in *QueryAllMorseAccountClaimRequest, opts ...grpc.CallOption) (*QueryAllMorseAccountClaimResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MorseAccountState(ctx context.Context, in *QueryGetMorseAccountStateRequest, opts ...grpc.CallOption) (*QueryGetMorseAccountStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetMorseAccountStateResponse)
	err := c.cc.Invoke(ctx, Query_MorseAccountState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MorseAccountClaim(ctx context.Context, in *QueryGetMorseAccountClaimRequest, opts ...grpc.CallOption) (*QueryGetMorseAccountClaimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetMorseAccountClaimResponse)
	err := c.cc.Invoke(ctx, Query_MorseAccountClaim_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MorseAccountClaimAll(ctx context.Context, in *QueryAllMorseAccountClaimRequest, opts ...grpc.CallOption) (*QueryAllMorseAccountClaimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAllMorseAccountClaimResponse)
	err := c.cc.Invoke(ctx, Query_MorseAccountClaimAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries the MorseAccountState.
	MorseAccountState(context.Context, *QueryGetMorseAccountStateRequest) (*QueryGetMorseAccountStateResponse, error)
	// Queries a list of MorseAccountClaim items.
	MorseAccountClaim(context.Context, *QueryGetMorseAccountClaimRequest) (*QueryGetMorseAccountClaimResponse, error)
	MorseAccountClaimAll(context.Context, *QueryAllMorseAccountClaimRequest) (*QueryAllMorseAccountClaimResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) MorseAccountState(context.Context, *QueryGetMorseAccountStateRequest) (*QueryGetMorseAccountStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MorseAccountState not implemented")
}
func (UnimplementedQueryServer) MorseAccountClaim(context.Context, *QueryGetMorseAccountClaimRequest) (*QueryGetMorseAccountClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MorseAccountClaim not implemented")
}
func (UnimplementedQueryServer) MorseAccountClaimAll(context.Context, *QueryAllMorseAccountClaimRequest) (*QueryAllMorseAccountClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MorseAccountClaimAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MorseAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMorseAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MorseAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MorseAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MorseAccountState(ctx, req.(*QueryGetMorseAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MorseAccountClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMorseAccountClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MorseAccountClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MorseAccountClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MorseAccountClaim(ctx, req.(*QueryGetMorseAccountClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MorseAccountClaimAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMorseAccountClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MorseAccountClaimAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MorseAccountClaimAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MorseAccountClaimAll(ctx, req.(*QueryAllMorseAccountClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poktroll.migration.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MorseAccountState",
			Handler:    _Query_MorseAccountState_Handler,
		},
		{
			MethodName: "MorseAccountClaim",
			Handler:    _Query_MorseAccountClaim_Handler,
		},
		{
			MethodName: "MorseAccountClaimAll",
			Handler:    _Query_MorseAccountClaimAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poktroll/migration/query.proto",
}
