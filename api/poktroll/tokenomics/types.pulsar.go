// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tokenomics

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	proof "github.com/pokt-network/poktroll/api/poktroll/proof"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_ClaimSettlementResult_2_list)(nil)

type _ClaimSettlementResult_2_list struct {
	list *[]*MintBurnOp
}

func (x *_ClaimSettlementResult_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ClaimSettlementResult_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ClaimSettlementResult_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MintBurnOp)
	(*x.list)[i] = concreteValue
}

func (x *_ClaimSettlementResult_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MintBurnOp)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ClaimSettlementResult_2_list) AppendMutable() protoreflect.Value {
	v := new(MintBurnOp)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ClaimSettlementResult_2_list) NewElement() protoreflect.Value {
	v := new(MintBurnOp)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ClaimSettlementResult_3_list)(nil)

type _ClaimSettlementResult_3_list struct {
	list *[]*MintBurnOp
}

func (x *_ClaimSettlementResult_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ClaimSettlementResult_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ClaimSettlementResult_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MintBurnOp)
	(*x.list)[i] = concreteValue
}

func (x *_ClaimSettlementResult_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MintBurnOp)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ClaimSettlementResult_3_list) AppendMutable() protoreflect.Value {
	v := new(MintBurnOp)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ClaimSettlementResult_3_list) NewElement() protoreflect.Value {
	v := new(MintBurnOp)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ClaimSettlementResult_4_list)(nil)

type _ClaimSettlementResult_4_list struct {
	list *[]*ModToModTransfer
}

func (x *_ClaimSettlementResult_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ClaimSettlementResult_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ClaimSettlementResult_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ModToModTransfer)
	(*x.list)[i] = concreteValue
}

func (x *_ClaimSettlementResult_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ModToModTransfer)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ClaimSettlementResult_4_list) AppendMutable() protoreflect.Value {
	v := new(ModToModTransfer)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ClaimSettlementResult_4_list) NewElement() protoreflect.Value {
	v := new(ModToModTransfer)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ClaimSettlementResult_5_list)(nil)

type _ClaimSettlementResult_5_list struct {
	list *[]*ModToAcctTransfer
}

func (x *_ClaimSettlementResult_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ClaimSettlementResult_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ClaimSettlementResult_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ModToAcctTransfer)
	(*x.list)[i] = concreteValue
}

func (x *_ClaimSettlementResult_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ModToAcctTransfer)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ClaimSettlementResult_5_list) AppendMutable() protoreflect.Value {
	v := new(ModToAcctTransfer)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ClaimSettlementResult_5_list) NewElement() protoreflect.Value {
	v := new(ModToAcctTransfer)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ClaimSettlementResult_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ClaimSettlementResult                       protoreflect.MessageDescriptor
	fd_ClaimSettlementResult_claim                 protoreflect.FieldDescriptor
	fd_ClaimSettlementResult_mints                 protoreflect.FieldDescriptor
	fd_ClaimSettlementResult_burns                 protoreflect.FieldDescriptor
	fd_ClaimSettlementResult_mod_to_mod_transfers  protoreflect.FieldDescriptor
	fd_ClaimSettlementResult_mod_to_acct_transfers protoreflect.FieldDescriptor
)

func init() {
	file_poktroll_tokenomics_types_proto_init()
	md_ClaimSettlementResult = File_poktroll_tokenomics_types_proto.Messages().ByName("ClaimSettlementResult")
	fd_ClaimSettlementResult_claim = md_ClaimSettlementResult.Fields().ByName("claim")
	fd_ClaimSettlementResult_mints = md_ClaimSettlementResult.Fields().ByName("mints")
	fd_ClaimSettlementResult_burns = md_ClaimSettlementResult.Fields().ByName("burns")
	fd_ClaimSettlementResult_mod_to_mod_transfers = md_ClaimSettlementResult.Fields().ByName("mod_to_mod_transfers")
	fd_ClaimSettlementResult_mod_to_acct_transfers = md_ClaimSettlementResult.Fields().ByName("mod_to_acct_transfers")
}

var _ protoreflect.Message = (*fastReflection_ClaimSettlementResult)(nil)

type fastReflection_ClaimSettlementResult ClaimSettlementResult

func (x *ClaimSettlementResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ClaimSettlementResult)(x)
}

func (x *ClaimSettlementResult) slowProtoReflect() protoreflect.Message {
	mi := &file_poktroll_tokenomics_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ClaimSettlementResult_messageType fastReflection_ClaimSettlementResult_messageType
var _ protoreflect.MessageType = fastReflection_ClaimSettlementResult_messageType{}

type fastReflection_ClaimSettlementResult_messageType struct{}

func (x fastReflection_ClaimSettlementResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ClaimSettlementResult)(nil)
}
func (x fastReflection_ClaimSettlementResult_messageType) New() protoreflect.Message {
	return new(fastReflection_ClaimSettlementResult)
}
func (x fastReflection_ClaimSettlementResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimSettlementResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ClaimSettlementResult) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimSettlementResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ClaimSettlementResult) Type() protoreflect.MessageType {
	return _fastReflection_ClaimSettlementResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ClaimSettlementResult) New() protoreflect.Message {
	return new(fastReflection_ClaimSettlementResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ClaimSettlementResult) Interface() protoreflect.ProtoMessage {
	return (*ClaimSettlementResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ClaimSettlementResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Claim != nil {
		value := protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
		if !f(fd_ClaimSettlementResult_claim, value) {
			return
		}
	}
	if len(x.Mints) != 0 {
		value := protoreflect.ValueOfList(&_ClaimSettlementResult_2_list{list: &x.Mints})
		if !f(fd_ClaimSettlementResult_mints, value) {
			return
		}
	}
	if len(x.Burns) != 0 {
		value := protoreflect.ValueOfList(&_ClaimSettlementResult_3_list{list: &x.Burns})
		if !f(fd_ClaimSettlementResult_burns, value) {
			return
		}
	}
	if len(x.ModToModTransfers) != 0 {
		value := protoreflect.ValueOfList(&_ClaimSettlementResult_4_list{list: &x.ModToModTransfers})
		if !f(fd_ClaimSettlementResult_mod_to_mod_transfers, value) {
			return
		}
	}
	if len(x.ModToAcctTransfers) != 0 {
		value := protoreflect.ValueOfList(&_ClaimSettlementResult_5_list{list: &x.ModToAcctTransfers})
		if !f(fd_ClaimSettlementResult_mod_to_acct_transfers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ClaimSettlementResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "poktroll.tokenomics.ClaimSettlementResult.claim":
		return x.Claim != nil
	case "poktroll.tokenomics.ClaimSettlementResult.mints":
		return len(x.Mints) != 0
	case "poktroll.tokenomics.ClaimSettlementResult.burns":
		return len(x.Burns) != 0
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers":
		return len(x.ModToModTransfers) != 0
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers":
		return len(x.ModToAcctTransfers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ClaimSettlementResult"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ClaimSettlementResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimSettlementResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "poktroll.tokenomics.ClaimSettlementResult.claim":
		x.Claim = nil
	case "poktroll.tokenomics.ClaimSettlementResult.mints":
		x.Mints = nil
	case "poktroll.tokenomics.ClaimSettlementResult.burns":
		x.Burns = nil
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers":
		x.ModToModTransfers = nil
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers":
		x.ModToAcctTransfers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ClaimSettlementResult"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ClaimSettlementResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ClaimSettlementResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "poktroll.tokenomics.ClaimSettlementResult.claim":
		value := x.Claim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "poktroll.tokenomics.ClaimSettlementResult.mints":
		if len(x.Mints) == 0 {
			return protoreflect.ValueOfList(&_ClaimSettlementResult_2_list{})
		}
		listValue := &_ClaimSettlementResult_2_list{list: &x.Mints}
		return protoreflect.ValueOfList(listValue)
	case "poktroll.tokenomics.ClaimSettlementResult.burns":
		if len(x.Burns) == 0 {
			return protoreflect.ValueOfList(&_ClaimSettlementResult_3_list{})
		}
		listValue := &_ClaimSettlementResult_3_list{list: &x.Burns}
		return protoreflect.ValueOfList(listValue)
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers":
		if len(x.ModToModTransfers) == 0 {
			return protoreflect.ValueOfList(&_ClaimSettlementResult_4_list{})
		}
		listValue := &_ClaimSettlementResult_4_list{list: &x.ModToModTransfers}
		return protoreflect.ValueOfList(listValue)
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers":
		if len(x.ModToAcctTransfers) == 0 {
			return protoreflect.ValueOfList(&_ClaimSettlementResult_5_list{})
		}
		listValue := &_ClaimSettlementResult_5_list{list: &x.ModToAcctTransfers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ClaimSettlementResult"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ClaimSettlementResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimSettlementResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "poktroll.tokenomics.ClaimSettlementResult.claim":
		x.Claim = value.Message().Interface().(*proof.Claim)
	case "poktroll.tokenomics.ClaimSettlementResult.mints":
		lv := value.List()
		clv := lv.(*_ClaimSettlementResult_2_list)
		x.Mints = *clv.list
	case "poktroll.tokenomics.ClaimSettlementResult.burns":
		lv := value.List()
		clv := lv.(*_ClaimSettlementResult_3_list)
		x.Burns = *clv.list
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers":
		lv := value.List()
		clv := lv.(*_ClaimSettlementResult_4_list)
		x.ModToModTransfers = *clv.list
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers":
		lv := value.List()
		clv := lv.(*_ClaimSettlementResult_5_list)
		x.ModToAcctTransfers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ClaimSettlementResult"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ClaimSettlementResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimSettlementResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.ClaimSettlementResult.claim":
		if x.Claim == nil {
			x.Claim = new(proof.Claim)
		}
		return protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
	case "poktroll.tokenomics.ClaimSettlementResult.mints":
		if x.Mints == nil {
			x.Mints = []*MintBurnOp{}
		}
		value := &_ClaimSettlementResult_2_list{list: &x.Mints}
		return protoreflect.ValueOfList(value)
	case "poktroll.tokenomics.ClaimSettlementResult.burns":
		if x.Burns == nil {
			x.Burns = []*MintBurnOp{}
		}
		value := &_ClaimSettlementResult_3_list{list: &x.Burns}
		return protoreflect.ValueOfList(value)
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers":
		if x.ModToModTransfers == nil {
			x.ModToModTransfers = []*ModToModTransfer{}
		}
		value := &_ClaimSettlementResult_4_list{list: &x.ModToModTransfers}
		return protoreflect.ValueOfList(value)
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers":
		if x.ModToAcctTransfers == nil {
			x.ModToAcctTransfers = []*ModToAcctTransfer{}
		}
		value := &_ClaimSettlementResult_5_list{list: &x.ModToAcctTransfers}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ClaimSettlementResult"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ClaimSettlementResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ClaimSettlementResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.ClaimSettlementResult.claim":
		m := new(proof.Claim)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "poktroll.tokenomics.ClaimSettlementResult.mints":
		list := []*MintBurnOp{}
		return protoreflect.ValueOfList(&_ClaimSettlementResult_2_list{list: &list})
	case "poktroll.tokenomics.ClaimSettlementResult.burns":
		list := []*MintBurnOp{}
		return protoreflect.ValueOfList(&_ClaimSettlementResult_3_list{list: &list})
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers":
		list := []*ModToModTransfer{}
		return protoreflect.ValueOfList(&_ClaimSettlementResult_4_list{list: &list})
	case "poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers":
		list := []*ModToAcctTransfer{}
		return protoreflect.ValueOfList(&_ClaimSettlementResult_5_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ClaimSettlementResult"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ClaimSettlementResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ClaimSettlementResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in poktroll.tokenomics.ClaimSettlementResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ClaimSettlementResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimSettlementResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ClaimSettlementResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ClaimSettlementResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ClaimSettlementResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Claim != nil {
			l = options.Size(x.Claim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Mints) > 0 {
			for _, e := range x.Mints {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Burns) > 0 {
			for _, e := range x.Burns {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ModToModTransfers) > 0 {
			for _, e := range x.ModToModTransfers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ModToAcctTransfers) > 0 {
			for _, e := range x.ModToAcctTransfers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ClaimSettlementResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ModToAcctTransfers) > 0 {
			for iNdEx := len(x.ModToAcctTransfers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ModToAcctTransfers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.ModToModTransfers) > 0 {
			for iNdEx := len(x.ModToModTransfers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ModToModTransfers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.Burns) > 0 {
			for iNdEx := len(x.Burns) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Burns[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Mints) > 0 {
			for iNdEx := len(x.Mints) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Mints[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Claim != nil {
			encoded, err := options.Marshal(x.Claim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ClaimSettlementResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimSettlementResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimSettlementResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Claim == nil {
					x.Claim = &proof.Claim{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Claim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Mints", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Mints = append(x.Mints, &MintBurnOp{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Mints[len(x.Mints)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Burns", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Burns = append(x.Burns, &MintBurnOp{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Burns[len(x.Burns)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ModToModTransfers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ModToModTransfers = append(x.ModToModTransfers, &ModToModTransfer{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ModToModTransfers[len(x.ModToModTransfers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ModToAcctTransfers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ModToAcctTransfers = append(x.ModToAcctTransfers, &ModToAcctTransfer{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ModToAcctTransfers[len(x.ModToAcctTransfers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MintBurnOp                   protoreflect.MessageDescriptor
	fd_MintBurnOp_op_reason         protoreflect.FieldDescriptor
	fd_MintBurnOp_DestinationModule protoreflect.FieldDescriptor
	fd_MintBurnOp_coin              protoreflect.FieldDescriptor
)

func init() {
	file_poktroll_tokenomics_types_proto_init()
	md_MintBurnOp = File_poktroll_tokenomics_types_proto.Messages().ByName("MintBurnOp")
	fd_MintBurnOp_op_reason = md_MintBurnOp.Fields().ByName("op_reason")
	fd_MintBurnOp_DestinationModule = md_MintBurnOp.Fields().ByName("DestinationModule")
	fd_MintBurnOp_coin = md_MintBurnOp.Fields().ByName("coin")
}

var _ protoreflect.Message = (*fastReflection_MintBurnOp)(nil)

type fastReflection_MintBurnOp MintBurnOp

func (x *MintBurnOp) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MintBurnOp)(x)
}

func (x *MintBurnOp) slowProtoReflect() protoreflect.Message {
	mi := &file_poktroll_tokenomics_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MintBurnOp_messageType fastReflection_MintBurnOp_messageType
var _ protoreflect.MessageType = fastReflection_MintBurnOp_messageType{}

type fastReflection_MintBurnOp_messageType struct{}

func (x fastReflection_MintBurnOp_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MintBurnOp)(nil)
}
func (x fastReflection_MintBurnOp_messageType) New() protoreflect.Message {
	return new(fastReflection_MintBurnOp)
}
func (x fastReflection_MintBurnOp_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MintBurnOp
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MintBurnOp) Descriptor() protoreflect.MessageDescriptor {
	return md_MintBurnOp
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MintBurnOp) Type() protoreflect.MessageType {
	return _fastReflection_MintBurnOp_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MintBurnOp) New() protoreflect.Message {
	return new(fastReflection_MintBurnOp)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MintBurnOp) Interface() protoreflect.ProtoMessage {
	return (*MintBurnOp)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MintBurnOp) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OpReason != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OpReason))
		if !f(fd_MintBurnOp_op_reason, value) {
			return
		}
	}
	if x.DestinationModule != "" {
		value := protoreflect.ValueOfString(x.DestinationModule)
		if !f(fd_MintBurnOp_DestinationModule, value) {
			return
		}
	}
	if x.Coin != nil {
		value := protoreflect.ValueOfMessage(x.Coin.ProtoReflect())
		if !f(fd_MintBurnOp_coin, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MintBurnOp) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "poktroll.tokenomics.MintBurnOp.op_reason":
		return x.OpReason != 0
	case "poktroll.tokenomics.MintBurnOp.DestinationModule":
		return x.DestinationModule != ""
	case "poktroll.tokenomics.MintBurnOp.coin":
		return x.Coin != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.MintBurnOp"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.MintBurnOp does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MintBurnOp) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "poktroll.tokenomics.MintBurnOp.op_reason":
		x.OpReason = 0
	case "poktroll.tokenomics.MintBurnOp.DestinationModule":
		x.DestinationModule = ""
	case "poktroll.tokenomics.MintBurnOp.coin":
		x.Coin = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.MintBurnOp"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.MintBurnOp does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MintBurnOp) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "poktroll.tokenomics.MintBurnOp.op_reason":
		value := x.OpReason
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "poktroll.tokenomics.MintBurnOp.DestinationModule":
		value := x.DestinationModule
		return protoreflect.ValueOfString(value)
	case "poktroll.tokenomics.MintBurnOp.coin":
		value := x.Coin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.MintBurnOp"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.MintBurnOp does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MintBurnOp) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "poktroll.tokenomics.MintBurnOp.op_reason":
		x.OpReason = (SettlementOpReason)(value.Enum())
	case "poktroll.tokenomics.MintBurnOp.DestinationModule":
		x.DestinationModule = value.Interface().(string)
	case "poktroll.tokenomics.MintBurnOp.coin":
		x.Coin = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.MintBurnOp"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.MintBurnOp does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MintBurnOp) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.MintBurnOp.coin":
		if x.Coin == nil {
			x.Coin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Coin.ProtoReflect())
	case "poktroll.tokenomics.MintBurnOp.op_reason":
		panic(fmt.Errorf("field op_reason of message poktroll.tokenomics.MintBurnOp is not mutable"))
	case "poktroll.tokenomics.MintBurnOp.DestinationModule":
		panic(fmt.Errorf("field DestinationModule of message poktroll.tokenomics.MintBurnOp is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.MintBurnOp"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.MintBurnOp does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MintBurnOp) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.MintBurnOp.op_reason":
		return protoreflect.ValueOfEnum(0)
	case "poktroll.tokenomics.MintBurnOp.DestinationModule":
		return protoreflect.ValueOfString("")
	case "poktroll.tokenomics.MintBurnOp.coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.MintBurnOp"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.MintBurnOp does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MintBurnOp) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in poktroll.tokenomics.MintBurnOp", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MintBurnOp) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MintBurnOp) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MintBurnOp) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MintBurnOp) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MintBurnOp)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.OpReason != 0 {
			n += 1 + runtime.Sov(uint64(x.OpReason))
		}
		l = len(x.DestinationModule)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Coin != nil {
			l = options.Size(x.Coin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MintBurnOp)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Coin != nil {
			encoded, err := options.Marshal(x.Coin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.DestinationModule) > 0 {
			i -= len(x.DestinationModule)
			copy(dAtA[i:], x.DestinationModule)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationModule)))
			i--
			dAtA[i] = 0x12
		}
		if x.OpReason != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OpReason))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MintBurnOp)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MintBurnOp: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MintBurnOp: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OpReason", wireType)
				}
				x.OpReason = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OpReason |= SettlementOpReason(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationModule", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationModule = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Coin == nil {
					x.Coin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Coin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ModToAcctTransfer                  protoreflect.MessageDescriptor
	fd_ModToAcctTransfer_op_reason        protoreflect.FieldDescriptor
	fd_ModToAcctTransfer_SenderModule     protoreflect.FieldDescriptor
	fd_ModToAcctTransfer_RecipientAddress protoreflect.FieldDescriptor
	fd_ModToAcctTransfer_coin             protoreflect.FieldDescriptor
)

func init() {
	file_poktroll_tokenomics_types_proto_init()
	md_ModToAcctTransfer = File_poktroll_tokenomics_types_proto.Messages().ByName("ModToAcctTransfer")
	fd_ModToAcctTransfer_op_reason = md_ModToAcctTransfer.Fields().ByName("op_reason")
	fd_ModToAcctTransfer_SenderModule = md_ModToAcctTransfer.Fields().ByName("SenderModule")
	fd_ModToAcctTransfer_RecipientAddress = md_ModToAcctTransfer.Fields().ByName("RecipientAddress")
	fd_ModToAcctTransfer_coin = md_ModToAcctTransfer.Fields().ByName("coin")
}

var _ protoreflect.Message = (*fastReflection_ModToAcctTransfer)(nil)

type fastReflection_ModToAcctTransfer ModToAcctTransfer

func (x *ModToAcctTransfer) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ModToAcctTransfer)(x)
}

func (x *ModToAcctTransfer) slowProtoReflect() protoreflect.Message {
	mi := &file_poktroll_tokenomics_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ModToAcctTransfer_messageType fastReflection_ModToAcctTransfer_messageType
var _ protoreflect.MessageType = fastReflection_ModToAcctTransfer_messageType{}

type fastReflection_ModToAcctTransfer_messageType struct{}

func (x fastReflection_ModToAcctTransfer_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ModToAcctTransfer)(nil)
}
func (x fastReflection_ModToAcctTransfer_messageType) New() protoreflect.Message {
	return new(fastReflection_ModToAcctTransfer)
}
func (x fastReflection_ModToAcctTransfer_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ModToAcctTransfer
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ModToAcctTransfer) Descriptor() protoreflect.MessageDescriptor {
	return md_ModToAcctTransfer
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ModToAcctTransfer) Type() protoreflect.MessageType {
	return _fastReflection_ModToAcctTransfer_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ModToAcctTransfer) New() protoreflect.Message {
	return new(fastReflection_ModToAcctTransfer)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ModToAcctTransfer) Interface() protoreflect.ProtoMessage {
	return (*ModToAcctTransfer)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ModToAcctTransfer) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OpReason != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OpReason))
		if !f(fd_ModToAcctTransfer_op_reason, value) {
			return
		}
	}
	if x.SenderModule != "" {
		value := protoreflect.ValueOfString(x.SenderModule)
		if !f(fd_ModToAcctTransfer_SenderModule, value) {
			return
		}
	}
	if x.RecipientAddress != "" {
		value := protoreflect.ValueOfString(x.RecipientAddress)
		if !f(fd_ModToAcctTransfer_RecipientAddress, value) {
			return
		}
	}
	if x.Coin != nil {
		value := protoreflect.ValueOfMessage(x.Coin.ProtoReflect())
		if !f(fd_ModToAcctTransfer_coin, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ModToAcctTransfer) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToAcctTransfer.op_reason":
		return x.OpReason != 0
	case "poktroll.tokenomics.ModToAcctTransfer.SenderModule":
		return x.SenderModule != ""
	case "poktroll.tokenomics.ModToAcctTransfer.RecipientAddress":
		return x.RecipientAddress != ""
	case "poktroll.tokenomics.ModToAcctTransfer.coin":
		return x.Coin != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToAcctTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToAcctTransfer does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToAcctTransfer) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToAcctTransfer.op_reason":
		x.OpReason = 0
	case "poktroll.tokenomics.ModToAcctTransfer.SenderModule":
		x.SenderModule = ""
	case "poktroll.tokenomics.ModToAcctTransfer.RecipientAddress":
		x.RecipientAddress = ""
	case "poktroll.tokenomics.ModToAcctTransfer.coin":
		x.Coin = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToAcctTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToAcctTransfer does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ModToAcctTransfer) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "poktroll.tokenomics.ModToAcctTransfer.op_reason":
		value := x.OpReason
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "poktroll.tokenomics.ModToAcctTransfer.SenderModule":
		value := x.SenderModule
		return protoreflect.ValueOfString(value)
	case "poktroll.tokenomics.ModToAcctTransfer.RecipientAddress":
		value := x.RecipientAddress
		return protoreflect.ValueOfString(value)
	case "poktroll.tokenomics.ModToAcctTransfer.coin":
		value := x.Coin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToAcctTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToAcctTransfer does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToAcctTransfer) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToAcctTransfer.op_reason":
		x.OpReason = (SettlementOpReason)(value.Enum())
	case "poktroll.tokenomics.ModToAcctTransfer.SenderModule":
		x.SenderModule = value.Interface().(string)
	case "poktroll.tokenomics.ModToAcctTransfer.RecipientAddress":
		x.RecipientAddress = value.Interface().(string)
	case "poktroll.tokenomics.ModToAcctTransfer.coin":
		x.Coin = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToAcctTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToAcctTransfer does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToAcctTransfer) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToAcctTransfer.coin":
		if x.Coin == nil {
			x.Coin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Coin.ProtoReflect())
	case "poktroll.tokenomics.ModToAcctTransfer.op_reason":
		panic(fmt.Errorf("field op_reason of message poktroll.tokenomics.ModToAcctTransfer is not mutable"))
	case "poktroll.tokenomics.ModToAcctTransfer.SenderModule":
		panic(fmt.Errorf("field SenderModule of message poktroll.tokenomics.ModToAcctTransfer is not mutable"))
	case "poktroll.tokenomics.ModToAcctTransfer.RecipientAddress":
		panic(fmt.Errorf("field RecipientAddress of message poktroll.tokenomics.ModToAcctTransfer is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToAcctTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToAcctTransfer does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ModToAcctTransfer) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToAcctTransfer.op_reason":
		return protoreflect.ValueOfEnum(0)
	case "poktroll.tokenomics.ModToAcctTransfer.SenderModule":
		return protoreflect.ValueOfString("")
	case "poktroll.tokenomics.ModToAcctTransfer.RecipientAddress":
		return protoreflect.ValueOfString("")
	case "poktroll.tokenomics.ModToAcctTransfer.coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToAcctTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToAcctTransfer does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ModToAcctTransfer) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in poktroll.tokenomics.ModToAcctTransfer", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ModToAcctTransfer) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToAcctTransfer) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ModToAcctTransfer) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ModToAcctTransfer) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ModToAcctTransfer)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.OpReason != 0 {
			n += 1 + runtime.Sov(uint64(x.OpReason))
		}
		l = len(x.SenderModule)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RecipientAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Coin != nil {
			l = options.Size(x.Coin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ModToAcctTransfer)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Coin != nil {
			encoded, err := options.Marshal(x.Coin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RecipientAddress) > 0 {
			i -= len(x.RecipientAddress)
			copy(dAtA[i:], x.RecipientAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecipientAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SenderModule) > 0 {
			i -= len(x.SenderModule)
			copy(dAtA[i:], x.SenderModule)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SenderModule)))
			i--
			dAtA[i] = 0x12
		}
		if x.OpReason != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OpReason))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ModToAcctTransfer)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ModToAcctTransfer: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ModToAcctTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OpReason", wireType)
				}
				x.OpReason = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OpReason |= SettlementOpReason(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SenderModule", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SenderModule = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecipientAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Coin == nil {
					x.Coin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Coin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ModToModTransfer                 protoreflect.MessageDescriptor
	fd_ModToModTransfer_op_reason       protoreflect.FieldDescriptor
	fd_ModToModTransfer_SenderModule    protoreflect.FieldDescriptor
	fd_ModToModTransfer_RecipientModule protoreflect.FieldDescriptor
	fd_ModToModTransfer_coin            protoreflect.FieldDescriptor
)

func init() {
	file_poktroll_tokenomics_types_proto_init()
	md_ModToModTransfer = File_poktroll_tokenomics_types_proto.Messages().ByName("ModToModTransfer")
	fd_ModToModTransfer_op_reason = md_ModToModTransfer.Fields().ByName("op_reason")
	fd_ModToModTransfer_SenderModule = md_ModToModTransfer.Fields().ByName("SenderModule")
	fd_ModToModTransfer_RecipientModule = md_ModToModTransfer.Fields().ByName("RecipientModule")
	fd_ModToModTransfer_coin = md_ModToModTransfer.Fields().ByName("coin")
}

var _ protoreflect.Message = (*fastReflection_ModToModTransfer)(nil)

type fastReflection_ModToModTransfer ModToModTransfer

func (x *ModToModTransfer) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ModToModTransfer)(x)
}

func (x *ModToModTransfer) slowProtoReflect() protoreflect.Message {
	mi := &file_poktroll_tokenomics_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ModToModTransfer_messageType fastReflection_ModToModTransfer_messageType
var _ protoreflect.MessageType = fastReflection_ModToModTransfer_messageType{}

type fastReflection_ModToModTransfer_messageType struct{}

func (x fastReflection_ModToModTransfer_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ModToModTransfer)(nil)
}
func (x fastReflection_ModToModTransfer_messageType) New() protoreflect.Message {
	return new(fastReflection_ModToModTransfer)
}
func (x fastReflection_ModToModTransfer_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ModToModTransfer
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ModToModTransfer) Descriptor() protoreflect.MessageDescriptor {
	return md_ModToModTransfer
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ModToModTransfer) Type() protoreflect.MessageType {
	return _fastReflection_ModToModTransfer_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ModToModTransfer) New() protoreflect.Message {
	return new(fastReflection_ModToModTransfer)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ModToModTransfer) Interface() protoreflect.ProtoMessage {
	return (*ModToModTransfer)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ModToModTransfer) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OpReason != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OpReason))
		if !f(fd_ModToModTransfer_op_reason, value) {
			return
		}
	}
	if x.SenderModule != "" {
		value := protoreflect.ValueOfString(x.SenderModule)
		if !f(fd_ModToModTransfer_SenderModule, value) {
			return
		}
	}
	if x.RecipientModule != "" {
		value := protoreflect.ValueOfString(x.RecipientModule)
		if !f(fd_ModToModTransfer_RecipientModule, value) {
			return
		}
	}
	if x.Coin != nil {
		value := protoreflect.ValueOfMessage(x.Coin.ProtoReflect())
		if !f(fd_ModToModTransfer_coin, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ModToModTransfer) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToModTransfer.op_reason":
		return x.OpReason != 0
	case "poktroll.tokenomics.ModToModTransfer.SenderModule":
		return x.SenderModule != ""
	case "poktroll.tokenomics.ModToModTransfer.RecipientModule":
		return x.RecipientModule != ""
	case "poktroll.tokenomics.ModToModTransfer.coin":
		return x.Coin != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToModTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToModTransfer does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToModTransfer) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToModTransfer.op_reason":
		x.OpReason = 0
	case "poktroll.tokenomics.ModToModTransfer.SenderModule":
		x.SenderModule = ""
	case "poktroll.tokenomics.ModToModTransfer.RecipientModule":
		x.RecipientModule = ""
	case "poktroll.tokenomics.ModToModTransfer.coin":
		x.Coin = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToModTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToModTransfer does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ModToModTransfer) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "poktroll.tokenomics.ModToModTransfer.op_reason":
		value := x.OpReason
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "poktroll.tokenomics.ModToModTransfer.SenderModule":
		value := x.SenderModule
		return protoreflect.ValueOfString(value)
	case "poktroll.tokenomics.ModToModTransfer.RecipientModule":
		value := x.RecipientModule
		return protoreflect.ValueOfString(value)
	case "poktroll.tokenomics.ModToModTransfer.coin":
		value := x.Coin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToModTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToModTransfer does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToModTransfer) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToModTransfer.op_reason":
		x.OpReason = (SettlementOpReason)(value.Enum())
	case "poktroll.tokenomics.ModToModTransfer.SenderModule":
		x.SenderModule = value.Interface().(string)
	case "poktroll.tokenomics.ModToModTransfer.RecipientModule":
		x.RecipientModule = value.Interface().(string)
	case "poktroll.tokenomics.ModToModTransfer.coin":
		x.Coin = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToModTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToModTransfer does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToModTransfer) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToModTransfer.coin":
		if x.Coin == nil {
			x.Coin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Coin.ProtoReflect())
	case "poktroll.tokenomics.ModToModTransfer.op_reason":
		panic(fmt.Errorf("field op_reason of message poktroll.tokenomics.ModToModTransfer is not mutable"))
	case "poktroll.tokenomics.ModToModTransfer.SenderModule":
		panic(fmt.Errorf("field SenderModule of message poktroll.tokenomics.ModToModTransfer is not mutable"))
	case "poktroll.tokenomics.ModToModTransfer.RecipientModule":
		panic(fmt.Errorf("field RecipientModule of message poktroll.tokenomics.ModToModTransfer is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToModTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToModTransfer does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ModToModTransfer) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "poktroll.tokenomics.ModToModTransfer.op_reason":
		return protoreflect.ValueOfEnum(0)
	case "poktroll.tokenomics.ModToModTransfer.SenderModule":
		return protoreflect.ValueOfString("")
	case "poktroll.tokenomics.ModToModTransfer.RecipientModule":
		return protoreflect.ValueOfString("")
	case "poktroll.tokenomics.ModToModTransfer.coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: poktroll.tokenomics.ModToModTransfer"))
		}
		panic(fmt.Errorf("message poktroll.tokenomics.ModToModTransfer does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ModToModTransfer) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in poktroll.tokenomics.ModToModTransfer", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ModToModTransfer) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModToModTransfer) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ModToModTransfer) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ModToModTransfer) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ModToModTransfer)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.OpReason != 0 {
			n += 1 + runtime.Sov(uint64(x.OpReason))
		}
		l = len(x.SenderModule)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RecipientModule)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Coin != nil {
			l = options.Size(x.Coin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ModToModTransfer)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Coin != nil {
			encoded, err := options.Marshal(x.Coin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RecipientModule) > 0 {
			i -= len(x.RecipientModule)
			copy(dAtA[i:], x.RecipientModule)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecipientModule)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SenderModule) > 0 {
			i -= len(x.SenderModule)
			copy(dAtA[i:], x.SenderModule)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SenderModule)))
			i--
			dAtA[i] = 0x12
		}
		if x.OpReason != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OpReason))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ModToModTransfer)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ModToModTransfer: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ModToModTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OpReason", wireType)
				}
				x.OpReason = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OpReason |= SettlementOpReason(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SenderModule", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SenderModule = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecipientModule", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecipientModule = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Coin == nil {
					x.Coin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Coin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: poktroll/tokenomics/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SettlementOpReason is a distinct, tlm-specific causal reason for a given operation.
type SettlementOpReason int32

const (
	// UNSPECIFIED is the default value for SettlementOpReason, it is used as a field
	// type for objects which need to distinguish whether a SettlementOpReason has been specified it or not.
	SettlementOpReason_UNSPECIFIED SettlementOpReason = 0
	// Value transfer (credit/debit)
	SettlementOpReason_TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT    SettlementOpReason = 1
	SettlementOpReason_TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN SettlementOpReason = 2
	// Inflation
	SettlementOpReason_TLM_GLOBAL_MINT_INFLATION SettlementOpReason = 3
	// Reward distribution
	SettlementOpReason_TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION SettlementOpReason = 4
	SettlementOpReason_TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION                             SettlementOpReason = 5
	SettlementOpReason_TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION                        SettlementOpReason = 6
	SettlementOpReason_TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION            SettlementOpReason = 7
	SettlementOpReason_TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION                    SettlementOpReason = 8
	SettlementOpReason_TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION                     SettlementOpReason = 9
	// Self-servicing mitigation
	SettlementOpReason_TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER SettlementOpReason = 10
	// Penalization
	SettlementOpReason_UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER SettlementOpReason = 11
	SettlementOpReason_UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN      SettlementOpReason = 12
	// Module accounting
	SettlementOpReason_TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER  SettlementOpReason = 13
	SettlementOpReason_TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER SettlementOpReason = 14
)

// Enum value maps for SettlementOpReason.
var (
	SettlementOpReason_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT",
		2:  "TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN",
		3:  "TLM_GLOBAL_MINT_INFLATION",
		4:  "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION",
		5:  "TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION",
		6:  "TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION",
		7:  "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION",
		8:  "TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION",
		9:  "TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION",
		10: "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER",
		11: "UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER",
		12: "UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN",
		13: "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER",
		14: "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER",
	}
	SettlementOpReason_value = map[string]int32{
		"UNSPECIFIED": 0,
		"TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT":                      1,
		"TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN":                   2,
		"TLM_GLOBAL_MINT_INFLATION":                                           3,
		"TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION": 4,
		"TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION":                             5,
		"TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION":                        6,
		"TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION":            7,
		"TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION":                    8,
		"TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION":                     9,
		"TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER":           10,
		"UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER":                      11,
		"UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN":                           12,
		"TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER":         13,
		"TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER":        14,
	}
)

func (x SettlementOpReason) Enum() *SettlementOpReason {
	p := new(SettlementOpReason)
	*p = x
	return p
}

func (x SettlementOpReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementOpReason) Descriptor() protoreflect.EnumDescriptor {
	return file_poktroll_tokenomics_types_proto_enumTypes[0].Descriptor()
}

func (SettlementOpReason) Type() protoreflect.EnumType {
	return &file_poktroll_tokenomics_types_proto_enumTypes[0]
}

func (x SettlementOpReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementOpReason.Descriptor instead.
func (SettlementOpReason) EnumDescriptor() ([]byte, []int) {
	return file_poktroll_tokenomics_types_proto_rawDescGZIP(), []int{0}
}

// SettlementResult holds mint, burn, and transfer operations that result from a single claim settlement.
type ClaimSettlementResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim              *proof.Claim         `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Mints              []*MintBurnOp        `protobuf:"bytes,2,rep,name=mints,proto3" json:"mints,omitempty"`
	Burns              []*MintBurnOp        `protobuf:"bytes,3,rep,name=burns,proto3" json:"burns,omitempty"`
	ModToModTransfers  []*ModToModTransfer  `protobuf:"bytes,4,rep,name=mod_to_mod_transfers,json=modToModTransfers,proto3" json:"mod_to_mod_transfers,omitempty"`
	ModToAcctTransfers []*ModToAcctTransfer `protobuf:"bytes,5,rep,name=mod_to_acct_transfers,json=modToAcctTransfers,proto3" json:"mod_to_acct_transfers,omitempty"`
}

func (x *ClaimSettlementResult) Reset() {
	*x = ClaimSettlementResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poktroll_tokenomics_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimSettlementResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimSettlementResult) ProtoMessage() {}

// Deprecated: Use ClaimSettlementResult.ProtoReflect.Descriptor instead.
func (*ClaimSettlementResult) Descriptor() ([]byte, []int) {
	return file_poktroll_tokenomics_types_proto_rawDescGZIP(), []int{0}
}

func (x *ClaimSettlementResult) GetClaim() *proof.Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *ClaimSettlementResult) GetMints() []*MintBurnOp {
	if x != nil {
		return x.Mints
	}
	return nil
}

func (x *ClaimSettlementResult) GetBurns() []*MintBurnOp {
	if x != nil {
		return x.Burns
	}
	return nil
}

func (x *ClaimSettlementResult) GetModToModTransfers() []*ModToModTransfer {
	if x != nil {
		return x.ModToModTransfers
	}
	return nil
}

func (x *ClaimSettlementResult) GetModToAcctTransfers() []*ModToAcctTransfer {
	if x != nil {
		return x.ModToAcctTransfers
	}
	return nil
}

// MintBurnOperation holds the parameters of a mint or burn operation.
type MintBurnOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpReason          SettlementOpReason `protobuf:"varint,1,opt,name=op_reason,json=opReason,proto3,enum=poktroll.tokenomics.SettlementOpReason" json:"op_reason,omitempty"`
	DestinationModule string             `protobuf:"bytes,2,opt,name=DestinationModule,proto3" json:"DestinationModule,omitempty"`
	Coin              *v1beta1.Coin      `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *MintBurnOp) Reset() {
	*x = MintBurnOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poktroll_tokenomics_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintBurnOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintBurnOp) ProtoMessage() {}

// Deprecated: Use MintBurnOp.ProtoReflect.Descriptor instead.
func (*MintBurnOp) Descriptor() ([]byte, []int) {
	return file_poktroll_tokenomics_types_proto_rawDescGZIP(), []int{1}
}

func (x *MintBurnOp) GetOpReason() SettlementOpReason {
	if x != nil {
		return x.OpReason
	}
	return SettlementOpReason_UNSPECIFIED
}

func (x *MintBurnOp) GetDestinationModule() string {
	if x != nil {
		return x.DestinationModule
	}
	return ""
}

func (x *MintBurnOp) GetCoin() *v1beta1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

// ModToAcctTransfer holds the parameters of a module to account transfer operation.
type ModToAcctTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpReason         SettlementOpReason `protobuf:"varint,1,opt,name=op_reason,json=opReason,proto3,enum=poktroll.tokenomics.SettlementOpReason" json:"op_reason,omitempty"`
	SenderModule     string             `protobuf:"bytes,2,opt,name=SenderModule,proto3" json:"SenderModule,omitempty"`
	RecipientAddress string             `protobuf:"bytes,3,opt,name=RecipientAddress,proto3" json:"RecipientAddress,omitempty"` // bech32 address
	Coin             *v1beta1.Coin      `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *ModToAcctTransfer) Reset() {
	*x = ModToAcctTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poktroll_tokenomics_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModToAcctTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModToAcctTransfer) ProtoMessage() {}

// Deprecated: Use ModToAcctTransfer.ProtoReflect.Descriptor instead.
func (*ModToAcctTransfer) Descriptor() ([]byte, []int) {
	return file_poktroll_tokenomics_types_proto_rawDescGZIP(), []int{2}
}

func (x *ModToAcctTransfer) GetOpReason() SettlementOpReason {
	if x != nil {
		return x.OpReason
	}
	return SettlementOpReason_UNSPECIFIED
}

func (x *ModToAcctTransfer) GetSenderModule() string {
	if x != nil {
		return x.SenderModule
	}
	return ""
}

func (x *ModToAcctTransfer) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *ModToAcctTransfer) GetCoin() *v1beta1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

// ModToModTransfer holds the parameters of a module to module transfer operation.
type ModToModTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpReason        SettlementOpReason `protobuf:"varint,1,opt,name=op_reason,json=opReason,proto3,enum=poktroll.tokenomics.SettlementOpReason" json:"op_reason,omitempty"`
	SenderModule    string             `protobuf:"bytes,2,opt,name=SenderModule,proto3" json:"SenderModule,omitempty"`
	RecipientModule string             `protobuf:"bytes,3,opt,name=RecipientModule,proto3" json:"RecipientModule,omitempty"` // This the semantic module named that can be found by searching for "ModuleName =" in the codebase
	Coin            *v1beta1.Coin      `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *ModToModTransfer) Reset() {
	*x = ModToModTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poktroll_tokenomics_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModToModTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModToModTransfer) ProtoMessage() {}

// Deprecated: Use ModToModTransfer.ProtoReflect.Descriptor instead.
func (*ModToModTransfer) Descriptor() ([]byte, []int) {
	return file_poktroll_tokenomics_types_proto_rawDescGZIP(), []int{3}
}

func (x *ModToModTransfer) GetOpReason() SettlementOpReason {
	if x != nil {
		return x.OpReason
	}
	return SettlementOpReason_UNSPECIFIED
}

func (x *ModToModTransfer) GetSenderModule() string {
	if x != nil {
		return x.SenderModule
	}
	return ""
}

func (x *ModToModTransfer) GetRecipientModule() string {
	if x != nil {
		return x.RecipientModule
	}
	return ""
}

func (x *ModToModTransfer) GetCoin() *v1beta1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

var File_poktroll_tokenomics_types_proto protoreflect.FileDescriptor

var file_poktroll_tokenomics_types_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x03, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x44, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x4f, 0x70, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x05, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x44, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x4f, 0x70, 0x42,
	0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x62, 0x75, 0x72, 0x6e, 0x73, 0x52, 0x05,
	0x62, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x74, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x54, 0x6f, 0x4d,
	0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x1c, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x14, 0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x54, 0x6f, 0x4d,
	0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x78, 0x0a, 0x15, 0x6d,
	0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x6b,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x15, 0x6d, 0x6f, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x74, 0x42, 0x75,
	0x72, 0x6e, 0x4f, 0x70, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x0d, 0xea, 0xde, 0x1f, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x08, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde,
	0x1f, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xb7, 0x02, 0x0a,
	0x11, 0x4d, 0x6f, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d,
	0xea, 0xde, 0x1f, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x6f,
	0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea,
	0xde, 0x1f, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x59,
	0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xea, 0xde, 0x1f, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xd2,
	0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x54, 0x6f,
	0x4d, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x09, 0x6f,
	0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0xea, 0xde, 0x1f, 0x09, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x2a, 0xa5, 0x06, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e,
	0x54, 0x4c, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x49, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x35, 0x0a, 0x31, 0x54, 0x4c, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x55,
	0x52, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45,
	0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x4d, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x47, 0x0a, 0x43, 0x54, 0x4c, 0x4d, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x59, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f,
	0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x2b, 0x0a, 0x27, 0x54, 0x4c, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49,
	0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4f, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c,
	0x54, 0x4c, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x3c,
	0x0a, 0x38, 0x54, 0x4c, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x34, 0x0a, 0x30,
	0x54, 0x4c, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x08, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x4c, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x3d, 0x0a, 0x39, 0x54, 0x4c, 0x4d, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x42,
	0x55, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x53, 0x43, 0x52, 0x4f, 0x57, 0x5f, 0x44, 0x41, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x32, 0x0a, 0x2e, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4c, 0x4d, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49,
	0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4c, 0x4d, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x0c, 0x12, 0x3f, 0x0a, 0x3b, 0x54, 0x4c, 0x4d,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x40, 0x0a, 0x3c, 0x54, 0x4c,
	0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x49, 0x4d, 0x42, 0x55, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x53, 0x43, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x0e, 0x42, 0xbc, 0x01, 0xd8,
	0xe2, 0x1e, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x42, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x6b,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0xa2, 0x02, 0x03, 0x50, 0x54, 0x58, 0xaa, 0x02, 0x13, 0x50, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0xca, 0x02, 0x13, 0x50,
	0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0xe2, 0x02, 0x1f, 0x50, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x5c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x50, 0x6f, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x3a,
	0x3a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_poktroll_tokenomics_types_proto_rawDescOnce sync.Once
	file_poktroll_tokenomics_types_proto_rawDescData = file_poktroll_tokenomics_types_proto_rawDesc
)

func file_poktroll_tokenomics_types_proto_rawDescGZIP() []byte {
	file_poktroll_tokenomics_types_proto_rawDescOnce.Do(func() {
		file_poktroll_tokenomics_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_poktroll_tokenomics_types_proto_rawDescData)
	})
	return file_poktroll_tokenomics_types_proto_rawDescData
}

var file_poktroll_tokenomics_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_poktroll_tokenomics_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_poktroll_tokenomics_types_proto_goTypes = []interface{}{
	(SettlementOpReason)(0),       // 0: poktroll.tokenomics.SettlementOpReason
	(*ClaimSettlementResult)(nil), // 1: poktroll.tokenomics.ClaimSettlementResult
	(*MintBurnOp)(nil),            // 2: poktroll.tokenomics.MintBurnOp
	(*ModToAcctTransfer)(nil),     // 3: poktroll.tokenomics.ModToAcctTransfer
	(*ModToModTransfer)(nil),      // 4: poktroll.tokenomics.ModToModTransfer
	(*proof.Claim)(nil),           // 5: poktroll.proof.Claim
	(*v1beta1.Coin)(nil),          // 6: cosmos.base.v1beta1.Coin
}
var file_poktroll_tokenomics_types_proto_depIdxs = []int32{
	5,  // 0: poktroll.tokenomics.ClaimSettlementResult.claim:type_name -> poktroll.proof.Claim
	2,  // 1: poktroll.tokenomics.ClaimSettlementResult.mints:type_name -> poktroll.tokenomics.MintBurnOp
	2,  // 2: poktroll.tokenomics.ClaimSettlementResult.burns:type_name -> poktroll.tokenomics.MintBurnOp
	4,  // 3: poktroll.tokenomics.ClaimSettlementResult.mod_to_mod_transfers:type_name -> poktroll.tokenomics.ModToModTransfer
	3,  // 4: poktroll.tokenomics.ClaimSettlementResult.mod_to_acct_transfers:type_name -> poktroll.tokenomics.ModToAcctTransfer
	0,  // 5: poktroll.tokenomics.MintBurnOp.op_reason:type_name -> poktroll.tokenomics.SettlementOpReason
	6,  // 6: poktroll.tokenomics.MintBurnOp.coin:type_name -> cosmos.base.v1beta1.Coin
	0,  // 7: poktroll.tokenomics.ModToAcctTransfer.op_reason:type_name -> poktroll.tokenomics.SettlementOpReason
	6,  // 8: poktroll.tokenomics.ModToAcctTransfer.coin:type_name -> cosmos.base.v1beta1.Coin
	0,  // 9: poktroll.tokenomics.ModToModTransfer.op_reason:type_name -> poktroll.tokenomics.SettlementOpReason
	6,  // 10: poktroll.tokenomics.ModToModTransfer.coin:type_name -> cosmos.base.v1beta1.Coin
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_poktroll_tokenomics_types_proto_init() }
func file_poktroll_tokenomics_types_proto_init() {
	if File_poktroll_tokenomics_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poktroll_tokenomics_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimSettlementResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poktroll_tokenomics_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintBurnOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poktroll_tokenomics_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModToAcctTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poktroll_tokenomics_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModToModTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poktroll_tokenomics_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_poktroll_tokenomics_types_proto_goTypes,
		DependencyIndexes: file_poktroll_tokenomics_types_proto_depIdxs,
		EnumInfos:         file_poktroll_tokenomics_types_proto_enumTypes,
		MessageInfos:      file_poktroll_tokenomics_types_proto_msgTypes,
	}.Build()
	File_poktroll_tokenomics_types_proto = out.File
	file_poktroll_tokenomics_types_proto_rawDesc = nil
	file_poktroll_tokenomics_types_proto_goTypes = nil
	file_poktroll_tokenomics_types_proto_depIdxs = nil
}
