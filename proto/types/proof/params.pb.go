// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/proof/params.proto

package proof

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// min_relay_difficulty_bits is the minimum difficulty in bits for a relay to
	// be included in a Merkle proof.
	MinRelayDifficultyBits uint64 `protobuf:"varint,1,opt,name=min_relay_difficulty_bits,json=minRelayDifficultyBits,proto3" json:"min_relay_difficulty_bits"`
	// proof_request_probability is the probability of a session requiring a proof
	// if it's cost (i.e. compute unit consumption) is below the ProofRequirementThreshold.
	ProofRequestProbability float32 `protobuf:"fixed32,2,opt,name=proof_request_probability,json=proofRequestProbability,proto3" json:"proof_request_probability"`
	// proof_requirement_threshold is the session cost (i.e. compute unit consumption)
	// threshold which asserts that a session MUST have a corresponding proof when its cost
	// is equal to or above the threshold. This is in contrast to the this requirement
	// being determined probabilistically via ProofRequestProbability.
	//
	// TODO_MAINNET: Consider renaming this to `proof_requirement_threshold_compute_units`.
	ProofRequirementThreshold uint64 `protobuf:"varint,3,opt,name=proof_requirement_threshold,json=proofRequirementThreshold,proto3" json:"proof_requirement_threshold"`
	// proof_missing_penalty is the number of tokens (uPOKT) which should be slashed from a supplier
	// when a proof is required (either via proof_requirement_threshold or proof_missing_penalty)
	// but is not provided.
	ProofMissingPenalty *types.Coin `protobuf:"bytes,4,opt,name=proof_missing_penalty,json=proofMissingPenalty,proto3" json:"proof_missing_penalty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad689ad5bf3a2d7, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinRelayDifficultyBits() uint64 {
	if m != nil {
		return m.MinRelayDifficultyBits
	}
	return 0
}

func (m *Params) GetProofRequestProbability() float32 {
	if m != nil {
		return m.ProofRequestProbability
	}
	return 0
}

func (m *Params) GetProofRequirementThreshold() uint64 {
	if m != nil {
		return m.ProofRequirementThreshold
	}
	return 0
}

func (m *Params) GetProofMissingPenalty() *types.Coin {
	if m != nil {
		return m.ProofMissingPenalty
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "poktroll.proof.Params")
}

func init() { proto.RegisterFile("poktroll/proof/params.proto", fileDescriptor_2ad689ad5bf3a2d7) }

var fileDescriptor_2ad689ad5bf3a2d7 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x77, 0xa7, 0x2b, 0x8c, 0x84, 0x84, 0xf9, 0x73, 0xf6, 0x9d, 0xb0, 0x2d, 0xaa,
	0x08, 0x09, 0xaf, 0xee, 0xe8, 0x28, 0x0d, 0x25, 0x48, 0x91, 0x45, 0x01, 0x34, 0xab, 0xb5, 0x6f,
	0x63, 0xaf, 0xe2, 0xdd, 0x31, 0xbb, 0x1b, 0xc0, 0xaf, 0x40, 0xc5, 0x23, 0x50, 0x53, 0xf1, 0x18,
	0x94, 0x29, 0xa9, 0x22, 0x94, 0x14, 0xa0, 0x3c, 0x05, 0xf2, 0xae, 0x93, 0x50, 0x90, 0x6b, 0xac,
	0xd1, 0xf7, 0xfb, 0xbe, 0xf1, 0x68, 0x76, 0xbc, 0x8b, 0x16, 0x66, 0x46, 0x41, 0xd3, 0xe0, 0x56,
	0x01, 0x4c, 0x71, 0x4b, 0x15, 0x15, 0x3a, 0x6d, 0x15, 0x18, 0xf0, 0x6f, 0x6f, 0x61, 0x6a, 0xe1,
	0xf9, 0x1d, 0x2a, 0xb8, 0x04, 0x6c, 0xbf, 0xce, 0x72, 0x7e, 0xaf, 0x82, 0x0a, 0x6c, 0x89, 0xfb,
	0x6a, 0x50, 0xa3, 0x12, 0xb4, 0x00, 0x8d, 0x0b, 0xaa, 0x19, 0xfe, 0x70, 0x59, 0x30, 0x43, 0x2f,
	0x71, 0x09, 0x5c, 0x3a, 0xfe, 0xe8, 0xdb, 0xb1, 0x77, 0x3a, 0xb1, 0x7f, 0xf2, 0xdf, 0x78, 0xa1,
	0xe0, 0x92, 0x28, 0xd6, 0xd0, 0x8e, 0x5c, 0xf3, 0xe9, 0x94, 0x97, 0xf3, 0xc6, 0x74, 0xa4, 0xe0,
	0x46, 0x07, 0x28, 0x41, 0xe3, 0x93, 0xec, 0xe1, 0x66, 0x19, 0x1f, 0x36, 0xe5, 0x0f, 0x04, 0x97,
	0x79, 0x4f, 0x5e, 0xec, 0x40, 0xc6, 0x8d, 0xf6, 0xdf, 0x7a, 0xa1, 0x1d, 0x9b, 0x28, 0xf6, 0x7e,
	0xce, 0xb4, 0x21, 0xad, 0x82, 0x82, 0x16, 0xbc, 0xe1, 0xa6, 0x0b, 0x8e, 0x12, 0x34, 0x3e, 0x72,
	0x9d, 0x0f, 0x9a, 0xf2, 0x33, 0x8b, 0x72, 0x47, 0x26, 0x7b, 0xe0, 0x13, 0xef, 0x62, 0x9f, 0xe2,
	0x8a, 0x09, 0x26, 0x0d, 0x31, 0xb5, 0x62, 0xba, 0x86, 0xe6, 0x3a, 0x38, 0xb6, 0x63, 0xc7, 0x9b,
	0x65, 0x7c, 0x93, 0x2d, 0x0f, 0x77, 0xed, 0x07, 0xf6, 0x7a, 0x8b, 0xfc, 0xda, 0xbb, 0xef, 0x92,
	0x82, 0x6b, 0xcd, 0x65, 0x45, 0x5a, 0x26, 0x69, 0x63, 0xba, 0xe0, 0x24, 0x41, 0xe3, 0x5b, 0x57,
	0x61, 0xea, 0x16, 0x9c, 0xf6, 0x0b, 0x4e, 0x87, 0x05, 0xa7, 0xcf, 0x81, 0xcb, 0x2c, 0xdc, 0x2c,
	0xe3, 0xff, 0x67, 0xf3, 0xbb, 0x56, 0x7e, 0xe5, 0xd4, 0x89, 0x13, 0x9f, 0x25, 0x7f, 0xbe, 0xc6,
	0xe8, 0xf3, 0xef, 0xef, 0x8f, 0xcf, 0x76, 0x97, 0xf0, 0x69, 0xb8, 0x05, 0xf7, 0x42, 0xd9, 0xcb,
	0x1f, 0xab, 0x08, 0x2d, 0x56, 0x11, 0xfa, 0xb5, 0x8a, 0xd0, 0x97, 0x75, 0x34, 0x5a, 0xac, 0xa3,
	0xd1, 0xcf, 0x75, 0x34, 0x7a, 0x77, 0x55, 0x71, 0x53, 0xcf, 0x8b, 0xb4, 0x04, 0x81, 0xfb, 0xf4,
	0x13, 0xc9, 0xcc, 0x47, 0x50, 0x33, 0xfc, 0xef, 0x51, 0x19, 0xc0, 0xa6, 0x6b, 0x99, 0x76, 0x4d,
	0x8b, 0x53, 0x2b, 0x3d, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x95, 0x9b, 0x91, 0x89, 0x79, 0x02,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinRelayDifficultyBits != that1.MinRelayDifficultyBits {
		return false
	}
	if this.ProofRequestProbability != that1.ProofRequestProbability {
		return false
	}
	if this.ProofRequirementThreshold != that1.ProofRequirementThreshold {
		return false
	}
	if !this.ProofMissingPenalty.Equal(that1.ProofMissingPenalty) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofMissingPenalty != nil {
		{
			size, err := m.ProofMissingPenalty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ProofRequirementThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofRequirementThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.ProofRequestProbability != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ProofRequestProbability))))
		i--
		dAtA[i] = 0x15
	}
	if m.MinRelayDifficultyBits != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinRelayDifficultyBits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinRelayDifficultyBits != 0 {
		n += 1 + sovParams(uint64(m.MinRelayDifficultyBits))
	}
	if m.ProofRequestProbability != 0 {
		n += 5
	}
	if m.ProofRequirementThreshold != 0 {
		n += 1 + sovParams(uint64(m.ProofRequirementThreshold))
	}
	if m.ProofMissingPenalty != nil {
		l = m.ProofMissingPenalty.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRelayDifficultyBits", wireType)
			}
			m.MinRelayDifficultyBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinRelayDifficultyBits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofRequestProbability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ProofRequestProbability = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofRequirementThreshold", wireType)
			}
			m.ProofRequirementThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofRequirementThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofMissingPenalty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofMissingPenalty == nil {
				m.ProofMissingPenalty = &types.Coin{}
			}
			if err := m.ProofMissingPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
