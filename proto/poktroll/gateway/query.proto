syntax = "proto3";
package poktroll.gateway;

option go_package = "github.com/pokt-network/poktroll/x/gateway/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/gateway/params.proto";
import "poktroll/gateway/types.proto";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/gateway/params";

  }

  // Queries a list of Gateway items.
  rpc Gateway    (QueryGetGatewayRequest) returns (QueryGetGatewayResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/gateway/gateway/{address}";

  }
  rpc AllGateways (QueryAllGatewaysRequest) returns (QueryAllGatewaysResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/gateway/gateway";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetGatewayRequest {
  string address = 1;
}

message QueryGetGatewayResponse {
  Gateway gateway = 1 [(gogoproto.nullable) = false];
}

message QueryAllGatewaysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGatewaysResponse {
  repeated Gateway gateways = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

