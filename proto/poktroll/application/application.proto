syntax = "proto3";
package poktroll.application;

option go_package = "github.com/pokt-network/poktroll/x/application/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

import "poktroll/shared/service.proto";

// Application defines the type used to store an on-chain definition and state for an application
message Application {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the application using cosmos' ScalarDescriptor to ensure deterministic encoding
  cosmos.base.v1beta1.Coin stake = 2; // The total amount of uPOKT the application has staked
  repeated poktroll.shared.ApplicationServiceConfig service_configs = 3; // The list of services this appliccation is configured to request service for
  repeated string delegatee_gateway_addresses = 4 [(cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.nullable) = false]; // The Bech32 encoded addresses for all delegatee Gateways, in a non-nullable slice
  repeated ArchivedDelegations archived_delegations = 5 [(gogoproto.nullable) = false];
}

// ArchivedDelegations defines the type used to store the archived delegations
// for an application in addition to the last block height where the delegation
// was active.
message ArchivedDelegations {
  int64 lastActiveBlockHeight = 1;
  repeated string gateway_addresses = 2 [(cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.nullable) = false];
}

// ApplicationsWithArchivedDelegations defines the type used to store the addresses
// of applications that have delegations being archived at lastActiveBlockHeight.
// It is used to retrieve the applications that need to have their archived
// delegations removed from the application and avoid the need to iterate over
// all applications to find the ones concerned.
message ApplicationsWithArchivedDelegations {
  int64 lastActiveBlockHeight = 1;
  repeated string app_addresses = 2 [(cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.nullable) = false];
}