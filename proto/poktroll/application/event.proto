syntax = "proto3";
package poktroll.application;

option go_package = "github.com/pokt-network/poktroll/x/application/types";
option (gogoproto.stable_marshaler_all) = true;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/shared/service.proto";
import "poktroll/application/types.proto";

// EventApplicationStaked is emitted when an application is staked or up-staked.
message EventApplicationStaked {
  poktroll.application.Application application = 1 [(gogoproto.jsontag) = "application"];
}

// EventRedelegation is an event emitted whenever an application changes its
// delegatee gateways on chain. This is in response to both a DelegateToGateway
// and UndelegateFromGateway message.
//
// TODO_CONSIDERATION: Emitting the updated application would be more consistent with other events.
message EventRedelegation {
  string app_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the application.
  string gateway_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the gateway the application has changed their delegation of.
}

// EventTransferBegin is emitted whenever an application begins a transfer. It
// includes the source application state immediately after the transfer began.
message EventTransferBegin {
  string source_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string destination_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  poktroll.application.Application source_application = 3;
}

// EventTransferEnd is emitted whenever an application transfer is completed. It
// includes the destination application state at the time the transfer completed.
// Either EventTransferEnd or EventTransferError will be emitted corresponding to
// any given EventTransferBegin event.
message EventTransferEnd {
  string source_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string destination_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  poktroll.application.Application destination_application = 3;
}

// EventTransferError is emitted whenever an application transfer fails. It
// includes the source application state at the time the transfer failed and
// the error message.
// Either EventTransferEnd or EventTransferError will be emitted corresponding to
// any given EventTransferBegin event.
message EventTransferError {
  string source_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string destination_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  poktroll.application.Application source_application = 3;
  string error = 4;
}

// EventApplicationUnbondingBegin is emitted when an application unstake message
// is committed, indicating that an application has begun unbonding.
message EventApplicationUnbondingBegin {
  poktroll.application.Application application = 1 [(gogoproto.jsontag) = "application"];
}

// EventApplicationUnbondingEnd is emitted when an application has completed
// unbonding. The unbonding period is determined by the shared param,
// application_unbonding_period_sessions.
message EventApplicationUnbondingEnd {
  poktroll.application.Application application = 1 [(gogoproto.jsontag) = "application"];
}

// EventApplicationUnbondingCanceled is emitted when an application which was unbonding
// successfully (re-)stakes before the unbonding period has elapsed. An EventApplicationStaked
// event will also be emmitted immediatly after this event.
message EventApplicationUnbondingCanceled {
  poktroll.application.Application application = 1 [(gogoproto.jsontag) = "application"];
}

// EventApplicationUnbondedBelowMinStake is emitted when an application has been
// unbonded during settlement because their post-settlement stake dropped below
// the minimum application stake requirement.
message EventApplicationUnbondedBelowMinStake {
  poktroll.application.Application application = 1 [(gogoproto.jsontag) = "application"];
}
