syntax = "proto3";

package poktroll.migration;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "poktroll/migration/morse_onchain.proto";
import "poktroll/migration/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams                 (MsgUpdateParams                ) returns (MsgUpdateParamsResponse                );
  rpc ImportMorseClaimableAccounts (MsgImportMorseClaimableAccounts) returns (MsgImportMorseClaimableAccountsResponse);
  rpc ClaimMorseAccount            (MsgClaimMorseAccount           ) returns (MsgClaimMorseAccountResponse           );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                            "authority";
  option           (amino.name) = "poktroll/x/migration/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgImportMorseClaimableAccounts is used to create the on-chain MorseClaimableAccounts ONLY ONCE (per network / re-genesis).
message MsgImportMorseClaimableAccounts {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the account state derived from the Morse state export and the `poktrolld migrate collect-morse-accounts` command.
  MorseAccountState morse_account_state = 2 [(gogoproto.jsontag) = "morse_account_state", (gogoproto.nullable) = false];

  // expected sha256 hash of the morse_account_state. If this hash does not match the on-chain
  // computation, the transaction will fail. Social consensus regarding the correctness of
  // morse_account_state should have been achieved off-chain and can be verified on-chain by
  // comparing this hash with that of a locally derived Morse state export:
  // E.g., `poktrolld migrate collect-morse-accounts $<(pocket util export-genesis-for-reset)`.
  // See: `pocket util export-genesis-for-migration --help` & `poktrolld migrate collect-morse-accounts --help`
  // for more details.
  bytes morse_account_state_hash = 3 [(gogoproto.jsontag) = "morse_account_state_hash"];
}

message MsgImportMorseClaimableAccountsResponse {

  // On-chain computed sha256 hash of the morse_account_state provided in the corresponding MsgCreateMorseAccountState.
  bytes state_hash = 1 [(gogoproto.jsontag) = "state_hash"];

  // Number of accounts (EOAs) which were collected from the Morse state export, which may be claimed.
  // NOTE: Application and supplier actor stakes are consolidated into their corresponding account balances.
  uint64 num_accounts = 2 [(gogoproto.jsontag) = "num_accounts"];
}

message MsgClaimMorseAccount {
  option (cosmos.msg.v1.signer) = "shannonDestAddress";
  string shannonDestAddress = 1;
  string morseSrcAddress    = 2;
  string morseSignature     = 3;
}

message MsgClaimMorseAccountResponse {
  string                   morseSrcAddress = 1;
  cosmos.base.v1beta1.Coin claimedBalance  = 2 [(gogoproto.nullable) = false];
  int32                    claimedAtHeight = 3;
}

