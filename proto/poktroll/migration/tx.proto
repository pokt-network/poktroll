syntax = "proto3";

package poktroll.migration;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "poktroll/migration/params.proto";
import "poktroll/migration/types.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams     (MsgUpdateParams    ) returns (MsgUpdateParamsResponse    );
  rpc UploadMorseState (MsgUploadMorseState) returns (MsgUploadMorseStateResponse);
  rpc ClaimMorsePokt   (MsgClaimMorsePokt  ) returns (MsgClaimMorsePoktResponse  );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                            "authority";
  option           (amino.name) = "poktroll/x/migration/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgUploadMorseState commits the "Morse migration" state to the Shannon state
// for subsequent migration operations on Shannon.
message MsgUploadMorseState {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  MorseAccountState state = 2 [(gogoproto.nullable) = false];
}

message MsgUploadMorseStateResponse {
  string state_hash = 1 [(gogoproto.jsontag) = "state_hash"];
  uint64 num_accounts = 2 [(gogoproto.jsontag) = "num_accounts"];
}

// MsgClaimMorsePokt is used to self-claim owned POKT tokens from the "Morse migration" state.
message MsgClaimMorsePokt {
  option (cosmos.msg.v1.signer) = "shannon_dest_address";

  string shannon_dest_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string morse_src_address    = 2;
  bytes morse_signature     = 3;
}

message MsgClaimMorsePoktResponse {
  cosmos.base.v1beta1.Coin balance = 1;
}

