syntax = "proto3";

// Types in this file are ONLY present to facilitate the verifiability of the
// migration state from Morse to Shannon.
//
// These types are used by the migration subcommand  to transform
// the Morse state export into the Shannon state import.
// Ref: `poktrolld migrate collect-morse-accounts ...`
//
// They ARE NOT persisted on-chain at any point.package poktroll.migration;
package poktroll.migration;

import "gogoproto/gogo.proto";
import "poktroll/migration/types.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

// MorseStateExport is the data structure that is serialized and output when running
// `pocket util export-genesis-for-reset`.
// See: https://editor.swagger.io/?url=https://raw.githubusercontent.com/pokt-network/pocket-core/staging/doc/specs/rpc-spec.yaml#operations-query-post_query_state
message MorseStateExport {
  // app_hash is the Morse tendermint state hash.
  string app_hash = 1 [(gogoproto.jsontag) = "app_hash"];
  // app_state is the entire Morse tendermint application state.
  MorseAppState app_state = 2 [(gogoproto.jsontag) = "app_state"];
}

// MorseAppState is the tendermint application state for the Morse tendermint
// application; not to be confused with the pokt protocol actor.
message MorseAppState {
  MorseApplications application = 1 [(gogoproto.jsontag) = "application"];
  MorseAuth auth = 2 [(gogoproto.jsontag) = "auth"];
  MorsePos pos = 3 [(gogoproto.jsontag) = "pos"];
}

// A wrapper around the list of MorseApplications, necessary in order to conform to the Morse genesis structure.
message MorseApplications {
  repeated MorseApplication applications = 1 [(gogoproto.jsontag) = "applications"];
}

// A wrapper around a list of Morse accounts.
message MorseAuth {
  repeated MorseAuthAccount accounts = 1 [(gogoproto.jsontag) = "accounts"];
}

// A wrapper around Morse account information, necessary in order to to confirm to the Morse genesis
// structure. Morse originally serialized accounts as pb.Any types in order to support multiple
// account types. For the purposes of the Morse -> Shannon migration, we're only concerned with
// externally owned accounts (as opposed to module accounts). As a result, we're simplifying its
// representation in Shannon by avoiding usage of pb.Any. It is necessary in order too conform to
// the Morse genesis structure.
message MorseAuthAccount {
  string Type = 1 [(gogoproto.jsontag) = "type"];
  MorseAccount Value = 2 [(gogoproto.jsontag) = "value"];
}

// A wrapper around the list of Morse suppliers (aka "validators", "nodes", of "servicers").
// It is necessary to conform to the Morse genesis structure.
message MorsePos {
  repeated MorseValidator validators = 1 [(gogoproto.jsontag) = "validators"];
}

// MorseApplication is a subset of the Morse ProtoApplication type.
// It encapsulates the minimum information required to import Morse applications.
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/apps/apps.proto#L16
message MorseApplication {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  // Address is a hex-encoded string representation of the address corresponding
  // to a Morse application's ed25519 public key.
  bytes address = 1 [(gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address", (gogoproto.jsontag) = "address", (gogoproto.moretags) = "yaml:\"address\""];
  // PublicKey is the binary representation of a Morse application's ed25519 public key.
  bytes public_key = 2 [(gogoproto.jsontag) = "public_key", (gogoproto.moretags) = "yaml:\"public_key\""];
  bool   jailed = 3[(gogoproto.jsontag) = "jailed", (gogoproto.moretags) = "yaml:\"jailed\""];
  int32  status = 4 [(gogoproto.jsontag) = "status", (gogoproto.moretags) = "yaml:\"status\""];
  string staked_tokens = 6 [(gogoproto.jsontag) = "tokens"];
}

// MorseValidator is a subset of the Morse ProtoValidator type.
// It encapsulates the minimum information required to import Morse suppliers (aka "servicers" or "validators").
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/pos/types.proto#L16
message MorseValidator {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (gogoproto.goproto_getters) = false;

  bytes Address = 1 [(gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address", (gogoproto.moretags) = "yaml:\"address\"", (gogoproto.jsontag) = "address"];
  bytes PublicKey = 2 [(gogoproto.moretags) = "yaml:\"public_key\"", (gogoproto.jsontag) = "public_key"];
  bool jailed = 3 [(gogoproto.jsontag) = "jailed"];
  int32 status = 4 [(gogoproto.jsontag) = "status"];
  string StakedTokens = 7 [(gogoproto.jsontag) = "tokens"];
}
