syntax = "proto3";

// Types in this file are ONLY present to facilitate the verifiability of the
// migration state from Morse to Shannon. These types are used by the migration
// subcommand (e.g. `poktrolld migrate collect-morse-accounts ...) to transform
// the Morse state export into the Shannon state import. They ARE NOT persisted
// on-chain at any point.
package poktroll.migration;

import "gogoproto/gogo.proto";
import "poktroll/migration/types.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

message MorseStateExport {
  string app_hash = 1 [(gogoproto.jsontag) = "app_hash"];
  MorseAppState app_state = 2 [(gogoproto.jsontag) = "app_state"];
}

message MorseAppState {
  MorseApplications application = 1 [(gogoproto.jsontag) = "application"];
  MorseAuth auth = 2 [(gogoproto.jsontag) = "auth"];
  MorsePos pos = 3 [(gogoproto.jsontag) = "pos"];
}

message MorseApplications {
  repeated MorseApplication applications = 1 [(gogoproto.jsontag) = "applications"];
}

message MorseAuthAccount {
  string Type = 1 [(gogoproto.jsontag) = "type"];
  MorseAccount Value = 2 [(gogoproto.jsontag) = "value"];
}

message MorseAuth {
  repeated MorseAuthAccount accounts = 1 [(gogoproto.jsontag) = "accounts"];
}

message MorsePos {
  repeated MorseValidator validators = 1 [(gogoproto.jsontag) = "validators"];
}

// MorseApplication is a subset of the Morse ProtoApplication type. It encapsulates
// the minimum information required to import Morse applications.
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/apps/apps.proto#L16
message MorseApplication {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  bytes address = 1 [
    (gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address",
    (gogoproto.jsontag) = "address",
    (gogoproto.moretags) = "yaml:\"address\""
  ];
  bytes public_key = 2 [
    (gogoproto.jsontag) = "public_key",
    (gogoproto.moretags) = "yaml:\"public_key\""];
  bool   jailed = 3[
    (gogoproto.jsontag) = "jailed",
    (gogoproto.moretags) = "yaml:\"jailed\""];
  int32  status = 4 [
    (gogoproto.jsontag) = "status",
    (gogoproto.moretags) = "yaml:\"status\""];
  string staked_tokens = 6;
}

// MorseValidator is a subset of the Morse ProtoValidator type. It encapsulates the
// minimum information required to import Morse suppliers (aka "servicers" or "validators").
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/pos/types.proto#L16
message MorseValidator {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (gogoproto.goproto_getters) = false;

  bytes Address = 1 [(gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address", (gogoproto.moretags) = "yaml:\"address\"", (gogoproto.jsontag) = "address"];
  bytes PublicKey = 2 [(gogoproto.moretags) = "yaml:\"public_key\"", (gogoproto.jsontag) = "public_key"];
  bool jailed = 3 [(gogoproto.jsontag) = "jailed"];
  int32 status = 4 [(gogoproto.jsontag) = "status"];
  string StakedTokens = 7 [(gogoproto.jsontag) = "tokens"];
}
