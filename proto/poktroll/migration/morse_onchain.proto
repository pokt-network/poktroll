syntax = "proto3";

package poktroll.migration;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

// MorseAccountState is the onchain representation of all account state to be migrated from Morse.
// It is NEVER persisted onchain but is a dependency of the MsgImportMorseClaimableAccount handler.
// It's main purpose is to expose the #GetHash() method for verifying the integrity of all MorseClaimableAccounts.
message MorseAccountState {
  repeated MorseClaimableAccount accounts = 2 [(gogoproto.jsontag) = "accounts", (gogoproto.moretags) = "yaml:\"accounts\""];
}

// MorseClaimableAccount is the onchain (persisted) representation of a Morse
// account which is claimable as part of the Morse -> Shannon migration.
// They are intended to be created during MorseAccountState import (see: MsgImportMorseClaimableAccount).
message MorseClaimableAccount {
  // A hex-encoded representation of the address corresponding to a Morse application's ed25519 public key.
  bytes address = 1 [(gogoproto.jsontag) = "address", (gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address"];

  // The ed25519 public key of the account.
  bytes public_key = 2 [(gogoproto.casttype) = "crypto/ed25519.PublicKey"];

  // The total amount of uPOKT owned by the account; this is a sum of the balance and any actor stakes.
  // NB: The default stake/balance proportion is derived from Morse query response(s) at the time of claiming.
  cosmos.base.v1beta1.Coin total_tokens = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "coins"];

  int64 claimed_at_height = 4;

}

