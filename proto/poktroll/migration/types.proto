syntax = "proto3";

package poktroll.migration;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

// MorseAccountState is the on-chain representation of the imported account state from Morse.
message MorseAccountState {
  repeated MorseAccount accounts = 1 [(gogoproto.jsontag) = "accounts"];
}

// MorseAccount is an analog of the Morse ProtoBaseAccount type. It encapsulates
// the minimum information required to import accounts.
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/auth/auth.proto#L14.
message MorseAccount {
  option (gogoproto.messagename) = true;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;
  option (cosmos_proto.implements_interface) = "Account";

  bytes address = 1 [(gogoproto.jsontag) = "address", (gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address"];
  MorsePublicKey pub_key = 2 [(gogoproto.jsontag) = "public_key", (gogoproto.moretags) = "yaml:\"public_key\""];
  repeated cosmos.base.v1beta1.Coin coins = 3 [(gogoproto.nullable) = false];
}

// MorsePublicKey is required to conform to the encoding of the Morse state export.
// NB: All Morse account public keys will be ed25519 keys by definition.
message MorsePublicKey {
  bytes value = 2 [(gogoproto.casttype) = "crypto/ed25519.PublicKey"];
}

// MorseApplication is a subset of the Morse ProtoApplication type. It encapsulates
// the minimum information required to import Morse applications.
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/apps/apps.proto#L16
message MorseApplication {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  bytes address = 1 [
    (gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address",
    (gogoproto.jsontag) = "address",
    (gogoproto.moretags) = "yaml:\"address\""
  ];
  bytes public_key = 2 [
    (gogoproto.jsontag) = "public_key",
    (gogoproto.moretags) = "yaml:\"public_key\""];
  bool   jailed = 3[
    (gogoproto.jsontag) = "jailed",
    (gogoproto.moretags) = "yaml:\"jailed\""];
  int32  status = 4 [
    (gogoproto.jsontag) = "status",
    (gogoproto.moretags) = "yaml:\"status\""];
  string staked_tokens = 6;
}

// MorseValidator is a subset of the Morse ProtoValidator type. It encapsulates the
// minimum information required to import Morse suppliers (aka "servicers" or "validators").
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/pos/types.proto#L16
message MorseValidator {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (gogoproto.goproto_getters) = false;

  bytes Address = 1 [(gogoproto.casttype) = "github.com/cometbft/cometbft/crypto.Address", (gogoproto.moretags) = "yaml:\"address\"", (gogoproto.jsontag) = "address"];
  bytes PublicKey = 2 [(gogoproto.moretags) = "yaml:\"public_key\"", (gogoproto.jsontag) = "public_key"];
  bool jailed = 3 [(gogoproto.jsontag) = "jailed"];
  int32 status = 4 [(gogoproto.jsontag) = "status"];
  string StakedTokens = 7 [(gogoproto.jsontag) = "tokens"];
}
