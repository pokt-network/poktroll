syntax = "proto3";
package poktroll.tokenomics;

option go_package = "github.com/pokt-network/poktroll/x/tokenomics/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Params defines the parameters for the tokenomics module.
message Params {
  option (amino.name) = "poktroll/x/tokenomics/Params";
  option (gogoproto.equal) = true;

  // mint_allocation_dao is the percentage of the minted tokens which are sent
  // to the DAO reward address during claim settlement.
  double mint_allocation_dao = 1 [(gogoproto.jsontag) = "mint_allocation_dao", (gogoproto.moretags) = "yaml:\"mint_allocation_dao\""];
  // mint_allocation_proposer is the percentage of the minted tokens which are sent
  // to the block proposer account address during claim settlement.
  double mint_allocation_proposer = 2 [(gogoproto.jsontag) = "mint_allocation_proposer", (gogoproto.moretags) = "yaml:\"mint_allocation_proposer\""];

  // IMPORTANT: Make sure to update all related files if you're modifying or adding a new parameter.
  // Try the following grep to find all related places: `grep -r compute_units_to_tokens_multiplier`
  // TODO_IMPROVE: Look into an opportunity to use an enum to avoid using strings throughout the codebase.

  // TODO_ADD: Some parameters we should consider adding next:
  //   - Service.computeUnitsToTokensMultiplierMap
  //   - Application.MaxuPOKTPerRelay
  //   - Application.MinuPOKTPerRelay
  //   - Suppler.MaxuPOKTPerRelay
  //   - Suppler.MinuPOKTPerRelay
  //   - RevDistr.PercentageToSupploer
  //   - RevDistr.PercentageToDAO
  //   - RevDistr.PercentageToPNF
  //   - RevDistr.PercentageToDelegators
}
