syntax = "proto3";
package poktroll.supplier;

option go_package = "github.com/pokt-network/poktroll/x/supplier/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/supplier/params.proto";
import "poktroll/shared/supplier.proto";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/supplier/params";

  }

  // Queries a list of Supplier items.
  rpc Supplier    (QueryGetSupplierRequest) returns (QueryGetSupplierResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/supplier/supplier/{operator_address}";

  }
  rpc AllSuppliers (QueryAllSuppliersRequest) returns (QueryAllSuppliersResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/supplier/supplier";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetSupplierRequest {
  string operator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetSupplierResponse {
  poktroll.shared.Supplier supplier = 1 [(gogoproto.nullable) = false];
}

message QueryAllSuppliersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSuppliersResponse {
  repeated poktroll.shared.Supplier supplier = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

