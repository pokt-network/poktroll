syntax = "proto3";
package poktroll.supplier;

option go_package = "github.com/pokt-network/poktroll/x/supplier/types";

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/supplier/params.proto";
import "poktroll/shared/service.proto";


// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams    (MsgUpdateParams   ) returns (MsgUpdateParamsResponse   );
  rpc StakeSupplier   (MsgStakeSupplier  ) returns (MsgStakeSupplierResponse  );
  rpc UnstakeSupplier (MsgUnstakeSupplier) returns (MsgUnstakeSupplierResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "poktroll/x/supplier/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // TODO_IMPROVE(#322): The requirement to provide all params is adopted from the
  // latest Cosmos SDK version. We should look into either improving this ourselves
  // or seeing if it is on their roadmap.

  // params defines the x/supplier parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgStakeSupplier {
  option (cosmos.msg.v1.signer) = "sender"; // https://docs.cosmos.network/main/build/building-modules/messages-and-queries

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the message sender (i.e. owner or operator) using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding
  string owner_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the owner (i.e. custodial, staker) using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding
  string address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the operator (i.e. provider, non-custodial) using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding
  cosmos.base.v1beta1.Coin stake = 4; // The total amount of uPOKT the supplier has staked. Must be â‰¥ to the current amount that the supplier has staked (if any)
  repeated poktroll.shared.SupplierServiceConfig services = 5; // The list of services this supplier is staked to provide service for
}

message MsgStakeSupplierResponse {}

message MsgUnstakeSupplier {
  option (cosmos.msg.v1.signer) = "owner_address";
  // The address of the owner (i.e. staker, custodial) that owns the funds for staking.
  // By default, this address is the one that receives all the rewards unless owtherwise specified.
  // The owner can initially stake the supplier and unstake it.
  // All other configurations are managed by the operator.
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address
  // The operator address of the supplier that operates it.
  // The operator address can update the supplier's configurations excluding the owner
  // and operator addresses which do not change over the supplier's lifespan.
  // TODO(red-0ne): Rename this to `operator_address` include all downstream
  // variables, comments, docs, tests, etc...
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address
}

message MsgUnstakeSupplierResponse {}

