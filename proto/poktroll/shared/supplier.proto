syntax = "proto3";
package poktroll.shared;

option go_package = "github.com/pokt-network/poktroll/x/shared/types";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/shared/service.proto";

// Supplier is the type defining the actor in Pocket Network that provides RPC services.
message Supplier {
  // The Bech32 address of the owner (i.e. custodial, staker) using cosmos'
  // ScalarDescriptor to ensure deterministic encoding.
  // This is the address that owns the funds for staking and is the one that
  // receives the rewards.
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The Bech32 address of the operator (i.e. provider, non-custodial) using cosmos'
  // ScalarDescriptor to ensure deterministic encoding.
  // The operator address can update all the supplier's configurations, excluding
  // the owner_address.
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin stake = 3; // The total amount of uPOKT the supplier has staked
  repeated SupplierServiceConfig services = 4; // The service configs this supplier can support
  // The session end height at which an actively unbonding supplier unbonds its stake.
  // If the supplier did not unstake, this value will be 0.
  uint64 unstake_session_end_height = 5;
}
