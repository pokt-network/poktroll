syntax = "proto3";
package poktroll.shared;

option go_package = "github.com/pokt-network/poktroll/x/shared/types";
option (gogoproto.stable_marshaler_all) = true;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/shared/service.proto";
import "gogoproto/gogo.proto";

// Supplier represents an actor in Pocket Network that provides RPC services
message Supplier {
  // Owner address that controls the staked funds and receives rewards by default
  // Cannot be updated by the operator
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Operator address managing the offchain server
  // Immutable for supplier's lifespan - requires unstake/re-stake to change.
  // Can update supplier configs except for owner address.
  string operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Total amount of staked uPOKT
  cosmos.base.v1beta1.Coin stake = 3;

  // List of service configurations supported by this supplier
  repeated SupplierServiceConfig services = 4;

  // Session end height when supplier initiated unstaking (0 if not unstaking)
  uint64 unstake_session_end_height = 5;

  // Mapping of serviceIds to their activation heights
  // - Key: serviceId
  // - Value: Session start height when supplier becomes active for the service
  map<string, uint64> services_activation_heights_map = 6;
}
