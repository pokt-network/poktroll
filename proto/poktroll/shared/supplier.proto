syntax = "proto3";
package poktroll.shared;

option go_package = "github.com/pokt-network/poktroll/x/shared/types";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

import "poktroll/shared/service.proto";

// Supplier is the type defining the actor in Pocket Network that provides RPC services.
message Supplier {
  // The address of the owner (i.e. staker, custodial) that owns the funds for staking.
  // By default, this address is the one that receives all the rewards unless owtherwise specified.
  // The owner can initially stake the supplier and unstake it.
  // All other configurations are managed by the operator.
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Bech32 cosmos address
  // The operator address of the supplier that operates it.
  // The operator address can update the supplier's configurations excluding the owner
  // and operator addresses which do not change over the supplier's lifespan.
  // TODO(red-0ne): Rename this to `operator_address` include all downstream
  // variables, comments, docs, tests, etc...
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Bech32 cosmos address
  cosmos.base.v1beta1.Coin stake = 3; // The total amount of uPOKT the supplier has staked
  repeated SupplierServiceConfig services = 4; // The service configs this supplier can support
  // The session end height at which an actively unbonding supplier unbonds its stake.
  // If the supplier did not unstake, this value will be 0.
  uint64 unstake_session_end_height = 5;
  // services_activation_heights_map is a map of serviceIds to the height at
  // which the staked supplier will become active for that service.
  // Activation heights are session start heights.
  map<string, uint64> services_activation_heights_map = 6;
}
