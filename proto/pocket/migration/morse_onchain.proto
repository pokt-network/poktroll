syntax = "proto3";

package pocket.migration;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/pokt-network/poktroll/x/migration/types";
option (gogoproto.stable_marshaler_all) = true;

// MorseAccountState is the onchain representation of all account state to be migrated from Morse.
// It is NEVER persisted onchain but is a dependency of the MsgImportMorseClaimableAccount handler.
// It's main purpose is to expose the #GetHash() method for verifying the integrity of all MorseClaimableAccounts.
message MorseAccountState {
  repeated MorseClaimableAccount accounts = 2 [(gogoproto.jsontag) = "accounts", (gogoproto.moretags) = "yaml:\"accounts\""];
}

// MorseClaimableAccount is the onchain (persisted) representation of a Morse
// account which is claimable as part of the Morse -> Shannon migration.
// They are intended to be created during MorseAccountState import (see: MsgImportMorseClaimableAccount).
// It is created ONLY ONCE and NEVER deleted (per morse_src_address per network / re-genesis).
// It is updated ONLY ONCE, when it is claimed (per morse_src_address per network / re-genesis).
//
// The MorseClaimableAccounts onchain list can be thought of as a join table between Morse accounts and
// Shannon accounts, where all Morse accounts (at the time of import to Shannon) are used to pre-populate
// the join records.
// See this mermaid entity relationship diagram for a conceptual representation:
// https://mermaid.live/edit#pako:eNqdkl9rgzAUxb9KuE8bWNHa-ievG3spg8HehlBSc6duJilJhHXqd1_Udg8r9mEhiLkef-fccDsoFEeggPqxZqVmIpfELaG0wT0rCtVKa0g3V8dlrK5lSRjnGo0hL7v505DL-cVUTEol__Xv7Fo0rBbs0Nz0n6VGF_sL7Wl3Jbpk4Wjsle6P669X369Wfb-chZIcDtgoWRpiVQ4LbY8Y1d3GVMwQweSJ3NU--mRSIb8fmQvRfN8xr7xGlpLo4sy4D1VLYiut2rJaTJADeCBQC1ZzNwDTFedgKxSYw0jkTH-OUQanY61VrydZALW6RQ_aI2cWzyMD9J01xlWPTL4pJS4idwTawRfQdRD5UZqukyCOk3Trnh6cgKaRnwaB2_Em226TLBw8-J4AgZ-4-jZK4iROw3Adph4gr63Sz_O8TmPrwdTir3-px1bOB42So34YewWaZZvhB64o-Dg
message MorseClaimableAccount {
  // The bech32-encoded address of the Shannon account to which the claimed balance will be minted.
  // This field is intended to remain empty until the account has been claimed.
  string shannon_dest_address = 1 [(gogoproto.nullable) = true, (cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.jsontag) = "shannon_dest_address"];

  // The hex-encoded address of the Morse account whose balance will be claimed.
  string morse_src_address = 2 [(gogoproto.jsontag) = "morse_src_address"];

  // DEV_NOTE: This field was momentarily used to hold the Morse public key; however, an
  // optimization eliminates the need for this. Reserved for backwards compatibility.
  //
  // The ed25519 public key of the account.
  // bytes public_key = 4 [(gogoproto.casttype) = "crypto/ed25519.PublicKey"];
  reserved 4;

  // The unstaked upokt tokens (i.e. account balance) available for claiming.
  cosmos.base.v1beta1.Coin unstaked_balance = 5 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "unstaked_balance"];

  // The staked tokens associated with a supplier actor which corresponds to this account address.
  // DEV_NOTE: A few contextual notes related to Morse:
  // - A Supplier is called a Servicer or Node (not a full node) in Morse
  // - All Validators are Servicers, not all servicers are Validators
  // - Automatically, the top 100 staked Servicers are validator
  // - This only accounts for servicer stake balance transition
  // TODO_MAINNET(@Olshansk): Develop a strategy for bootstrapping validators in Shannon by working with the cosmos ecosystem
  cosmos.base.v1beta1.Coin supplier_stake = 6 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "supplier_stake"];

  // The staked tokens associated with an application actor which corresponds to this account address.
  cosmos.base.v1beta1.Coin application_stake = 7 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "application_stake"];

  // The Shannon height at which the account was claimed.
  // This field is intended to remain empty until the account has been claimed.
  int64 claimed_at_height = 8 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "claimed_at_height", (gogoproto.moretags) = "yaml:\"claimed_at_height\""];
}

