syntax = "proto3";
package pocket.service;

option go_package = "pocket/x/service/types";

message Relay {

}



syntax = "proto3";

package core;

option go_package = "github.com/pokt-network/pocket/shared/core/types";

message Relay {
    RelayMeta meta = 1;
    // Every different chain/service may have its own custom payload (e.g. HTTP, JSON, GRPC, non-chain services)
    oneof relay_payload {
        JSONRPCPayload json_rpc_payload = 2;
        RESTPayload rest_payload = 3;
        // DISCUSS: design and content of other relay types
        // GRPCPayload grpc_payload = 3;
        // GraphQLPayload graphql_payload = 4;
        // WebSocketsPayload websockets_payload = 5;
    }
}

// INCOMPLETE: add REST relay payload fields
message RESTPayload {
    string contents = 1;
    string http_path = 2;
    RESTRequestType request_type = 3;
}

enum RESTRequestType {
	RESTRequestTypeGET = 0;
	RESTRequestTypePUT = 1;
	RESTRequestTypePOST = 2;
	RESTRequestTypeDELETE = 3;
}

message JSONRPCPayload {
    // JSONRPC version 2 expected a field named "id".
    // See the JSONRPC spec in the following link for more details:
    //   https://www.jsonrpc.org/specification#request_object
    bytes id = 1;
    // JSONRPC version 2 expects a field named "jsonrpc" with a value of "2.0".
    // See the JSONRPC spec in the following link for more details:
    //   https://www.jsonrpc.org/specification#request_object
    string json_rpc = 2;
    string method = 3;
    // The parameters field can be empty, an array or a structure. It is on the server to decide which one
    // has been sent to it and whether the supplied value is valid.
    // See the JSONRPC spec in the following link for more details:
    //   https://www.jsonrpc.org/specification#parameter_structures
    bytes parameters = 4;
    map<string, string> headers = 5;
}

message RelayMeta {
    int64 block_height = 1;
    string servicer_public_key = 2;
    // TODO(M5): Consider renaming `relay_chain` to `rpc_service` or something similar
    // TODO: Make Chain/Service identifier type consistent in Session and Meta: use Identifiable for Chain/Service in Session (or a string here to match the session)
    Identifiable relay_chain = 3;
    Identifiable geo_zone = 4;
    string signature = 5;  // TECHDEBT: Consolidate with `Signature` proto used elsewhere in the future
    string application_address = 6;
}

message RelayResponse {
    string payload = 1;
    string servicer_signature = 2;
}

message AAT {
    string version = 1;
    string application_public_key = 2;
    string client_public_key = 3;
    string application_signature = 4;
}

message Identifiable {
    string id = 1;
    string name = 2;
}


// RelayReqRes contains a relay request and its response, used for persistence of relay service evidence
message RelayReqRes {
    Relay relay = 1;
    RelayResponse response = 2;
}




syntax = "proto3";

package poktroll.servicer;

option go_package = "poktroll/x/servicer/types";

// TODO_REFACTOR: See the commened out structure at the bottom of this file for what we should use in prod.
message Relay {
    RelayRequest req = 1;
    RelayResponse res = 2;
}

// Representation of Go's http.Request (simplified na√Øve implementation)
message RelayRequest {
    map<string, string> headers = 1;
    string method = 2;
    string url = 3;
    bytes payload = 4;
    string session_id = 5;
    string application_address = 6;
    bytes application_signature = 7;
}

message RelayResponse {
    map<string, string> headers = 1;
    int32 status_code = 2;
    string err = 3;
    bytes payload = 4;
    string session_id = 5;
    string servicer_address = 6;
    bytes servicer_signature = 7;
}



message RelayProof {
	option (gogoproto.goproto_getters) = false;

	string requestHash = 1 [(gogoproto.jsontag) = "request_hash"];
	int64 entropy = 2 [(gogoproto.jsontag) = "entropy"];
	int64 sessionBlockHeight = 3 [(gogoproto.jsontag) = "session_block_height"];
	string servicerPubKey = 4 [(gogoproto.jsontag) = "servicer_pub_key"];
	string blockchain = 5 [(gogoproto.jsontag) = "blockchain"];
	AAT token = 6 [(gogoproto.jsontag) = "aat", (gogoproto.nullable) = false];
	string signature = 7 [(gogoproto.jsontag) = "signature"];
}

message ChallengeProofInvalidData {
	option (gogoproto.goproto_getters) = false;

	repeated RelayResponse majorityResponses = 1 [(gogoproto.jsontag) = "majority_responses", (gogoproto.nullable) = false];
	RelayResponse minorityResponse = 2 [(gogoproto.jsontag) = "minority_response", (gogoproto.nullable) = false];
	bytes reporterAddress = 3 [(gogoproto.jsontag) = "reporters_address", (gogoproto.casttype) = "github.com/pokt-network/pocket-core/types.Address"];
}

message RelayResponse {
	option (gogoproto.goproto_getters) = false;

	string signature = 1 [(gogoproto.jsontag) = "signature"];
	string response = 2 [(gogoproto.jsontag) = "payload"];
	RelayProof proof = 3 [(gogoproto.jsontag) = "proof", (gogoproto.nullable) = false];
}


// message Relay {
//     RelayMeta meta = 1;
//     // Every different chain/service may have its own custom payload (e.g. HTTP, JSON, GRPC, non-chain services)
//     oneof relay_payload {
//         JSONRPCPayload json_rpc_payload = 2;
//         RESTPayload rest_payload = 3;
//         // DISCUSS: design and content of other relay types
//         // GRPCPayload grpc_payload = 3;
//         // GraphQLPayload graphql_payload = 4;
//         // WebSocketsPayload websockets_payload = 5;
//     }
// }

// // INCOMPLETE: add REST relay payload fields
// message RESTPayload {
//     string contents = 1;
//     string http_path = 2;
//     RESTRequestType request_type = 3;
// }

// enum RESTRequestType {
// 	RESTRequestTypeGET = 0;
// 	RESTRequestTypePUT = 1;
// 	RESTRequestTypePOST = 2;
// 	RESTRequestTypeDELETE = 3;
// }

// message JSONRPCPayload {
//     // JSONRPC version 2 expected a field named "id".
//     // See the JSONRPC spec in the following link for more details:
//     //   https://www.jsonrpc.org/specification#request_object
//     bytes id = 1;
//     // JSONRPC version 2 expects a field named "jsonrpc" with a value of "2.0".
//     // See the JSONRPC spec in the following link for more details:
//     //   https://www.jsonrpc.org/specification#request_object
//     string json_rpc = 2;
//     string method = 3;
//     // The parameters field can be empty, an array or a structure. It is on the server to decide which one
//     // has been sent to it and whether the supplied value is valid.
//     // See the JSONRPC spec in the following link for more details:
//     //   https://www.jsonrpc.org/specification#parameter_structures
//     bytes parameters = 4;
//     map<string, string> headers = 5;
// }

// message RelayMeta {
//     int64 block_height = 1;
//     string servicer_public_key = 2;
//     // TODO(M5): Consider renaming `relay_chain` to `rpc_service` or something similar
//     // TODO: Make Chain/Service identifier type consistent in Session and Meta: use Identifiable for Chain/Service in Session (or a string here to match the session)
//     Identifiable relay_chain = 3;
//     Identifiable geo_zone = 4;
//     string signature = 5;  // TECHDEBT: Consolidate with `Signature` proto used elsewhere in the future
//     string application_address = 6;
// }
