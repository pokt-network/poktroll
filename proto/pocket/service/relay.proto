syntax = "proto3";
package pocket.service;

option go_package = "pocket/x/service/types";

import "cosmos_proto/cosmos.proto";
import "pocket/service/service.proto";
import "pocket/application/application.proto";
import "pocket/supplier/supplier.proto";

// Relay contains both the RelayRequest (signed by the Application) and the RelayResponse (signed by the Supplier).
// The serialized tuple is inserted into the SMST leaves as values in the Claim/Proof lifecycle.
message Relay {
    RelayRequest req = 1;
    RelayResponse res = 2;
}

// RelayRequestMetadata contains the metadata for a RelayRequest.
message RelayRequestMetadata {
    session.SessionHeader session_header = 1; // Session header associated with the relay.
    bytes application_signature = 2; // Signature of the application on the request.
}

// RelayRequest holds the request details for a relay.
message RelayRequest {
    RelayRequestMetadata meta = 1;
    oneof payload {
        JSONRPCRequestPayload json_rpc_payload = 2;
        RESTRequestPayload rest_payload = 3;
        // Future possible relay types:
        // WebSocketsRequestPayload websockets_payload = 4;
        // GRPCRequestPayload grpc_payload = 5;
        // GraphQLRequestPayload graphql_payload = 6;
    }
}

// JSONRPCRequestPayload contains the payload for a JSON-RPC request.
message JSONRPCRequestPayload {
    bytes id = 1; // Expected "id" field for JSON-RPC version 2.
    string jsonrpc = 2; // Expected "jsonrpc" field with a value of "2.0" for JSON-RPC version 2.
    string method = 3; // Method being invoked on the server.
    map<string, string> parameters = 4; // Parameters for the method. Can be empty, an array, or a structure.
    bytes data = 5; // Additional data if needed.
}

// RESTRequestType represents the type of REST request.
enum RESTRequestType {
    REST_REQUEST_TYPE_UNKNOWN = 0; // Default uninitialized value.
    REST_REQUEST_TYPE_GET = 1;
    REST_REQUEST_TYPE_PUT = 2;
    REST_REQUEST_TYPE_POST = 3;
    REST_REQUEST_TYPE_DELETE = 4;
}

// RESTRequestPayload contains the payload and metadata for a REST request.
message RESTRequestPayload {
    RESTRequestType request_type = 1;
    string http_path = 2; // Path for the REST endpoint.
    string contents = 3; // Request contents.
    map<string, string> headers = 4; // Request headers.
}

// RelayResponse contains the response details for a RelayRequest.
message RelayResponse {
    RelayResponseMetadata meta = 1;
    oneof payload {
        JSONRPCResponsePayload json_rpc_payload = 2;
        RESTResponsePayload rest_payload = 3;
        // Future possible relay types:
        // WebSocketsResponsePayload websockets_payload = 4;
        // GRPCResponsePayload grpc_payload = 5;
        // GraphQLResponsePayload graphql_payload = 6;
    }
}

// RelayResponseMetadata contains the metadata for a RelayResponse.
message RelayResponseMetadata {
    session.SessionHeader session_header = 1; // Session header associated with the relay.
    bytes supplier_signature = 2; // Signature of the supplier on the response.
}

// JSONRPCResponsePayload contains the response details for a JSON-RPC relay.
message JSONRPCResponsePayload {
    uint32 status_code = 1; // Response status code.
    string err = 2; // Error message, if any.
    bytes payload = 3; // Response payload.
}

// RESTResponsePayload contains the response details for a REST relay.
message RESTResponsePayload {
    uint32 status_code = 1; // Response status code.
    string err = 2; // Error message, if any.
    bytes payload = 3; // Response payload.
}
