syntax = "proto3";
package pocket.service;

// Import required proto files
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Set global options
option (gogoproto.equal_all) = true;
option go_package = "pocket/x/service/types";

// Service is the main service message describing all configurations for a service
// TODO_RESEARCH(@olshansk): Should these be permissioned or permissionless?
message Service {
    ServiceId id = 1; // Unique and semantic identifier for the service
    ServiceConfig config = 2; // Configuration settings for the service
}

// ServiceId message to encapsulate unique and semantic identifiers
message ServiceId {
    string id = 1; // Unique identifier for the service
    optional string name = 2; // Semantic name for the service
}

// ServiceConfig message to hold service configuration details
message ServiceConfig {
    repeated Endpoint endpoints = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "endpoints"]; // List of endpoints for the service
}

// Endpoint message to define individual service endpoints
message Endpoint {
    string url = 1 [(gogoproto.jsontag) = "url"]; // URL of the endpoint
    RPCType rpc_type = 2 [(gogoproto.jsontag) = "rpc_type"]; // Type of RPC used
    repeated ConfigOption configs = 3; // Additional configuration options for the endpoint
}

// Enum to define RPC types
enum RPCType {
    UNKNOWN_RPC = 0; // Undefined RPC type
    GRPC = 1; // gRPC
    WEBSOCKET = 2; // WebSocket
    JSON_RPC = 3; // JSON-RPC
    // Add new RPC types here as needed
}

// Enum to define configuration options
enum ConfigOptionType {
    UNKNOWN_CONFIG = 0; // Undefined config option
    TIMEOUT = 1; // Timeout setting
    // Add new config options here as needed
}

// Key-value wrapper for config options, as proto maps can't be keyed by enums
message ConfigOption {
    ConfigOptionType key = 1; // Config option key
    string value = 2; // Config option value
}
