syntax = "proto3";
package pocket.service;

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "google/protobuf/any.proto";

option go_package = "pocket/x/service/types";


message Service {
    ServiceId id = 1; // service identifier containing unique ID and semantic name
    ServiceConfig config = 2; // configuration for the servic
}

message ServiceId {
    string id = 1; // unique identifier for the service
    optional string name = 2; // human-readable semantic name describing what the service is
}

message ServiceConfig {
    repeated Endpoint endpoints = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "endpoints"];
}

message Endpoint {
    string url = 1 [(gogoproto.jsontag) = "url"]; // The URL of the endpoint
    RPCType rpc_type = 2 [(gogoproto.jsontag) = "rpc_type"]; // The type of the RPC
    repeated ConfigOption configs = 3; // Configuration options for the endpoint
}

// Enum to define various RPC types
// TODO_DISCUSS: Enums are nice but in the `.json` files (e.g. see servicer1.json), we have to represent it as an int, which defeats half the purpose of using enums.
enum RPCType {
    UNKNOWN_RPC = 0;
    GRPC = 1;
    WEBSOCKET = 2;
    JSON_RPC = 3;
    // Add new RPC types here as needed
}

// Enum to define configuration options for the endpoint
// TODO_DISCUSS: Enums are nice but in the `.json` files (e.g. see servicer1.json), we have to represent it as an int, which defeats half the purpose of using enums.
enum ConfigOptions {
    UNKNOWN_CONFIG = 0;
    TIMEOUT = 1;
    // Add new config options here as needed
}

// NB: proto maps cannot be keyed be enums, so we create a key-value wrapper instead
message ConfigOption {
    ConfigOptions key = 1;
    string value = 2;
}