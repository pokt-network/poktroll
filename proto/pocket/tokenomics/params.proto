syntax = "proto3";
package pocket.tokenomics;

option go_package = "github.com/pokt-network/poktroll/x/tokenomics/types";
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.equal_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";


// Params defines the parameters for the tokenomics module.
message Params {
  option (amino.name) = "pocket/x/tokenomics/Params";
  option (gogoproto.equal) = true;

  // Next free index: 9

  // dao_reward_address is where the DAO's portion of claims submitted are distributed.
  string dao_reward_address = 6 [(cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.jsontag) = "dao_reward_address", (gogoproto.moretags) = "yaml:\"dao_reward_address\""]; // Bech32 cosmos address

  // mint_allocation_percentages represents the distribution of newly minted tokens.
  // GlobalMintTLM: Only used by the GlobalMintTLM at the end of claim settlement.
  MintAllocationPercentages mint_allocation_percentages = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "mint_allocation_percentages", (gogoproto.moretags) = "yaml:\"mint_allocation_percentages\""];

  // global_inflation_per_claim is the percentage of a claim's claimable uPOKT amount to be minted on settlement.
  // GlobalMintTLM: Only used by the GlobalMintTLM at the end of claim settlement.
  double global_inflation_per_claim = 7 [(gogoproto.jsontag) = "global_inflation_per_claim", (gogoproto.moretags) = "yaml:\"global_inflation_per_claim\""];

  // mint_equals_burn_claim_distribution controls how the settlement amount is distributed
  // when global inflation is disabled (global_inflation_per_claim = 0).
  // MintEqualsBurnTLM: Only used by the MintEqualsBurnTLM at the end of claim settlement.
  MintEqualsBurnClaimDistribution mint_equals_burn_claim_distribution = 8 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "mint_equals_burn_claim_distribution", (gogoproto.moretags) = "yaml:\"mint_equals_burn_claim_distribution\""];
}

// MintAllocationPercentages captures the distribution of newly minted tokens.
// The sum of all new tokens minted must equal 1.
// GlobalMintTLM: Only used by the GlobalMintTLM at the end of claim settlement.
// TODO_DISTANT_FUTURE: Remove this once global inflation is disabled in perpetuity.
message MintAllocationPercentages {
  // dao - % of newley minted tokens sent to the DAO reward address.
  double dao = 1 [(gogoproto.jsontag) = "dao", (gogoproto.moretags) = "yaml:\"dao\""];

  // proposer - % of newley minted tokens sent to the block proposer (i.e. validator0 account address.
  double proposer = 2 [(gogoproto.jsontag) = "proposer", (gogoproto.moretags) = "yaml:\"proposer\""];

  // supplier - % of newley minted tokens sent to the block supplier account address.
  double supplier = 3 [(gogoproto.jsontag) = "supplier", (gogoproto.moretags) = "yaml:\"supplier\""];

  // source_owner - % of newley minted tokens sent to the service source owner account address.
  double source_owner = 4 [(gogoproto.jsontag) = "source_owner", (gogoproto.moretags) = "yaml:\"source_owner\""];

  // application - % of newley minted tokens sent to the application account address.
  double application = 5 [(gogoproto.jsontag) = "application", (gogoproto.moretags) = "yaml:\"application\""];
}

// MintEqualsBurnClaimDistribution captures the distribution of claimable tokens.
// The sum of all tokens being burnt from the application's stake must equal 1.
// GlobalMintEqualsBurnTLM: Only used by the GlobalMintEqualsBurnTLM at the end of claim settlement.
message MintEqualsBurnClaimDistribution {
  // dao - % of claimable tokens sent to the DAO reward address.
  double dao = 1 [(gogoproto.jsontag) = "dao", (gogoproto.moretags) = "yaml:\"dao\""];

  // proposer - % of claimable tokens sent to the block proposer (i.e. validator0) account address.
  double proposer = 2 [(gogoproto.jsontag) = "proposer", (gogoproto.moretags) = "yaml:\"proposer\""];

  // supplier - % of claimable tokens sent to the block supplier account address.
  double supplier = 3 [(gogoproto.jsontag) = "supplier", (gogoproto.moretags) = "yaml:\"supplier\""];

  // source_owner - % of claimable tokens sent to the service source owner account address.
  double source_owner = 4 [(gogoproto.jsontag) = "source_owner", (gogoproto.moretags) = "yaml:\"source_owner\""];

  // application - % of claimable tokens sent to the application account address.
  double application = 5 [(gogoproto.jsontag) = "application", (gogoproto.moretags) = "yaml:\"application\""];
}