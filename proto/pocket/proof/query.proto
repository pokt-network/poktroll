syntax = "proto3";
package pocket.proof;

option go_package = "github.com/pokt-network/poktroll/x/proof/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

import "pocket/proof/params.proto";
import "pocket/proof/types.proto";

// Query defines the gRPC querier service.
service Query {

  // Params queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/params";
  }

  // ParamsAtHeight queries the parameters of the module at a given height.
  rpc ParamsAtHeight(QueryParamsAtHeightRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/params/{at_height}";
  }

  // ParamsUpdates queries the parameters history of the module.
  rpc ParamsUpdates(QueryParamsUpdatesRequest) returns (QueryParamsUpdatesResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/params_updates";
  }

  // Queries a list of Claim items.
  rpc Claim     (QueryGetClaimRequest ) returns (QueryGetClaimResponse ) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/claim/{session_id}/{supplier_operator_address}";

  }
  rpc AllClaims (QueryAllClaimsRequest) returns (QueryAllClaimsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/claim";

  }

  // Queries a list of Proof items.
  rpc Proof    (QueryGetProofRequest) returns (QueryGetProofResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/proof/{session_id}/{supplier_operator_address}";

  }
  rpc AllProofs (QueryAllProofsRequest) returns (QueryAllProofsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/proof";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // activation_height is the block height at which the params are effective.
  // - For current parameters, this is the height at which they were activated.
  // - For future parameters, this is the scheduled height for activation.
  int64 activation_height = 2;

  // deactivation_height is the block height at which the params are no longer effective.
  // - For currently active params, this value is 0, indicating no scheduled deactivation.
  // - For scheduled future updates or historical parameters, this indicates when they will be
  //   or were replaced by another parameter update.
  int64 deactivation_height = 3;
}

// QueryParamsAtHeightRequest is request type for the Query/ParamsAtHeight RPC method.
message QueryParamsAtHeightRequest {
  // height is used to query the params values at a given block height.
  int64 at_height = 1;
}

message QueryGetClaimRequest {
  string session_id = 1;
  string supplier_operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetClaimResponse {
  Claim claim = 1 [(gogoproto.nullable) = false];
}

message QueryAllClaimsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;

  oneof filter {
    string supplier_operator_address= 2;
    string session_id = 3;
    uint64 session_end_height = 4;
  }
}

message QueryAllClaimsResponse {
  repeated Claim claims = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProofRequest {
  string session_id = 1;
  string supplier_operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetProofResponse {
  Proof proof = 1 [(gogoproto.nullable) = false];
}

message QueryAllProofsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;

  oneof filter {
    string supplier_operator_address = 2;
    string session_id = 3;
    uint64 session_end_height = 4;
  }
}

message QueryAllProofsResponse {
  repeated Proof proofs = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsUpdatesRequest is request type for the Query/Params RPC method.
message QueryParamsUpdatesRequest {}

// QueryParamsUpdatesResponse is response type for the Query/Params RPC method.
message QueryParamsUpdatesResponse {
  // params updates holds all the parameters history of this module.
  repeated ParamsUpdate params_updates = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}
