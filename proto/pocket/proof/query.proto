syntax = "proto3";
package pocket.proof;

option go_package = "github.com/pokt-network/poktroll/x/proof/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

import "pocket/proof/params.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "pocket/proof/types.proto";

// Query defines the gRPC querier service.
service Query {

  // proof.QueryParams
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/params";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryProofParams"
      summary: "proof.QueryParams"
    };
  }

  rpc Claim (QueryGetClaimRequest ) returns (QueryGetClaimResponse ) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/claim/{session_id}/{supplier_operator_address}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryClaim"
      summary: "proof.QueryClaim retrieves a claim by session and supplier."
    };
  }
  rpc AllClaims (QueryAllClaimsRequest) returns (QueryAllClaimsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/claim";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryAllClaims"
      summary: "proof.QueryAllClaims lists claims with pagination and filters."
    };
  }

  rpc Proof (QueryGetProofRequest) returns (QueryGetProofResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/proof/{session_id}/{supplier_operator_address}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryProof"
      summary: "proof.QueryProof retrieves a proof by session and supplier."
    };
  }
  rpc AllProofs (QueryAllProofsRequest) returns (QueryAllProofsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/proof/proof";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryAllProofs"
      summary: "proof.QueryAllProofs lists proofs with pagination and filters."
    };
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetClaimRequest {
  string session_id = 1;
  string supplier_operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetClaimResponse {
  Claim claim = 1 [(gogoproto.nullable) = false];
}

message QueryAllClaimsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;

  oneof filter {
    string supplier_operator_address= 2;
    string session_id = 3;
    uint64 session_end_height = 4;
  }
}

message QueryAllClaimsResponse {
  repeated Claim claims = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProofRequest {
  string session_id = 1;
  string supplier_operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetProofResponse {
  Proof proof = 1 [(gogoproto.nullable) = false];
}

message QueryAllProofsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;

  oneof filter {
    string supplier_operator_address = 2;
    string session_id = 3;
    uint64 session_end_height = 4;
  }
}

message QueryAllProofsResponse {
  repeated Proof proofs = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
