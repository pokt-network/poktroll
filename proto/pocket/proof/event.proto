syntax = "proto3";
package pocket.proof;

option go_package = "github.com/pokt-network/poktroll/x/proof/types";
option (gogoproto.stable_marshaler_all) = true;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "pocket/proof/types.proto";

message EventClaimCreated {
  // Next index: 13

  // pocket.proof.Claim claim = 1 [(gogoproto.jsontag) = "claim"];
  // cosmos.base.v1beta1.Coin claimed_upokt = 6 [(gogoproto.jsontag) = "claimed_upokt"];
  reserved 1, 6;

  uint64 num_relays = 2 [(gogoproto.jsontag) = "num_relays"];
  uint64 num_claimed_compute_units = 4 [(gogoproto.jsontag) = "num_claimed_compute_units"];
  uint64 num_estimated_compute_units = 5 [(gogoproto.jsontag) = "num_estimated_compute_units"];
  string claimed_upokt = 7 [(gogoproto.jsontag) = "claimed_upokt"];

  // The Service ID to which the claim corresponds.
  string service_id = 8;

  // The address of the application which participated in the claimed session.
  string application_address = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The end block height of the session to which the claim corresponds.
  int64 session_end_block_height = 10;

  // The validation status of the claim.
  // DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
  // enum to minimize onchain disk utilization. This is necessary because event
  // data is not always protobuf-encoded in the various places and formats that it
  // appears in onchain leveldb databases.
  // Enum values:
  //   PENDING_VALIDATION = 0;
  //   VALIDATED = 1;
  //   INVALID = 2;
  int32 claim_proof_status_int = 11;

  // The operator address of the supplier which submitted the claim.
  string supplier_operator_address = 12 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// TODO_TEST: Add coverage for claim updates.
message EventClaimUpdated {
  // Next index: 13

  // pocket.proof.Claim claim = 1 [(gogoproto.jsontag) = "claim"];
  // cosmos.base.v1beta1.Coin claimed_upokt = 6 [(gogoproto.jsontag) = "claimed_upokt"];
  reserved 1, 6;

  uint64 num_relays = 2 [(gogoproto.jsontag) = "num_relays"];
  uint64 num_claimed_compute_units = 4 [(gogoproto.jsontag) = "num_claimed_compute_units"];
  uint64 num_estimated_compute_units = 5 [(gogoproto.jsontag) = "num_estimated_compute_units"];
  string claimed_upokt = 7 [(gogoproto.jsontag) = "claimed_upokt"];

  // The Service ID to which the claim corresponds.
  string service_id = 8;

  // The address of the application which participated in the claimed session.
  string application_address = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The end block height of the session to which the claim corresponds.
  int64 session_end_block_height = 10;

  // The validation status of the claim.
  // DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
  // enum to minimize onchain disk utilization. This is necessary because event
  // data is not always protobuf-encoded in the various places and formats that it
  // appears in onchain leveldb databases.
  // Enum values:
  //   PENDING_VALIDATION = 0;
  //   VALIDATED = 1;
  //   INVALID = 2;
  int32 claim_proof_status_int = 11;

  // The operator address of the supplier which updated the claim.
  string supplier_operator_address = 12 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message EventProofSubmitted {
  // Next index: 13

  // pocket.proof.Claim claim = 1 [(gogoproto.jsontag) = "claim"];
  // cosmos.base.v1beta1.Coin claimed_upokt = 6 [(gogoproto.jsontag) = "claimed_upokt"];
  reserved 1, 6;

  uint64 num_relays = 3 [(gogoproto.jsontag) = "num_relays"];
  uint64 num_claimed_compute_units = 4 [(gogoproto.jsontag) = "num_claimed_compute_units"];
  uint64 num_estimated_compute_units = 5 [(gogoproto.jsontag) = "num_estimated_compute_units"];
  string claimed_upokt = 7 [(gogoproto.jsontag) = "claimed_upokt"];

  // The Service ID to which the claim corresponds.
  string service_id = 8;

  // The address of the application which participated in the claimed session.
  string application_address = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The end block height of the session to which the claim corresponds.
  int64 session_end_block_height = 10;

  // The validation status of the claim.
  // DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
  // enum to minimize onchain disk utilization. This is necessary because event
  // data is not always protobuf-encoded in the various places and formats that it
  // appears in onchain leveldb databases.
  // Enum values:
  //   PENDING_VALIDATION = 0;
  //   VALIDATED = 1;
  //   INVALID = 2;
  int32 claim_proof_status_int = 11;

  // The operator address of the supplier which submitted the proof.
  string supplier_operator_address = 12 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// TODO_TEST: Add coverage for proof updates.
message EventProofUpdated {
  // Next index: 13

  // pocket.proof.Claim claim = 1 [(gogoproto.jsontag) = "claim"];
  // cosmos.base.v1beta1.Coin claimed_upokt = 6 [(gogoproto.jsontag) = "claimed_upokt"];
  reserved 1, 6;

  uint64 num_relays = 3 [(gogoproto.jsontag) = "num_relays"];
  uint64 num_claimed_compute_units = 4 [(gogoproto.jsontag) = "num_claimed_compute_units"];
  uint64 num_estimated_compute_units = 5 [(gogoproto.jsontag) = "num_estimated_compute_units"];
  string claimed_upokt = 7 [(gogoproto.jsontag) = "claimed_upokt"];

  // The Service ID to which the claim corresponds.
  string service_id = 8;

  // The address of the application which participated in the claimed session.
  string application_address = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The end block height of the session to which the claim corresponds.
  int64 session_end_block_height = 10;

  // The validation status of the claim.
  // DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
  // enum to minimize onchain disk utilization. This is necessary because event
  // data is not always protobuf-encoded in the various places and formats that it
  // appears in onchain leveldb databases.
  // Enum values:
  //   PENDING_VALIDATION = 0;
  //   VALIDATED = 1;
  //   INVALID = 2;
  int32 claim_proof_status_int = 11;

  // The operator address of the supplier which updated the proof.
  string supplier_operator_address = 12 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Event emitted after a proof has been checked for validity in the proof module's
// EndBlocker.
message EventProofValidityChecked {
  // Next index: 12

  // The following fields were removed to minimize block size.
  // See https://github.com/pokt-network/poktroll/issues/1497.
  // pocket.proof.Proof proof = 1 [(gogoproto.jsontag) = "proof"];
  // pocket.proof.ClaimProofStatus proof_status = 3 [(gogoproto.jsontag) = "proof_status"];
  // pocket.proof.Claim claim = 5 [(gogoproto.jsontag) = "claim"];
  reserved 1, 3, 5;

  uint64 block_height = 2 [(gogoproto.jsontag) = "block_height"];
  // reason is the string representation of the error that led to the proof being
  // marked as invalid (e.g. "invalid closest merkle proof", "invalid relay request signature")
  string failure_reason = 4 [(gogoproto.jsontag) = "failure_reason"];

  // The Service ID to which the claim corresponds.
  string service_id = 8;

  // The address of the application which participated in the claimed session.
  string application_address = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The end block height of the session to which the claim corresponds.
  int64 session_end_block_height = 10;

  // The validation status of the claim.
  // DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
  // enum to minimize onchain disk utilization. This is necessary because event
  // data is not always protobuf-encoded in the various places and formats that it
  // appears in onchain leveldb databases.
  // Enum values:
  //   PENDING_VALIDATION = 0;
  //   VALIDATED = 1;
  //   INVALID = 2;
  int32 claim_proof_status_int = 11;

  // The operator address of the supplier whose proof was checked.
  string supplier_operator_address = 12 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
