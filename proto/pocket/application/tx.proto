syntax = "proto3";

package pocket.application;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "pocket/x/application/types";

// Msg defines the Msg service.
service Msg {
  rpc StakeApplication      (MsgStakeApplication     ) returns (MsgStakeApplicationResponse     );
  rpc UnstakeApplication    (MsgUnstakeApplication   ) returns (MsgUnstakeApplicationResponse   );
  rpc DelegateToGateway     (MsgDelegateToGateway    ) returns (MsgDelegateToGatewayResponse    );
  rpc UndelegateFromGateway (MsgUndelegateFromGateway) returns (MsgUndelegateFromGatewayResponse);
}
message MsgStakeApplication {
  option (cosmos.msg.v1.signer) = "address"; // https://docs.cosmos.network/main/build/building-modules/messages-and-queries

  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the application using cosmos' ScalarDescriptor to ensure deterministic encoding
  cosmos.base.v1beta1.Coin stake = 2;  // The total amount of uPOKT the application has staked. Must be â‰¥ to the current amount that the application has staked (if any)
  // TODO(@Olshansk): Update the tx flow to add support for `services`
  // repeated service.ApplicationServiceConfig services = 3; // The list of services this application is staked to request service for
}

message MsgStakeApplicationResponse {}

message MsgUnstakeApplication {
  option (cosmos.msg.v1.signer) = "address"; // https://docs.cosmos.network/main/build/building-modules/messages-and-queries
  string address = 1;
}

message MsgUnstakeApplicationResponse {}

message MsgDelegateToGateway {
  string address = 1;
}

message MsgDelegateToGatewayResponse {}

message MsgUndelegateFromGateway {
  string address = 1;
}

message MsgUndelegateFromGatewayResponse {}

