syntax = "proto3";

package pocket.supplier;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "pocket/session/session.proto";

option go_package = "pocket/x/supplier/types";

// Msg defines the Msg service.
service Msg {
  rpc StakeSupplier   (MsgStakeSupplier  ) returns (MsgStakeSupplierResponse  );
  rpc UnstakeSupplier (MsgUnstakeSupplier) returns (MsgUnstakeSupplierResponse);
  rpc CreateClaim     (MsgCreateClaim    ) returns (MsgCreateClaimResponse    );
  rpc SubmitProof     (MsgSubmitProof    ) returns (MsgSubmitProofResponse    );
}

message MsgStakeSupplier {
  option (cosmos.msg.v1.signer) = "address"; // https://docs.cosmos.network/main/build/building-modules/messages-and-queries

  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the supplier using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding using cosmos' ScalarDescriptor to ensure deterministic deterministic encoding
  cosmos.base.v1beta1.Coin stake = 2;  // The total amount of uPOKT the supplier has staked. Must be â‰¥ to the current amount that the supplier has staked (if any)
  // TODO(@Olshansk): Update the tx flow to add support for `services`
  // repeated service.SupplierServiceConfig services = 3; // The list of services this supplier is staked to provide service for
}

message MsgStakeSupplierResponse {}

message MsgUnstakeSupplier {
  option (cosmos.msg.v1.signer) = "address"; // https://docs.cosmos.network/main/build/building-modules/messages-and-queries

  string address = 1;
}

message MsgUnstakeSupplierResponse {}

message MsgCreateClaim {
  option (cosmos.msg.v1.signer) = "supplier_address";

  string                       supplier_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  pocket.session.SessionHeader session_header   = 2;
  // root returned from smt.SMST#Root()
  bytes                        root_hash        = 3;
}

message MsgCreateClaimResponse {}



message MsgSubmitProof {
  option (cosmos.msg.v1.signer) = "supplier_address";

  string                       supplier_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  pocket.session.SessionHeader session_header   = 2;
  // serialized version of *smt.SparseMerkleClosestProof
  bytes                        proof            = 3;
}

message MsgSubmitProofResponse {}

