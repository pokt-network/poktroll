syntax = "proto3";
package pocket.supplier;

option go_package = "github.com/pokt-network/poktroll/x/supplier/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";

import "pocket/supplier/params.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "pocket/shared/supplier.proto";

service Query {

  // supplier.QueryParams
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/supplier/params";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QuerySupplierParams"
      summary: "supplier.QueryParams"
    };
  }

  rpc Supplier (QueryGetSupplierRequest) returns (QueryGetSupplierResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/supplier/supplier/{operator_address}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QuerySupplier"
      summary: "supplier.QuerySupplier retrieves a specific supplier by operator address."
    };
  }

  rpc AllSuppliers (QueryAllSuppliersRequest) returns (QueryAllSuppliersResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/supplier/supplier";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryAllSuppliers"
      summary: "supplier.QueryAllSuppliers lists suppliers with pagination."
    };
  }
}
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetSupplierRequest {
  string operator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // If true, return a dehydrated version of the supplier.
  // If false, return a hydrated version of the supplier.
  // Rationale: This enables smaller response payloads to reduce payload size.
  // Example: Removes service_config_history and rev_share details from the response. See the implementation for more details.
  bool dehydrated = 2;

    // TODO_TECHDEBT: Add the ability to query for a supplier by owner_id

}

message QueryGetSupplierResponse {
  pocket.shared.Supplier supplier = 1 [(gogoproto.nullable) = false];
}

message QueryAllSuppliersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;

  oneof filter {
    string service_id = 2; // unique service identifier to filter by
  }

  // If true, return a dehydrated version of the supplier.
  // If false, return a hydrated version of the supplier.
  // Rationale: This enables smaller response payloads to reduce pagination of the supplier list.
  // Example: Removes service_config_history and rev_share details from the response. See the implementation for more details.
  bool dehydrated = 3;
}

message QueryAllSuppliersResponse {
  repeated pocket.shared.Supplier supplier = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
