syntax = "proto3";
package pocket.session;

option go_package = "github.com/pokt-network/poktroll/x/session/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";

import "pocket/session/params.proto";
import "pocket/session/types.proto";
import "pocket/shared/service.proto";

// Query defines the gRPC querier service.
service Query {

  // Params queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/session/params";
  }

  // ParamsAtHeight queries the parameters of the module at a given height.
  rpc ParamsAtHeight (QueryParamsAtHeightRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/session/params/{at_height}";
  }

  // ParamsUpdates queries the parameters history of the module.
  rpc ParamsUpdates(QueryParamsUpdatesRequest) returns (QueryParamsUpdatesResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/session/params_updates";
  }

  // Queries the session given app_address, service and block_height.
  rpc GetSession (QueryGetSessionRequest) returns (QueryGetSessionResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/session/get_session";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // activation_height is the block height at which the params are effective.
  // - For current parameters, this is the height at which they were activated.
  // - For future parameters, this is the scheduled height for activation.
  int64 activation_height = 2;

  // deactivation_height is the block height at which the params are no longer effective.
  // - For currently active params, this value is 0, indicating no scheduled deactivation.
  // - For scheduled future updates or historical parameters, this indicates when they will be
  //   or were replaced by another parameter update.
  int64 deactivation_height = 3;
}

// QueryParamsAtHeightRequest is request type for the Query/ParamsAtHeight RPC method.
message QueryParamsAtHeightRequest {
  // height is used to query the params values at a given block height.
  int64 at_height = 1;
}

message QueryGetSessionRequest {
  string application_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the application.
  string service_id = 2; // The service ID to query the session for
  int64 block_height = 3; // The block height to query the session for
}

message QueryGetSessionResponse {
  Session session = 1;
}

// QueryParamsUpdatesRequest is request type for the Query/Params RPC method.
message QueryParamsUpdatesRequest {}

// QueryParamsUpdatesResponse is response type for the Query/Params RPC method.
message QueryParamsUpdatesResponse {
  // params updates holds all the parameters history of this module.
  repeated ParamsUpdate params_updates = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}
