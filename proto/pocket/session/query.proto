syntax = "proto3";
package pocket.session;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";

import "pocket/session/params.proto";
import "pocket/session/session.proto";
import "pocket/shared/service.proto";

option go_package = "github.com/pokt-network/poktroll/x/session/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pocket/session/params";
  }

  // Queries a list of GetSession items.
  rpc GetSession (QueryGetSessionRequest) returns (QueryGetSessionResponse) {
    option (google.api.http).get = "/pocket/session/get_session";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSessionRequest {
  string application_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the application using cosmos' ScalarDescriptor to ensure deterministic encoding
  shared.Service service = 2; // The service id to query the session for
  int64 block_height = 3; // The block height to query the session for
}

message QueryGetSessionResponse {
  session.Session session = 1;
}

