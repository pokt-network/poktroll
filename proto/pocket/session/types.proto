syntax = "proto3";
package pocket.session;

option go_package = "github.com/pokt-network/poktroll/x/session/types";
option (gogoproto.stable_marshaler_all) = true;

import "cosmos_proto/cosmos.proto";

import "pocket/shared/service.proto";
import "pocket/application/types.proto";
import "pocket/shared/supplier.proto";
import "gogoproto/gogo.proto";

// NOTE: Using signed integers for consistency with the cosmos SDK

// SessionHeader is a lightweight header for a session that can be passed around.
// It is the minimal amount of data required to hydrate & retrieve all data relevant to the session.
message SessionHeader {
   // The Bech32 address of the application.
  string application_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The service id this session is for
  string service_id = 2;

  // NOTE: session_id can be derived from the above values using onchain but is included in the header for convenience
   // A unique pseudorandom ID for this session
  string session_id = 3;

   // The height at which this session started
  int64 session_start_block_height = 4;

   // Note that`session_end_block_height` is a derivative of (`start` + `num_blocks_per_session`)
   // as governed by onchain params at the time of the session start.
   // It is stored as an additional field to simplify business logic in case
   // the number of blocks_per_session changes during the session.
  int64 session_end_block_height = 5; // The height at which this session ended, this is the last block of the session
}

// Session is a fully hydrated session object that contains all the information for the Session
// and its participants.
message Session {
  // The header of the session containing lightweight data
  SessionHeader header = 1;

  // A unique pseudorandom ID for this session
  string session_id = 2;

  // The session number since genesis
  int64 session_number = 3;

  // The number of blocks per session when this session started
  int64 num_blocks_per_session = 4;

  // A fully hydrated application object this session is for
  pocket.application.Application application = 5;

  // A fully hydrated set of servicers that are serving the application
  repeated pocket.shared.Supplier suppliers = 6;
}
