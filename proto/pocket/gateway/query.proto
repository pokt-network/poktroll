syntax = "proto3";
package pocket.gateway;

option go_package = "github.com/pokt-network/poktroll/x/gateway/types";
option (gogoproto.stable_marshaler_all) = true;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";

import "pocket/gateway/params.proto";
import "pocket/gateway/types.proto";

// Query defines the gRPC querier service.
service Query {

  // gateway.QueryParams
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/gateway/params";
  }

  rpc Gateway (QueryGetGatewayRequest) returns (QueryGetGatewayResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/gateway/gateway/{address}";
  }

  rpc AllGateways (QueryAllGatewaysRequest) returns (QueryAllGatewaysResponse) {
    option (google.api.http).get = "/pokt-network/poktroll/gateway/gateway";

  }
}
message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}
message QueryGetGatewayRequest {
  string address = 1;
}

message QueryGetGatewayResponse {
  Gateway gateway = 1 [(gogoproto.nullable) = false];
}

message QueryAllGatewaysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGatewaysResponse {
  repeated Gateway gateways = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

