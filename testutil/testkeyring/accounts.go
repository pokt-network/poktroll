package testkeyring

import (
	"encoding/base64"
	"encoding/json"
	"sync/atomic"

	errorsmod "cosmossdk.io/errors"
	"github.com/cosmos/cosmos-sdk/testutil"
	sdktypes "github.com/cosmos/cosmos-sdk/types"
)

var (
	ErrPreGeneratedAccountIndexOutOfRange = errorsmod.New(codespace, 1, "index out of range of pre-generated accounts list")
	codespace                             = "testutil/network"
)

type PreGeneratedAccount struct {
	Address  sdktypes.AccAddress
	Mnemonic string
}

type PreGeneratedAccountIterator struct {
	accounts  []*PreGeneratedAccount
	nextIndex uint32
}

// PreGeneratedAccountAtIndex returns the account at the given index. It returns
// an error if the index is out of range.
func PreGeneratedAccountAtIndex(index uint32) (*PreGeneratedAccount, error) {
	if preGeneratedAccounts.nextIndex >= uint32(len(preGeneratedAccounts.accounts)) {
		return nil, ErrPreGeneratedAccountIndexOutOfRange.Wrapf("%d", index)
	}

	return preGeneratedAccounts.accounts[index], nil
}

// MustPreGeneratedAccountAtIndex returns the account at the given index. It
// panics on error; i.e. if the index is out of range.
func MustPreGeneratedAccountAtIndex(index uint32) *PreGeneratedAccount {
	account, err := PreGeneratedAccountAtIndex(index)
	if err != nil {
		panic(err)
	}
	return account
}

// PreGeneratedAccounts returns a new PreGeneratedAccountIterator with the
// accounts which were pre-generated by the `gen_accounts` tool.
func PreGeneratedAccounts() *PreGeneratedAccountIterator {
	return preGeneratedAccounts.Clone()
}

// NewPreGeneratedAccountIterator returns a new PreGeneratedAccountIterator with
// the given accounts. It is primarily used by the generated code to intially
// construct the preGeneratedAccounts variable.
func NewPreGeneratedAccountIterator(accounts ...*PreGeneratedAccount) *PreGeneratedAccountIterator {
	return &PreGeneratedAccountIterator{
		accounts:  accounts,
		nextIndex: 0,
	}
}

// MustNext returns the next account in the iterator. It panics if it encounters
// an error. It is safe to call concurrently and is guaranteed to return a unique
//
//	account on each call.
func (iter *PreGeneratedAccountIterator) MustNext() *PreGeneratedAccount {
	next, err := iter.Next()
	if err != nil {
		panic(err)
	}
	return next
}

// Next returns the next account in the iterator. It is safe to call
// concurrently and is guaranteed to return a unique account on each call.
func (iter *PreGeneratedAccountIterator) Next() (*PreGeneratedAccount, error) {
	// NB: instead of loading and incrementing in separate steps, just increment
	// and use nextIndex-1 for the current index.
	nextIndex := atomic.AddUint32(&iter.nextIndex, 1)
	currentIndex := nextIndex - 1

	if currentIndex > uint32(len(iter.accounts)) {
		return nil, ErrPreGeneratedAccountIndexOutOfRange.Wrapf("%d", currentIndex)
	}

	return iter.accounts[currentIndex], nil
}

// Clone returns a new PreGeneratedAccountIterator with the same accounts as the
// receiver but with its nextIndex reset to 0.
func (iter *PreGeneratedAccountIterator) Clone() *PreGeneratedAccountIterator {
	return NewPreGeneratedAccountIterator(iter.accounts...)
}

func (pga *PreGeneratedAccount) ToTestAccount(name ...string) testutil.TestAccount {
	return testutil.TestAccount{
		Name:    name[0],
		Address: pga.Address,
	}
}

// mustParsePreGeneratedAccount parses the given base64 and JSON encoded account
// string into a PreGeneratedAccount. It panics on error.
func mustParsePreGeneratedAccount(accountStr string) *PreGeneratedAccount {
	account, err := parsePreGeneratedAccount(accountStr)
	if err != nil {
		panic(err)
	}
	return account
}

// parsePreGeneratedAccount parses the given base64 and JSON encoded account string
// into a PreGeneratedAccount.
func parsePreGeneratedAccount(accountStr string) (*PreGeneratedAccount, error) {
	accountJson, err := base64.StdEncoding.DecodeString(accountStr)
	if err != nil {
		return nil, err
	}

	preGeneratedAccount := new(PreGeneratedAccount)
	if err := json.Unmarshal(accountJson, preGeneratedAccount); err != nil {
		return nil, err
	}

	return preGeneratedAccount, nil
}
