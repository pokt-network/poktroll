// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/x/auth/signing (interfaces: Tx)
//
// Generated by this command:
//
//	mockgen -destination=../../testutil/mockclient/signing_tx.go -package=mockclient github.com/cosmos/cosmos-sdk/x/auth/signing Tx
//

// Package mockclient is a generated GoMock package.
package mockclient

import (
	reflect "reflect"
	time "time"

	types "github.com/cosmos/cosmos-sdk/crypto/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	signing "github.com/cosmos/cosmos-sdk/types/tx/signing"
	gomock "go.uber.org/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
	isgomock struct{}
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// FeeGranter mocks base method.
func (m *MockTx) FeeGranter() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeGranter")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// FeeGranter indicates an expected call of FeeGranter.
func (mr *MockTxMockRecorder) FeeGranter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeGranter", reflect.TypeOf((*MockTx)(nil).FeeGranter))
}

// FeePayer mocks base method.
func (m *MockTx) FeePayer() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeePayer")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// FeePayer indicates an expected call of FeePayer.
func (mr *MockTxMockRecorder) FeePayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeePayer", reflect.TypeOf((*MockTx)(nil).FeePayer))
}

// GetFee mocks base method.
func (m *MockTx) GetFee() types0.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee")
	ret0, _ := ret[0].(types0.Coins)
	return ret0
}

// GetFee indicates an expected call of GetFee.
func (mr *MockTxMockRecorder) GetFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockTx)(nil).GetFee))
}

// GetGas mocks base method.
func (m *MockTx) GetGas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGas indicates an expected call of GetGas.
func (mr *MockTxMockRecorder) GetGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGas", reflect.TypeOf((*MockTx)(nil).GetGas))
}

// GetMemo mocks base method.
func (m *MockTx) GetMemo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMemo indicates an expected call of GetMemo.
func (mr *MockTxMockRecorder) GetMemo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemo", reflect.TypeOf((*MockTx)(nil).GetMemo))
}

// GetMsgs mocks base method.
func (m *MockTx) GetMsgs() []types0.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgs")
	ret0, _ := ret[0].([]types0.Msg)
	return ret0
}

// GetMsgs indicates an expected call of GetMsgs.
func (mr *MockTxMockRecorder) GetMsgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgs", reflect.TypeOf((*MockTx)(nil).GetMsgs))
}

// GetMsgsV2 mocks base method.
func (m *MockTx) GetMsgsV2() ([]proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgsV2")
	ret0, _ := ret[0].([]proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsgsV2 indicates an expected call of GetMsgsV2.
func (mr *MockTxMockRecorder) GetMsgsV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgsV2", reflect.TypeOf((*MockTx)(nil).GetMsgsV2))
}

// GetPubKeys mocks base method.
func (m *MockTx) GetPubKeys() ([]types.PubKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKeys")
	ret0, _ := ret[0].([]types.PubKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubKeys indicates an expected call of GetPubKeys.
func (mr *MockTxMockRecorder) GetPubKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKeys", reflect.TypeOf((*MockTx)(nil).GetPubKeys))
}

// GetSignaturesV2 mocks base method.
func (m *MockTx) GetSignaturesV2() ([]signing.SignatureV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignaturesV2")
	ret0, _ := ret[0].([]signing.SignatureV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignaturesV2 indicates an expected call of GetSignaturesV2.
func (mr *MockTxMockRecorder) GetSignaturesV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignaturesV2", reflect.TypeOf((*MockTx)(nil).GetSignaturesV2))
}

// GetSigners mocks base method.
func (m *MockTx) GetSigners() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigners")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigners indicates an expected call of GetSigners.
func (mr *MockTxMockRecorder) GetSigners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigners", reflect.TypeOf((*MockTx)(nil).GetSigners))
}

// GetTimeoutHeight mocks base method.
func (m *MockTx) GetTimeoutHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeoutHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTimeoutHeight indicates an expected call of GetTimeoutHeight.
func (mr *MockTxMockRecorder) GetTimeoutHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeoutHeight", reflect.TypeOf((*MockTx)(nil).GetTimeoutHeight))
}

// GetTimeoutTimeStamp mocks base method.
func (m *MockTx) GetTimeoutTimeStamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeoutTimeStamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimeoutTimeStamp indicates an expected call of GetTimeoutTimeStamp.
func (mr *MockTxMockRecorder) GetTimeoutTimeStamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeoutTimeStamp", reflect.TypeOf((*MockTx)(nil).GetTimeoutTimeStamp))
}

// GetUnordered mocks base method.
func (m *MockTx) GetUnordered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnordered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetUnordered indicates an expected call of GetUnordered.
func (mr *MockTxMockRecorder) GetUnordered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnordered", reflect.TypeOf((*MockTx)(nil).GetUnordered))
}

// ValidateBasic mocks base method.
func (m *MockTx) ValidateBasic() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBasic")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBasic indicates an expected call of ValidateBasic.
func (mr *MockTxMockRecorder) ValidateBasic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBasic", reflect.TypeOf((*MockTx)(nil).ValidateBasic))
}
