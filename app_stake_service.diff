

 			if err := msg.ValidateBasic(); err != nil {
diff --git a/x/application/client/cli/tx_stake_application_test.go b/x/application/client/cli/tx_stake_application_test.go
index 8a0dac4..3721e8e 100644
--- a/x/application/client/cli/tx_stake_application_test.go
+++ b/x/application/client/cli/tx_stake_application_test.go
@@ -39,51 +39,95 @@ func TestCLI_StakeApplication(t *testing.T) {
 	}

 	tests := []struct {
-		desc        string
-		address     string
-		stakeString string
-		err         *sdkerrors.Error
+		desc             string
+		address          string
+		stakeString      string
+		serviceIdsString string
+		err              *sdkerrors.Error
 	}{
+		// Happy Paths
 		{
-			desc:        "stake application: valid",
-			address:     appAccount.Address.String(),
-			stakeString: "1000upokt",
+			desc:             "valid",
+			address:          appAccount.Address.String(),
+			stakeString:      "1000upokt",
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              nil,
 		},
+
+		// Error Paths - Address Related
 		{
-			desc: "stake application: missing address",
+			desc: "address_test: missing address",
 			// address:     "explicitly missing",
-			stakeString: "1000upokt",
-			err:         types.ErrAppInvalidAddress,
+			stakeString:      "1000upokt",
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              types.ErrAppInvalidAddress,
 		},
 		{
-			desc:        "stake application: invalid address",
-			address:     "invalid",
-			stakeString: "1000upokt",
-			err:         types.ErrAppInvalidAddress,
+			desc:             "stake application: invalid address",
+			address:          "invalid",
+			stakeString:      "1000upokt",
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              types.ErrAppInvalidAddress,
 		},
+
+		// Error Paths - Stake Related
 		{
-			desc:    "stake application: missing stake",
+			desc:    "address_test: missing stake",
 			address: appAccount.Address.String(),
 			// stakeString: "explicitly missing",
-			err: types.ErrAppInvalidStake,
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              types.ErrAppInvalidStake,
+		},
+		{
+			desc:             "address_test: invalid stake denom",
+			address:          appAccount.Address.String(),
+			stakeString:      "1000invalid",
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              types.ErrAppInvalidStake,
+		},
+		{
+			desc:             "address_test: invalid stake amount (zero)",
+			address:          appAccount.Address.String(),
+			stakeString:      "0upokt",
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              types.ErrAppInvalidStake,
+		},
+		{
+			desc:             "address_test: invalid stake amount (negative)",
+			address:          appAccount.Address.String(),
+			stakeString:      "-1000upokt",
+			serviceIdsString: "svc1,svc2,svc3",
+			err:              types.ErrAppInvalidStake,
+		},
+
+		// Error Paths - Service Related
+		{
+			desc:             "services_test: invalid services (empty string)",
+			address:          appAccount.Address.String(),
+			stakeString:      "1000upokt",
+			serviceIdsString: "",
+			err:              types.ErrAppInvalidStake,
 		},
 		{
-			desc:        "stake application: invalid stake denom",
-			address:     appAccount.Address.String(),
-			stakeString: "1000invalid",
-			err:         types.ErrAppInvalidStake,
+			desc:             "services_test: single invalid service contains spaces",
+			address:          appAccount.Address.String(),
+			stakeString:      "1000upokt",
+			serviceIdsString: "svc1 svc1_part2 svc1_part3",
+			err:              types.ErrAppInvalidStake,
 		},
 		{
-			desc:        "stake application: invalid stake amount (zero)",
-			address:     appAccount.Address.String(),
-			stakeString: "0upokt",
-			err:         types.ErrAppInvalidStake,
+			desc:             "services_test: one of two services is invalid because it contains spaces",
+			address:          appAccount.Address.String(),
+			stakeString:      "1000upokt",
+			serviceIdsString: "svc1 svc1_part2,svc2",
+			err:              types.ErrAppInvalidStake,
 		},
 		{
-			desc:        "stake application: invalid stake amount (negative)",
-			address:     appAccount.Address.String(),
-			stakeString: "-1000upokt",
-			err:         types.ErrAppInvalidStake,
+			desc:             "services_test: service ID is too long (8 chars is the max)",
+			address:          appAccount.Address.String(),
+			stakeString:      "1000upokt",
+			serviceIdsString: "svc1,abcdefghi",
+			err:              types.ErrAppInvalidStake,
 		},
 	}

@@ -99,6 +143,7 @@ func TestCLI_StakeApplication(t *testing.T) {
 			// Prepare the arguments for the CLI command
 			args := []string{
 				tt.stakeString,
+				tt.serviceIdsString,
 				fmt.Sprintf("--%s=%s", flags.FlagFrom, tt.address),
 			}
 			args = append(args, commonArgs...)
diff --git a/x/application/keeper/application.go b/x/application/keeper/application.go
index 2563287..64025ff 100644
--- a/x/application/keeper/application.go
+++ b/x/application/keeper/application.go
@@ -19,36 +19,36 @@ func (k Keeper) SetApplication(ctx sdk.Context, application types.Application) {
 // GetApplication returns a application from its index
 func (k Keeper) GetApplication(
 	ctx sdk.Context,
-	address string,
+	appAddr string,

-) (val types.Application, found bool) {
+) (app types.Application, found bool) {
 	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.ApplicationKeyPrefix))

 	b := store.Get(types.ApplicationKey(
-		address,
+		appAddr,
 	))
 	if b == nil {
-		return val, false
+		return app, false
 	}

-	k.cdc.MustUnmarshal(b, &val)
-	return val, true
+	k.cdc.MustUnmarshal(b, &app)
+	return app, true
 }

 // RemoveApplication removes a application from the store
 func (k Keeper) RemoveApplication(
 	ctx sdk.Context,
-	address string,
+	appAddr string,

 ) {
 	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.ApplicationKeyPrefix))
 	store.Delete(types.ApplicationKey(
-		address,
+		appAddr,
 	))
 }

 // GetAllApplication returns all application
-func (k Keeper) GetAllApplication(ctx sdk.Context) (list []types.Application) {
+func (k Keeper) GetAllApplication(ctx sdk.Context) (apps []types.Application) {
 	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.ApplicationKeyPrefix))
 	iterator := sdk.KVStorePrefixIterator(store, []byte{})

@@ -57,7 +57,7 @@ func (k Keeper) GetAllApplication(ctx sdk.Context) (list []types.Application) {
 	for ; iterator.Valid(); iterator.Next() {
 		var val types.Application
 		k.cdc.MustUnmarshal(iterator.Value(), &val)
-		list = append(list, val)
+		apps = append(apps, val)
 	}

 	return
diff --git a/x/application/keeper/application_test.go b/x/application/keeper/application_test.go
index 76f5ad1..38c16c0 100644
--- a/x/application/keeper/application_test.go
+++ b/x/application/keeper/application_test.go
@@ -1,6 +1,7 @@
 package keeper_test

 import (
+	"fmt"
 	"strconv"
 	"testing"

@@ -11,8 +12,10 @@ import (
 	"pocket/cmd/pocketd/cmd"
 	keepertest "pocket/testutil/keeper"
 	"pocket/testutil/nullify"
+	"pocket/testutil/sample"
 	"pocket/x/application/keeper"
 	"pocket/x/application/types"
+	sharedtypes "pocket/x/shared/types"
 )

 // Prevent strconv unused error
@@ -23,38 +26,44 @@ func init() {
 }

 func createNApplication(keeper *keeper.Keeper, ctx sdk.Context, n int) []types.Application {
-	items := make([]types.Application, n)
-	for i := range items {
-		items[i].Address = strconv.Itoa(i)
-
-		keeper.SetApplication(ctx, items[i])
+	apps := make([]types.Application, n)
+	for i := range apps {
+		app := &apps[i]
+		app.Address = sample.AccAddress()
+		app.Stake = &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(int64(i))}
+		app.ServiceConfigs = []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: fmt.Sprintf("svc%d", i)},
+			},
+		}
+		keeper.SetApplication(ctx, *app)
 	}
-	return items
+	return apps
 }

 func TestApplicationGet(t *testing.T) {
 	keeper, ctx := keepertest.ApplicationKeeper(t)
-	items := createNApplication(keeper, ctx, 10)
-	for _, item := range items {
-		rst, found := keeper.GetApplication(ctx,
-			item.Address,
+	apps := createNApplication(keeper, ctx, 10)
+	for _, app := range apps {
+		appFound, isAppFound := keeper.GetApplication(ctx,
+			app.Address,
 		)
-		require.True(t, found)
+		require.True(t, isAppFound)
 		require.Equal(t,
-			nullify.Fill(&item),
-			nullify.Fill(&rst),
+			nullify.Fill(&app),
+			nullify.Fill(&appFound),
 		)
 }
 func TestMsgServer_StakeApplication_SuccessfulCreateAndUpdate(t *testing.T) {
@@ -28,6 +29,11 @@ func TestMsgServer_StakeApplication_SuccessfulCreateAndUpdate(t *testing.T) {
 	stakeMsg := &types.MsgStakeApplication{
 		Address: addr,
 		Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+			},
+		},
 	}

 	// Stake the application
@@ -39,11 +45,21 @@ func TestMsgServer_StakeApplication_SuccessfulCreateAndUpdate(t *testing.T) {
 	require.True(t, isAppFound)
 	require.Equal(t, addr, foundApp.Address)
 	require.Equal(t, int64(100), foundApp.Stake.Amount.Int64())
+	require.Len(t, foundApp.ServiceConfigs, 1)
+	require.Equal(t, "svc1", foundApp.ServiceConfigs[0].ServiceId.Id)

-	// Prepare an updated application with a higher stake
+	// Prepare an updated application with a higher stake and another service
 	updateStakeMsg := &types.MsgStakeApplication{
 		Address: addr,
 		Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(200)},
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+			},
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc2"},
+			},
+		},
 	}

 	// Update the staked application
@@ -52,6 +68,72 @@ func TestMsgServer_StakeApplication_SuccessfulCreateAndUpdate(t *testing.T) {
 	foundApp, isAppFound = k.GetApplication(ctx, addr)
 	require.True(t, isAppFound)
 	require.Equal(t, int64(200), foundApp.Stake.Amount.Int64())
+	require.Len(t, foundApp.ServiceConfigs, 2)
+	require.Equal(t, "svc1", foundApp.ServiceConfigs[0].ServiceId.Id)
+	require.Equal(t, "svc2", foundApp.ServiceConfigs[1].ServiceId.Id)
+}
+
+func TestMsgServer_StakeApplication_FailRestakingDueToInvalidServices(t *testing.T) {
+	k, ctx := keepertest.ApplicationKeeper(t)
+	srv := keeper.NewMsgServerImpl(*k)
+	wctx := sdk.WrapSDKContext(ctx)
+
+	appAddr := sample.AccAddress()
+
+	// Prepare the application stake message
+	stakeMsg := &types.MsgStakeApplication{
+		Address: appAddr,
+		Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+			},
+		},
+	}
+
+	// Stake the application
+	_, err := srv.StakeApplication(wctx, stakeMsg)
+	require.NoError(t, err)
+
+	// Prepare the application stake message without any services
+	updateStakeMsg := &types.MsgStakeApplication{
+		Address:  appAddr,
+		Stake:    &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+		Services: []*sharedtypes.ApplicationServiceConfig{},
+	}
+
+	// Fail updating the application when the list of services is empty
+	_, err = srv.StakeApplication(wctx, updateStakeMsg)
+	require.Error(t, err)
+
+	// Verify the app still exists and is staked for svc1
+	app, isAppFound := k.GetApplication(ctx, appAddr)
+	require.True(t, isAppFound)
+	require.Equal(t, appAddr, app.Address)
+	require.Len(t, app.ServiceConfigs, 1)
+	require.Equal(t, "svc1", app.ServiceConfigs[0].ServiceId.Id)
+
+	// Prepare the application stake message with an invalid service ID
+	updateStakeMsg = &types.MsgStakeApplication{
+		Address: appAddr,
+		Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1 INVALID ! & *"},
+			},
+		},
+	}
+
+	// Fail updating the application when the list of services is empty
+	_, err = srv.StakeApplication(wctx, updateStakeMsg)
+	require.Error(t, err)
+
+	// Verify the app still exists and is staked for svc1
+	app, isAppFound = k.GetApplication(ctx, appAddr)
+	require.True(t, isAppFound)
+	require.Equal(t, appAddr, app.Address)
+	require.Len(t, app.ServiceConfigs, 1)
+	require.Equal(t, "svc1", app.ServiceConfigs[0].ServiceId.Id)
 }

 func TestMsgServer_StakeApplication_FailLoweringStake(t *testing.T) {
@@ -64,6 +146,11 @@ func TestMsgServer_StakeApplication_FailLoweringStake(t *testing.T) {
 	stakeMsg := &types.MsgStakeApplication{
 		Address: addr,
 		Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+			},
+		},
 	}

 	// Stake the application & verify that the application exists
@@ -76,6 +163,11 @@ func TestMsgServer_StakeApplication_FailLoweringStake(t *testing.T) {
 	updateMsg := &types.MsgStakeApplication{
 		Address: addr,
 		Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(50)},
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+			},
+		},
 	}

 	// Verify that it fails
diff --git a/x/application/keeper/msg_server_unstake_application_test.go b/x/application/keeper/msg_server_unstake_application_test.go
index 7d2a279..9f45647 100644
--- a/x/application/keeper/msg_server_unstake_application_test.go
+++ b/x/application/keeper/msg_server_unstake_application_test.go
@@ -10,6 +10,7 @@ import (
 	"pocket/testutil/sample"
 	"pocket/x/application/keeper"
 	"pocket/x/application/types"
+	sharedtypes "pocket/x/shared/types"
 )

 func TestMsgServer_UnstakeApplication_Success(t *testing.T) {
@@ -29,6 +30,11 @@ func TestMsgServer_UnstakeApplication_Success(t *testing.T) {
 	stakeMsg := &types.MsgStakeApplication{
 		Address: addr,
 		Stake:   &initialStake,
+		Services: []*sharedtypes.ApplicationServiceConfig{
+			{
+				ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+			},
+		},
 	}

 	// Stake the application
@@ -40,6 +46,7 @@ func TestMsgServer_UnstakeApplication_Success(t *testing.T) {
 	require.True(t, isAppFound)
 	require.Equal(t, addr, foundApp.Address)
 	require.Equal(t, initialStake.Amount, foundApp.Stake.Amount)
+	require.Len(t, foundApp.ServiceConfigs, 1)

 	// Unstake the application
 	unstakeMsg := &types.MsgUnstakeApplication{Address: addr}
diff --git a/x/application/types/errors.go b/x/application/types/errors.go
index 94d76cc..0a84948 100644
--- a/x/application/types/errors.go
+++ b/x/application/types/errors.go
@@ -8,8 +8,9 @@ import (

 // x/application module sentinel errors
 var (
-	ErrAppInvalidStake   = sdkerrors.Register(ModuleName, 1, "invalid application stake")
-	ErrAppInvalidAddress = sdkerrors.Register(ModuleName, 2, "invalid application address")
-	ErrAppUnauthorized   = sdkerrors.Register(ModuleName, 3, "unauthorized application signer")
-	ErrAppNotFound       = sdkerrors.Register(ModuleName, 4, "application not found")
+	ErrAppInvalidStake          = sdkerrors.Register(ModuleName, 1, "invalid application stake")
+	ErrAppInvalidAddress        = sdkerrors.Register(ModuleName, 2, "invalid application address")
+	ErrAppUnauthorized          = sdkerrors.Register(ModuleName, 3, "unauthorized application signer")
+	ErrAppNotFound              = sdkerrors.Register(ModuleName, 4, "application not found")
+	ErrAppInvalidServiceConfigs = sdkerrors.Register(ModuleName, 5, "invalid service configs")
 )
diff --git a/x/application/types/genesis.go b/x/application/types/genesis.go
index b42c407..1d8d5f8 100644
--- a/x/application/types/genesis.go
+++ b/x/application/types/genesis.go
@@ -5,6 +5,8 @@ import (

 	sdkerrors "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
+
+	servicehelpers "pocket/x/shared/helpers"
 )

 // DefaultIndex is the default global index
@@ -34,6 +36,8 @@ func (gs GenesisState) Validate() error {

 	// Check that the stake value for the apps is valid
 	for _, app := range gs.ApplicationList {
+		// TODO_TECHDEBT: Consider creating shared helpers across the board for stake validation,
+		// similar to how we have `AreValidAppServiceConfigs` below
 		if app.Stake == nil {
 			return sdkerrors.Wrapf(ErrAppInvalidStake, "nil stake amount for application")
 		}
@@ -50,6 +54,12 @@ func (gs GenesisState) Validate() error {
 		if stake.Denom != "upokt" {
 			return sdkerrors.Wrapf(ErrAppInvalidStake, "invalid stake amount denom for application %v", app.Stake)
 		}
+
+		// Valid the application service configs
+		// Validate the application service configs
+		if reason, ok := servicehelpers.AreValidAppServiceConfigs(app.ServiceConfigs); !ok {
+			return sdkerrors.Wrapf(ErrAppInvalidStake, reason)
+		}
 	}

 	// this line is used by starport scaffolding # genesis/types/validate
diff --git a/x/application/types/genesis_test.go b/x/application/types/genesis_test.go
index 69bc318..f1eed28 100644
--- a/x/application/types/genesis_test.go
+++ b/x/application/types/genesis_test.go
@@ -8,14 +8,21 @@ import (

 	"pocket/testutil/sample"
 	"pocket/x/application/types"
+	sharedtypes "pocket/x/shared/types"
 )

 func TestGenesisState_Validate(t *testing.T) {
 	addr1 := sample.AccAddress()
 	stake1 := sdk.NewCoin("upokt", sdk.NewInt(100))
+	svc1AppConfig := &sharedtypes.ApplicationServiceConfig{
+		ServiceId: &sharedtypes.ServiceId{Id: "svc1"},
+	}

 	addr2 := sample.AccAddress()
 	stake2 := sdk.NewCoin("upokt", sdk.NewInt(100))
+	svc2AppConfig := &sharedtypes.ApplicationServiceConfig{
+		ServiceId: &sharedtypes.ServiceId{Id: "svc2"},
+	}

 	tests := []struct {
 		desc     string
@@ -33,12 +40,14 @@ func TestGenesisState_Validate(t *testing.T) {

 				ApplicationList: []types.Application{
 					{
-						Address: addr1,
-						Stake:   &stake1,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
 					},
 					{
-						Address: addr2,
-						Stake:   &stake2,
+						Address:        addr2,
+						Stake:          &stake2,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
 					},
 				},
 				// this line is used by starport scaffolding # types/genesis/validField
@@ -50,12 +59,14 @@ func TestGenesisState_Validate(t *testing.T) {
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
-						Address: addr1,
-						Stake:   &stake1,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
 					},
 					{
-						Address: addr2,
-						Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(0)},
+						Address:        addr2,
+						Stake:          &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(0)},
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
 					},
 				},
 			},
@@ -66,12 +77,14 @@ func TestGenesisState_Validate(t *testing.T) {
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
-						Address: addr1,
-						Stake:   &stake1,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
 					},
 					{
-						Address: addr2,
-						Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(-100)},
+						Address:        addr2,
+						Stake:          &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(-100)},
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
 					},
 				},
 			},
@@ -82,12 +95,14 @@ func TestGenesisState_Validate(t *testing.T) {
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
-						Address: addr1,
-						Stake:   &stake1,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
 					},
 					{
-						Address: addr2,
-						Stake:   &sdk.Coin{Denom: "invalid", Amount: sdk.NewInt(100)},
+						Address:        addr2,
+						Stake:          &sdk.Coin{Denom: "invalid", Amount: sdk.NewInt(100)},
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
 					},
 				},
 			},
@@ -98,12 +113,14 @@ func TestGenesisState_Validate(t *testing.T) {
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
-						Address: addr1,
-						Stake:   &stake1,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
 					},
 					{
-						Address: addr2,
-						Stake:   &sdk.Coin{Denom: "", Amount: sdk.NewInt(100)},
+						Address:        addr2,
+						Stake:          &sdk.Coin{Denom: "", Amount: sdk.NewInt(100)},
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
 					},
 				},
 			},
@@ -114,12 +131,14 @@ func TestGenesisState_Validate(t *testing.T) {
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
-						Address: addr1,
-						Stake:   &stake1,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
 					},
 					{
-						Address: addr1,
-						Stake:   &stake2,
+						Address:        addr1,
+						Stake:          &stake2,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
 					},
 				},
 			},
@@ -127,36 +146,115 @@ func TestGenesisState_Validate(t *testing.T) {
 		},
 		{
 			desc: "invalid - due to nil app stake",
+			genState: &types.GenesisState{
+				ApplicationList: []types.Application{
+					{
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
+					},
+					{
+						Address:        addr2,
+						Stake:          nil,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
+					},
+				},
+			},
+			valid: false,
+		},
+		{
+			desc: "invalid - due to missing app stake",
+			genState: &types.GenesisState{
+				ApplicationList: []types.Application{
+					{
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc1AppConfig},
+					},
+					{
+						Address: addr2,
+						// Explicitly missing stake
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{svc2AppConfig},
+					},
+				},
+			},
+			valid: false,
+		},
+		{
+			desc: "invalid - service config not present",
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
 						Address: addr1,
 						Stake:   &stake1,
+						// ServiceConfigs: omitted
 					},
+				},
+			},
+			valid: false,
+		},
+		{
+			desc: "invalid - empty service config",
+			genState: &types.GenesisState{
+				ApplicationList: []types.Application{
 					{
-						Address: addr2,
-						Stake:   nil,
+						Address:        addr1,
+						Stake:          &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{},
 					},
 				},
 			},
 			valid: false,
 		},
 		{
-			desc: "invalid - due to missing app stake",
+			desc: "invalid - service ID too long",
+			genState: &types.GenesisState{
+				ApplicationList: []types.Application{
+					{
+						Address: addr1,
+						Stake:   &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{
+							{ServiceId: &sharedtypes.ServiceId{Id: "12345678901"}},
+						},
+					},
+				},
+			},
+			valid: false,
+		},
+		{
+			desc: "invalid - service name too long",
 			genState: &types.GenesisState{
 				ApplicationList: []types.Application{
 					{
 						Address: addr1,
 						Stake:   &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{
+							{ServiceId: &sharedtypes.ServiceId{
+								Id:   "123",
+								Name: "abcdefghijklmnopqrstuvwxyzab-abcdefghijklmnopqrstuvwxyzab",
+							}},
+						},
 					},
+				},
+			},
+			valid: false,
+		},
+		{
+			desc: "invalid - service ID with invalid characters",
+			genState: &types.GenesisState{
+				ApplicationList: []types.Application{
 					{
-						Address: addr2,
-						// Explicitly missing stake
+						Address: addr1,
+						Stake:   &stake1,
+						ServiceConfigs: []*sharedtypes.ApplicationServiceConfig{
+							{ServiceId: &sharedtypes.ServiceId{Id: "12 45 !"}},
+						},
 					},
 				},
 			},
 			valid: false,
 		},
+
 		// this line is used by starport scaffolding # types/genesis/testcase
 	}
 	for _, tc := range tests {
diff --git a/x/application/types/message_stake_application.go b/x/application/types/message_stake_application.go
index 219a657..f813cb8 100644
--- a/x/application/types/message_stake_application.go
+++ b/x/application/types/message_stake_application.go
@@ -4,6 +4,9 @@ import (
 	sdkerrors "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	types "github.com/cosmos/cosmos-sdk/types"
+
+	servicehelpers "pocket/x/shared/helpers"
+	sharedtypes "pocket/x/shared/types"
 )

 const TypeMsgStakeApplication = "stake_application"
@@ -13,11 +16,22 @@ var _ sdk.Msg = (*MsgStakeApplication)(nil)
 func NewMsgStakeApplication(
 	address string,
 	stake types.Coin,
-
+	serviceIds []string,
 ) *MsgStakeApplication {
+	// Convert the serviceIds to the proper ApplicationServiceConfig type (enables future expansion)
+	appServiceConfigs := make([]*sharedtypes.ApplicationServiceConfig, len(serviceIds))
+	for idx, serviceId := range serviceIds {
+		appServiceConfigs[idx] = &sharedtypes.ApplicationServiceConfig{
+			ServiceId: &sharedtypes.ServiceId{
+				Id: serviceId,
+			},
+		}
+	}
+
 	return &MsgStakeApplication{
-		Address: address,
-		Stake:   &stake,
+		Address:  address,
+		Stake:    &stake,
+		Services: appServiceConfigs,
 	}
 }

@@ -64,7 +78,12 @@ func (msg *MsgStakeApplication) ValidateBasic() error {
 		return sdkerrors.Wrapf(ErrAppInvalidStake, "invalid stake amount for application: %v <= 0", msg.Stake)
 	}
 	if stake.Denom != "upokt" {
-		return sdkerrors.Wrapf(ErrAppInvalidStake, "invalid stake amount denom for application %v", msg.Stake)
+		return sdkerrors.Wrapf(ErrAppInvalidStake, "invalid stake amount denom for application: %v", msg.Stake)
+	}
+
+	// Validate the application service configs
+	if reason, ok := servicehelpers.AreValidAppServiceConfigs(msg.Services); !ok {
+		return sdkerrors.Wrapf(ErrAppInvalidServiceConfigs, reason)
 	}

 	return nil
diff --git a/x/application/types/message_stake_application_test.go b/x/application/types/message_stake_application_test.go
index 3e36098..6b5ceec 100644
--- a/x/application/types/message_stake_application_test.go
+++ b/x/application/types/message_stake_application_test.go
@@ -7,6 +7,7 @@ import (
 	"github.com/stretchr/testify/require"

 	"pocket/testutil/sample"
+	sharedtypes "pocket/x/shared/types"
 )

 func TestMsgStakeApplication_ValidateBasic(t *testing.T) {
@@ -15,18 +16,28 @@ func TestMsgStakeApplication_ValidateBasic(t *testing.T) {
 		msg  MsgStakeApplication
 		err  error
 	}{
+		// address tests
 		{
 			name: "invalid address - nil stake",
 			msg: MsgStakeApplication{
 				Address: "invalid_address",
 				// Stake explicitly nil
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 			err: ErrAppInvalidAddress,
-		}, {
+		},
+
+		// stake related tests
+		{
 			name: "valid address - nil stake",
 			msg: MsgStakeApplication{
 				Address: sample.AccAddress(),
 				// Stake explicitly nil
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 			err: ErrAppInvalidStake,
 		}, {
@@ -34,12 +45,18 @@ func TestMsgStakeApplication_ValidateBasic(t *testing.T) {
 			msg: MsgStakeApplication{
 				Address: sample.AccAddress(),
 				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 		}, {
 			name: "valid address - zero stake",
 			msg: MsgStakeApplication{
 				Address: sample.AccAddress(),
 				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(0)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 			err: ErrAppInvalidStake,
 		}, {
@@ -47,6 +64,9 @@ func TestMsgStakeApplication_ValidateBasic(t *testing.T) {
 			msg: MsgStakeApplication{
 				Address: sample.AccAddress(),
 				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(-100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 			err: ErrAppInvalidStake,
 		}, {
@@ -54,6 +74,9 @@ func TestMsgStakeApplication_ValidateBasic(t *testing.T) {
 			msg: MsgStakeApplication{
 				Address: sample.AccAddress(),
 				Stake:   &sdk.Coin{Denom: "invalid", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 			err: ErrAppInvalidStake,
 		}, {
@@ -61,16 +84,86 @@ func TestMsgStakeApplication_ValidateBasic(t *testing.T) {
 			msg: MsgStakeApplication{
 				Address: sample.AccAddress(),
 				Stake:   &sdk.Coin{Denom: "", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+				},
 			},
 			err: ErrAppInvalidStake,
 		},
+
+		// service related tests
+		{
+			name: "invalid service configs - not present",
+			msg: MsgStakeApplication{
+				Address: sample.AccAddress(),
+				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				// Services: omitted
+			},
+			err: ErrAppInvalidServiceConfigs,
+		},
+		{
+			name: "invalid service configs - empty",
+			msg: MsgStakeApplication{
+				Address:  sample.AccAddress(),
+				Stake:    &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{},
+			},
+			err: ErrAppInvalidServiceConfigs,
+		},
+		{
+			name: "invalid service configs - invalid service ID that's too long",
+			msg: MsgStakeApplication{
+				Address: sample.AccAddress(),
+				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "123456790"}},
+				},
+			},
+			err: ErrAppInvalidServiceConfigs,
+		},
+		{
+			name: "invalid service configs - invalid service Name that's too long",
+			msg: MsgStakeApplication{
+				Address: sample.AccAddress(),
+				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{
+						Id:   "123",
+						Name: "abcdefghijklmnopqrstuvwxyzab-abcdefghijklmnopqrstuvwxyzab",
+					}},
+				},
+			},
+			err: ErrAppInvalidServiceConfigs,
+		},
+		{
+			name: "invalid service configs - invalid service ID that contains invalid characters",
+			msg: MsgStakeApplication{
+				Address: sample.AccAddress(),
+				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "12 45 !"}},
+				},
+			},
+			err: ErrAppInvalidServiceConfigs,
+		},
+		{
+			name: "valid service configs - multiple services",
+			msg: MsgStakeApplication{
+				Address: sample.AccAddress(),
+				Stake:   &sdk.Coin{Denom: "upokt", Amount: sdk.NewInt(100)},
+				Services: []*sharedtypes.ApplicationServiceConfig{
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc1"}},
+					{ServiceId: &sharedtypes.ServiceId{Id: "svc2"}},
+				},
+			},
+		},
 	}

 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			err := tt.msg.ValidateBasic()
 			if tt.err != nil {
-				require.ErrorIs(t, err, tt.err)
+				require.ErrorContains(t, err, tt.err.Error())
 				return
