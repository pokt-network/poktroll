name: Release artifacts

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      custom_tag:
        description: "Optional custom tag to add to the image (will be prefixed with branch name)"
        type: string
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: write  # Needed for GitHub releases
  packages: write  # Needed for Docker registry

jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cgo_variant: ['nocgo', 'cgo']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0" # Per https://github.com/ignite/cli/issues/1674#issuecomment-1144619147

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.3"

      - name: Install cross-compilers for CGO (linux/amd64 + linux/arm64)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu

      - name: install ignite
        # The ignite tarballs are named like ignite_29.0.0-rc.1_Linux_x86_64.tar.gz
        run: make ignite_install

      - name: Install CI dependencies
        run: make install_ci_deps

      # Proto generation is skipped (tracked in repo)
      # - name: Generate protobufs
      #   run: make proto_regen

      - name: Build binaries for specific variant
        run: |
          make ignite_update_ldflags

          # Build cosmovisor (needed by both variants)
          make cosmovisor_cross_compile

          # Build specific variant
          if [[ "${{ matrix.cgo_variant }}" == "cgo" ]]; then
            echo "Building CGO-enabled binaries..."
            make ignite_release_cgo_enabled
          else
            echo "Building CGO-disabled binaries..."
            make ignite_release_cgo_disabled
          fi

          # Repackage and extract
          make ignite_release_repackage
          make ignite_release_extract_binaries

      - name: Free disk space
        run: |
          echo "=== Disk usage before cleanup ==="
          df -h
          # Remove unnecessary tools and files
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          echo "=== Disk usage after cleanup ==="
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set common variables for metadata steps
      - name: Set metadata variables
        id: vars
        run: |
          # Base images
          echo "images=ghcr.io/pokt-network/pocketd,ghcr.io/pokt-network/poktrolld" >> $GITHUB_OUTPUT

          # CGO suffix and dockerfile selection
          if [[ "${{ matrix.cgo_variant }}" == "cgo" ]]; then
            echo "cgo_suffix=-cgo" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.release.cgo" >> $GITHUB_OUTPUT
          else
            echo "cgo_suffix=" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.release" >> $GITHUB_OUTPUT
          fi

          # Event-specific tag suffix
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag_suffix=-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "tag_suffix=-main-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            CUSTOM_TAG="${{ github.inputs.custom_tag }}"
            if [[ -n "$CUSTOM_TAG" ]]; then
              echo "tag_suffix=-${BRANCH_NAME}-prod-${CUSTOM_TAG}" >> $GITHUB_OUTPUT
            else
              echo "tag_suffix=-${BRANCH_NAME}-prod" >> $GITHUB_OUTPUT
            fi
          fi

      # Extract branch name for workflow_dispatch
      - name: Extract branch name
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      # Unified Docker Metadata action
      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_PR_HEAD_SHA: "true"
        with:
          # TODO_MAINNET_MIGRATION(@okdas): Remove poktrolld
          images: ${{ steps.vars.outputs.images }}
          tags: |
            # For version tags
            type=semver,pattern={{version}},suffix=${{ steps.vars.outputs.cgo_suffix }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ steps.vars.outputs.cgo_suffix }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

            # For all events - prod tags with sha
            type=ref,event=tag,suffix=${{ steps.vars.outputs.tag_suffix }}${{ steps.vars.outputs.cgo_suffix }}
            type=sha,suffix=${{ steps.vars.outputs.tag_suffix }}${{ steps.vars.outputs.cgo_suffix }}
            type=sha,format=long,suffix=${{ steps.vars.outputs.tag_suffix }}${{ steps.vars.outputs.cgo_suffix }}

            # For main branch
            type=raw,value=main-prod${{ steps.vars.outputs.cgo_suffix }},enable=${{ github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch' }}

            # For manual dispatch
            type=raw,value=${{ env.BRANCH_NAME }}-prod${{ steps.vars.outputs.cgo_suffix }}${{ github.inputs.custom_tag != '' && format('-{0}', github.inputs.custom_tag) || '' }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Unified Docker build and push
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          file: ${{ steps.vars.outputs.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .

      # Attach artifacts to GitHub release (both variants upload)
      - name: Add release and publish binaries
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2.3.2
        with:
          files: release/*
