name: Temp CI job

on:
  push:
    branches: ["main"]
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.ref_name }}-tmp
  cancel-in-progress: true

env:
  GKE_CLUSTER: protocol-us-central1
  GKE_ZONE: us-central1

jobs:
  id:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: "0" # Per https://github.com/ignite/cli/issues/1674#issuecomment-1144619147

      - name: Set up Cloud SDK
        if: contains(github.event.pull_request.labels.*.name, 'devnet-test-e2e')
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          service_account_key: ${{ secrets.GKE_PROTOCOL_US_CENTRAL }}
          project_id: ${{ secrets.GKE_PROTOCOL_PROJECT }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GKE_PROTOCOL_US_CENTRAL }}'

      - uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ secrets.GKE_PROTOCOL_PROJECT }}
      
      - run: kubectl get jobs

      - name: Template Kubernetes Job Manifest
        env:
          GITHUB_ISSUE: ${{ github.event.number }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |

          ls -la 
          ls -la .github

          envsubst < .github/workflows-helpers/run-e2e-test-job-template.yaml > job.yaml

          kubectl apply -f job.yaml

          NAMESPACE=devnet-issue-${GITHUB_ISSUE}
          JOB_NAME=run-e2e-test

          # Wait for the pod to be created
          while [[ -z $(kubectl get pods -n ${NAMESPACE} --selector=job-name=${JOB_NAME} -o jsonpath='{.items[0].metadata.name}') ]]; do
            echo "Waiting for the pod to be created..."
            sleep 5
          done

          # Get the pod name
          POD_NAME=$(kubectl get pods -n ${NAMESPACE} --selector=job-name=${JOB_NAME} -o jsonpath='{.items[0].metadata.name}')

          # Stream the pod logs
          kubectl logs -f ${POD_NAME} -n ${NAMESPACE}

          # Check the job status after the logs finish streaming
          if ! kubectl wait --for=condition=complete --timeout=600s job/${JOB_NAME} -n ${NAMESPACE}; then
            echo "Job failed"

            kubectl delete job ${JOB_NAME} -n ${NAMESPACE}
            exit 1
          fi

          kubectl delete job ${JOB_NAME} -n ${NAMESPACE}