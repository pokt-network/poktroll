name: Telegram Broadcast New Release

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "If true, only send to testing group"
        required: false
        type: boolean
        default: false

jobs:
  notify:
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.prepare_message.outputs.message }}
    steps:
      - name: Get latest release
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // "Unnamed Release"')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url // ""')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""')

          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare release message
        id: prepare_message
        run: |
          set -euo pipefail

          RELEASE_NAME="v0.1.26"
          RELEASE_URL="https://github.com/pokt-network/poktroll/releases/tag/v0.1.26"
          RELEASE_BODY="Empty2"

          escape_markdown() {
            echo "$1" | sed -E 's/([_\*\[\]\(\)~`>#+\-=|{}.!\\])/\\\1/g'
          }

          convert_markdown_to_markdownv2() {
            echo "$1" | \
              sed -E 's/\*\*([^*]+)\*\*/\\*\\*\1\\*\\*/g' | \
              sed -E 's/\*([^*]+)\*/\\*\1\\*/g' | \
              sed -E 's/`([^`]+)`/\\`\1\\`/g' | \
              sed -E 's/\[([^\]]+)\]\(([^\)]+)\)/[\1](\2)/g'
          }

          SAFE_BODY=$(escape_markdown "$RELEASE_BODY")
          TELEGRAM_BODY=$(convert_markdown_to_markdownv2 "$SAFE_BODY")

          if [ -z "$TELEGRAM_BODY" ]; then
            TELEGRAM_BODY="_No additional release notes provided_"
          fi

          ESCAPED_NAME=$(escape_markdown "$RELEASE_NAME")
          ESCAPED_URL=$(escape_markdown "$RELEASE_URL")

          if [ "${{ inputs.test_mode }}" = "true" ]; then
            MESSAGE=$(printf "ðŸ§ª *TEST RELEASE NOTIFICATION* ðŸ§ª\n\nðŸ“£ The *%s* release is live! ðŸ“£\n[View the full release here](%s)\n\n%s" "$ESCAPED_NAME" "$ESCAPED_URL" "$TELEGRAM_BODY")
          else
            MESSAGE=$(printf "ðŸ“£ The *%s* release is live! ðŸ“£\n[View the full release here](%s)\n\n%s" "$ESCAPED_NAME" "$ESCAPED_URL" "$TELEGRAM_BODY")
          fi

          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  send-release:
    needs: notify
    uses: ./.github/workflows/telegram-send-message.yml
    with:
      message: ${{ needs.notify.outputs.message }}
      parse_mode: "MarkdownV2"
      test_mode: ${{ inputs.test_mode }}
