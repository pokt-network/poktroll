// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/proof/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventClaimCreated struct {
	Claim                    *Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	NumRelays                uint64 `protobuf:"varint,2,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	NumClaimedComputeUnits   uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	ClaimedUpokt             string `protobuf:"bytes,7,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt"`
}

func (m *EventClaimCreated) Reset()         { *m = EventClaimCreated{} }
func (m *EventClaimCreated) String() string { return proto.CompactTextString(m) }
func (*EventClaimCreated) ProtoMessage()    {}
func (*EventClaimCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b0d5529f1c9df4, []int{0}
}
func (m *EventClaimCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimCreated.Merge(m, src)
}
func (m *EventClaimCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimCreated proto.InternalMessageInfo

func (m *EventClaimCreated) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventClaimCreated) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventClaimCreated) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventClaimCreated) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventClaimCreated) GetClaimedUpokt() string {
	if m != nil {
		return m.ClaimedUpokt
	}
	return ""
}

// TODO_TEST: Add coverage for claim updates.
type EventClaimUpdated struct {
	Claim                    *Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	NumRelays                uint64 `protobuf:"varint,2,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	NumClaimedComputeUnits   uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	ClaimedUpokt             string `protobuf:"bytes,7,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt"`
}

func (m *EventClaimUpdated) Reset()         { *m = EventClaimUpdated{} }
func (m *EventClaimUpdated) String() string { return proto.CompactTextString(m) }
func (*EventClaimUpdated) ProtoMessage()    {}
func (*EventClaimUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b0d5529f1c9df4, []int{1}
}
func (m *EventClaimUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimUpdated.Merge(m, src)
}
func (m *EventClaimUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimUpdated proto.InternalMessageInfo

func (m *EventClaimUpdated) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventClaimUpdated) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventClaimUpdated) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventClaimUpdated) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventClaimUpdated) GetClaimedUpokt() string {
	if m != nil {
		return m.ClaimedUpokt
	}
	return ""
}

type EventProofSubmitted struct {
	Claim                    *Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	NumRelays                uint64 `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	NumClaimedComputeUnits   uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	ClaimedUpokt             string `protobuf:"bytes,7,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt"`
}

func (m *EventProofSubmitted) Reset()         { *m = EventProofSubmitted{} }
func (m *EventProofSubmitted) String() string { return proto.CompactTextString(m) }
func (*EventProofSubmitted) ProtoMessage()    {}
func (*EventProofSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b0d5529f1c9df4, []int{2}
}
func (m *EventProofSubmitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProofSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventProofSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProofSubmitted.Merge(m, src)
}
func (m *EventProofSubmitted) XXX_Size() int {
	return m.Size()
}
func (m *EventProofSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProofSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_EventProofSubmitted proto.InternalMessageInfo

func (m *EventProofSubmitted) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventProofSubmitted) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventProofSubmitted) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventProofSubmitted) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventProofSubmitted) GetClaimedUpokt() string {
	if m != nil {
		return m.ClaimedUpokt
	}
	return ""
}

// TODO_TEST: Add coverage for proof updates.
type EventProofUpdated struct {
	Claim                    *Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	NumRelays                uint64 `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	NumClaimedComputeUnits   uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	ClaimedUpokt             string `protobuf:"bytes,7,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt"`
}

func (m *EventProofUpdated) Reset()         { *m = EventProofUpdated{} }
func (m *EventProofUpdated) String() string { return proto.CompactTextString(m) }
func (*EventProofUpdated) ProtoMessage()    {}
func (*EventProofUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b0d5529f1c9df4, []int{3}
}
func (m *EventProofUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProofUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventProofUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProofUpdated.Merge(m, src)
}
func (m *EventProofUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventProofUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProofUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventProofUpdated proto.InternalMessageInfo

func (m *EventProofUpdated) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventProofUpdated) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventProofUpdated) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventProofUpdated) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventProofUpdated) GetClaimedUpokt() string {
	if m != nil {
		return m.ClaimedUpokt
	}
	return ""
}

// Event emitted after a proof has been checked for validity in the proof module's
// EndBlocker.
type EventProofValidityChecked struct {
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height"`
	// reason is the string representation of the error that led to the proof being
	// marked as invalid (e.g. "invalid closest merkle proof", "invalid relay request signature")
	FailureReason string `protobuf:"bytes,4,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason"`
	// The session ID which this claim corresponds to.
	SessionId string `protobuf:"bytes,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Supplier operator address, which when combined with session ID,
	// is sufficient to query for the corresponding claim.
	SupplierOperatorAddress string `protobuf:"bytes,7,opt,name=supplier_operator_address,json=supplierOperatorAddress,proto3" json:"supplier_operator_address,omitempty"`
}

func (m *EventProofValidityChecked) Reset()         { *m = EventProofValidityChecked{} }
func (m *EventProofValidityChecked) String() string { return proto.CompactTextString(m) }
func (*EventProofValidityChecked) ProtoMessage()    {}
func (*EventProofValidityChecked) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b0d5529f1c9df4, []int{4}
}
func (m *EventProofValidityChecked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProofValidityChecked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventProofValidityChecked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProofValidityChecked.Merge(m, src)
}
func (m *EventProofValidityChecked) XXX_Size() int {
	return m.Size()
}
func (m *EventProofValidityChecked) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProofValidityChecked.DiscardUnknown(m)
}

var xxx_messageInfo_EventProofValidityChecked proto.InternalMessageInfo

func (m *EventProofValidityChecked) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventProofValidityChecked) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *EventProofValidityChecked) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *EventProofValidityChecked) GetSupplierOperatorAddress() string {
	if m != nil {
		return m.SupplierOperatorAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EventClaimCreated)(nil), "pocket.proof.EventClaimCreated")
	proto.RegisterType((*EventClaimUpdated)(nil), "pocket.proof.EventClaimUpdated")
	proto.RegisterType((*EventProofSubmitted)(nil), "pocket.proof.EventProofSubmitted")
	proto.RegisterType((*EventProofUpdated)(nil), "pocket.proof.EventProofUpdated")
	proto.RegisterType((*EventProofValidityChecked)(nil), "pocket.proof.EventProofValidityChecked")
}

func init() { proto.RegisterFile("pocket/proof/event.proto", fileDescriptor_c2b0d5529f1c9df4) }

var fileDescriptor_c2b0d5529f1c9df4 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xeb, 0xd4, 0x49, 0x93, 0x69, 0x5a, 0xa5, 0x6e, 0xf5, 0x7d, 0x4e, 0x51, 0xed, 0x88,
	0x55, 0x36, 0x71, 0x24, 0x8a, 0x90, 0x58, 0x92, 0xa8, 0x12, 0x44, 0x48, 0xa0, 0x29, 0x41, 0x88,
	0x05, 0x96, 0x63, 0x4f, 0x93, 0x51, 0x6c, 0x8f, 0x35, 0x7f, 0x80, 0xbc, 0x05, 0xe2, 0x59, 0x78,
	0x08, 0x96, 0x15, 0xab, 0xae, 0x2c, 0x94, 0xec, 0xbc, 0x42, 0x3c, 0x01, 0x9a, 0xb1, 0x23, 0x92,
	0x48, 0x85, 0x4d, 0xd9, 0x65, 0x95, 0x39, 0xf7, 0xdc, 0x73, 0x27, 0xf3, 0xd3, 0xc8, 0x03, 0xcc,
	0x84, 0xf8, 0x53, 0xc4, 0xbb, 0x09, 0x25, 0xe4, 0xaa, 0x8b, 0xde, 0xa3, 0x98, 0x3b, 0x09, 0x25,
	0x9c, 0x18, 0xf5, 0xdc, 0x71, 0x94, 0x73, 0xda, 0xf4, 0x09, 0x8b, 0x08, 0x73, 0x95, 0xd7, 0xcd,
	0x45, 0xde, 0x78, 0x7a, 0x32, 0x26, 0x63, 0x92, 0xd7, 0xe5, 0xaa, 0xa8, 0xae, 0x0f, 0xe6, 0xb3,
	0x04, 0x15, 0xfd, 0xf7, 0x7f, 0x94, 0xc0, 0xd1, 0x85, 0xdc, 0xa8, 0x1f, 0x7a, 0x38, 0xea, 0x53,
	0xe4, 0x71, 0x14, 0x18, 0x0f, 0x41, 0xd9, 0x97, 0xda, 0xd4, 0x5a, 0x5a, 0x7b, 0xff, 0xc1, 0xb1,
	0xb3, 0xba, 0xbd, 0xa3, 0x5a, 0x7b, 0xb5, 0x2c, 0xb5, 0xf3, 0x2e, 0x98, 0xff, 0x18, 0x1d, 0x00,
	0x62, 0x11, 0xb9, 0x14, 0x85, 0xde, 0x8c, 0x99, 0xa5, 0x96, 0xd6, 0xd6, 0x7b, 0x87, 0x59, 0x6a,
	0xaf, 0x54, 0x61, 0x2d, 0x16, 0x11, 0x54, 0x4b, 0xe3, 0x0d, 0x68, 0x4a, 0x43, 0x65, 0x51, 0xe0,
	0xfa, 0x24, 0x4a, 0x04, 0x47, 0xae, 0x88, 0x31, 0x67, 0xa6, 0xae, 0xd2, 0x67, 0x59, 0x6a, 0xdf,
	0xde, 0x04, 0xff, 0x8b, 0x45, 0xd4, 0xcf, 0x9d, 0x7e, 0x6e, 0x0c, 0x65, 0xdd, 0x78, 0x07, 0xee,
	0xc9, 0x10, 0x62, 0x1c, 0x47, 0xf2, 0x3c, 0x1b, 0xb3, 0xcb, 0x6a, 0xb6, 0x9d, 0xa5, 0xf6, 0x9f,
	0xda, 0xa0, 0x19, 0x8b, 0xe8, 0x62, 0xe9, 0xad, 0xcd, 0x7f, 0x04, 0x0e, 0x96, 0x7f, 0x48, 0x24,
	0x64, 0xca, 0xcd, 0xbd, 0x96, 0xd6, 0xae, 0xf5, 0x8e, 0xb2, 0xd4, 0x5e, 0x37, 0x60, 0xbd, 0x90,
	0x43, 0xa9, 0x06, 0x7a, 0xb5, 0xd2, 0xd8, 0xdb, 0x40, 0x3e, 0x4c, 0x82, 0x2d, 0xf2, 0x7f, 0x8d,
	0xfc, 0x67, 0x09, 0x1c, 0x2b, 0xe4, 0x2f, 0x25, 0xcd, 0x4b, 0x31, 0x8a, 0x30, 0xbf, 0x2b, 0xe8,
	0xbb, 0x5b, 0xe8, 0x7f, 0xb9, 0xe7, 0x0a, 0xfa, 0x5d, 0xde, 0xf3, 0x2d, 0xf2, 0x5b, 0x90, 0x7f,
	0x2e, 0x81, 0xe6, 0x6f, 0xe4, 0xaf, 0xbd, 0x10, 0x07, 0x98, 0xcf, 0xfa, 0x13, 0xe4, 0x4f, 0x51,
	0x60, 0x9c, 0x83, 0xfa, 0x28, 0x24, 0xfe, 0xd4, 0x9d, 0x20, 0x3c, 0x9e, 0xf0, 0xe2, 0x73, 0xd1,
	0xc8, 0x52, 0x7b, 0xad, 0x0e, 0xf7, 0x95, 0x7a, 0xaa, 0x84, 0xf1, 0x18, 0x1c, 0x5e, 0x79, 0x38,
	0x14, 0x14, 0xb9, 0x14, 0x79, 0x8c, 0xc4, 0x8a, 0x5f, 0xad, 0x67, 0x64, 0xa9, 0xbd, 0xe1, 0xc0,
	0x83, 0x42, 0x43, 0x25, 0x8d, 0x33, 0x00, 0x18, 0x62, 0x0c, 0x93, 0xd8, 0xc5, 0x81, 0x59, 0x91,
	0x31, 0x58, 0x2b, 0x2a, 0xcf, 0x02, 0xe3, 0x15, 0x68, 0x32, 0x91, 0x24, 0x21, 0x46, 0xd4, 0x25,
	0x09, 0xa2, 0x1e, 0x27, 0xd4, 0xf5, 0x82, 0x80, 0x22, 0xc6, 0x8a, 0x63, 0x9b, 0xdf, 0xbe, 0x74,
	0x4e, 0x8a, 0xf7, 0xed, 0x49, 0xee, 0x5c, 0x72, 0x8a, 0xe3, 0x31, 0xfc, 0x7f, 0x19, 0x7d, 0x51,
	0x24, 0x0b, 0x7b, 0xa0, 0x57, 0xb5, 0x46, 0x69, 0xa0, 0x57, 0x77, 0x1b, 0xfa, 0x40, 0xaf, 0x96,
	0x1b, 0x95, 0xde, 0xf3, 0xaf, 0x73, 0x4b, 0xbb, 0x9e, 0x5b, 0xda, 0xcd, 0xdc, 0xd2, 0xbe, 0xcf,
	0x2d, 0xed, 0xd3, 0xc2, 0xda, 0xb9, 0x5e, 0x58, 0x3b, 0x37, 0x0b, 0x6b, 0xe7, 0xad, 0x33, 0xc6,
	0x7c, 0x22, 0x46, 0x8e, 0x4f, 0xa2, 0xae, 0x24, 0xd9, 0x89, 0x11, 0xff, 0x40, 0xe8, 0x54, 0x09,
	0x4a, 0xc2, 0xb0, 0xfb, 0x71, 0xf5, 0xd9, 0x1c, 0x55, 0xd4, 0xbb, 0x79, 0xfe, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x14, 0x40, 0x58, 0x98, 0xac, 0x07, 0x00, 0x00,
}

func (m *EventClaimCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedUpokt) > 0 {
		i -= len(m.ClaimedUpokt)
		copy(dAtA[i:], m.ClaimedUpokt)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedUpokt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x10
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventClaimUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedUpokt) > 0 {
		i -= len(m.ClaimedUpokt)
		copy(dAtA[i:], m.ClaimedUpokt)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedUpokt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x10
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProofSubmitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProofSubmitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProofSubmitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedUpokt) > 0 {
		i -= len(m.ClaimedUpokt)
		copy(dAtA[i:], m.ClaimedUpokt)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedUpokt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x18
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProofUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProofUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProofUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedUpokt) > 0 {
		i -= len(m.ClaimedUpokt)
		copy(dAtA[i:], m.ClaimedUpokt)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedUpokt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x18
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProofValidityChecked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProofValidityChecked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProofValidityChecked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierOperatorAddress) > 0 {
		i -= len(m.SupplierOperatorAddress)
		copy(dAtA[i:], m.SupplierOperatorAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOperatorAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventClaimCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	l = len(m.ClaimedUpokt)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventClaimUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	l = len(m.ClaimedUpokt)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventProofSubmitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	l = len(m.ClaimedUpokt)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventProofUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	l = len(m.ClaimedUpokt)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventProofValidityChecked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventClaimCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedUpokt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaimUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedUpokt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProofSubmitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProofSubmitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProofSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedUpokt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProofUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProofUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProofUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedUpokt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProofValidityChecked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProofValidityChecked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProofValidityChecked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
