// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/shared/supplier.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_sortkeys "github.com/cosmos/gogoproto/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Supplier represents an actor in Pocket Network that provides RPC services
type Supplier struct {
	// Owner address that controls the staked funds and receives rewards by default
	// Cannot be updated by the operator
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// Operator address managing the offchain server
	// Immutable for supplier's lifespan - requires unstake/re-stake to change.
	// Can update supplier configs except for owner address.
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// Total amount of staked uPOKT
	Stake *types.Coin `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
	// List of service configurations supported by this supplier
	Services []*SupplierServiceConfig `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	// Session end height when supplier initiated unstaking (0 if not unstaking)
	UnstakeSessionEndHeight uint64 `protobuf:"varint,5,opt,name=unstake_session_end_height,json=unstakeSessionEndHeight,proto3" json:"unstake_session_end_height,omitempty"`
	// List of historical service configuration updates, tracking the suppliers
	// services update and corresponding activation heights.
	ServiceConfigHistory []*ServiceConfigUpdate `protobuf:"bytes,6,rep,name=service_config_history,json=serviceConfigHistory,proto3" json:"service_config_history,omitempty"`
	// service_usage_metrics tracks the onchain services consumed by this supplier.
	ServiceUsageMetrics map[string]*ServiceUsageMetrics `protobuf:"bytes,7,rep,name=service_usage_metrics,json=serviceUsageMetrics,proto3" json:"service_usage_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Supplier) Reset()         { *m = Supplier{} }
func (m *Supplier) String() string { return proto.CompactTextString(m) }
func (*Supplier) ProtoMessage()    {}
func (*Supplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9cf6b0d91d1e18, []int{0}
}
func (m *Supplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Supplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supplier.Merge(m, src)
}
func (m *Supplier) XXX_Size() int {
	return m.Size()
}
func (m *Supplier) XXX_DiscardUnknown() {
	xxx_messageInfo_Supplier.DiscardUnknown(m)
}

var xxx_messageInfo_Supplier proto.InternalMessageInfo

func (m *Supplier) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Supplier) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *Supplier) GetStake() *types.Coin {
	if m != nil {
		return m.Stake
	}
	return nil
}

func (m *Supplier) GetServices() []*SupplierServiceConfig {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Supplier) GetUnstakeSessionEndHeight() uint64 {
	if m != nil {
		return m.UnstakeSessionEndHeight
	}
	return 0
}

func (m *Supplier) GetServiceConfigHistory() []*ServiceConfigUpdate {
	if m != nil {
		return m.ServiceConfigHistory
	}
	return nil
}

func (m *Supplier) GetServiceUsageMetrics() map[string]*ServiceUsageMetrics {
	if m != nil {
		return m.ServiceUsageMetrics
	}
	return nil
}

// ServiceConfigUpdate tracks a change in a supplier's service configurations
// at a specific block height, enabling tracking of configuration changes over time.
// This record helps maintain a complete history of service configs and their availability periods.
type ServiceConfigUpdate struct {
	// Operator address of the supplier corresponding to the service configuration change
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// The specific service configuration that was added, modified or scheduled for removal
	Service *SupplierServiceConfig `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Block height at which this service configuration became active in the network
	ActivationHeight int64 `protobuf:"varint,3,opt,name=activation_height,json=activationHeight,proto3" json:"activation_height,omitempty"`
	// Block height at which this service configuration was deactivated (0 if still active)
	// For service configs scheduled for deactivation:
	// - This field stores the block height when deactivation will occur
	// - After deactivation, the config remains in history only as needed for claim settlement
	// - Once no longer required for settlement, the config is automatically removed by
	//   the EndBlockerPruneSupplierServiceConfigHistory process
	DeactivationHeight int64 `protobuf:"varint,4,opt,name=deactivation_height,json=deactivationHeight,proto3" json:"deactivation_height,omitempty"`
}

func (m *ServiceConfigUpdate) Reset()         { *m = ServiceConfigUpdate{} }
func (m *ServiceConfigUpdate) String() string { return proto.CompactTextString(m) }
func (*ServiceConfigUpdate) ProtoMessage()    {}
func (*ServiceConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9cf6b0d91d1e18, []int{1}
}
func (m *ServiceConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfigUpdate.Merge(m, src)
}
func (m *ServiceConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ServiceConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfigUpdate proto.InternalMessageInfo

func (m *ServiceConfigUpdate) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *ServiceConfigUpdate) GetService() *SupplierServiceConfig {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceConfigUpdate) GetActivationHeight() int64 {
	if m != nil {
		return m.ActivationHeight
	}
	return 0
}

func (m *ServiceConfigUpdate) GetDeactivationHeight() int64 {
	if m != nil {
		return m.DeactivationHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Supplier)(nil), "pocket.shared.Supplier")
	proto.RegisterMapType((map[string]*ServiceUsageMetrics)(nil), "pocket.shared.Supplier.ServiceUsageMetricsEntry")
	proto.RegisterType((*ServiceConfigUpdate)(nil), "pocket.shared.ServiceConfigUpdate")
}

func init() { proto.RegisterFile("pocket/shared/supplier.proto", fileDescriptor_fd9cf6b0d91d1e18) }

var fileDescriptor_fd9cf6b0d91d1e18 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6f, 0xd3, 0x3c,
	0x18, 0x6f, 0xd6, 0x76, 0xdb, 0xeb, 0xbd, 0x13, 0xc5, 0x2d, 0x90, 0x15, 0x14, 0x55, 0x15, 0x87,
	0x22, 0xb4, 0x84, 0x8d, 0xcb, 0x04, 0x02, 0xc1, 0xaa, 0x49, 0xbb, 0xec, 0x92, 0x6a, 0x12, 0xe2,
	0x12, 0xb9, 0xc9, 0x43, 0x6a, 0xda, 0xda, 0x91, 0xed, 0x76, 0xf4, 0x5b, 0xf0, 0x61, 0xf8, 0x10,
	0x1c, 0x27, 0x4e, 0x3b, 0x21, 0xd4, 0xde, 0xf8, 0x14, 0x28, 0xb6, 0xc3, 0xca, 0xba, 0x0a, 0x6e,
	0xb1, 0x7f, 0x7f, 0x9e, 0xe7, 0x97, 0xe7, 0x31, 0x7a, 0x94, 0xf1, 0x78, 0x08, 0x2a, 0x90, 0x03,
	0x22, 0x20, 0x09, 0xe4, 0x24, 0xcb, 0x46, 0x14, 0x84, 0x9f, 0x09, 0xae, 0x38, 0xde, 0x35, 0xa8,
	0x6f, 0xd0, 0xe6, 0x5e, 0xcc, 0xe5, 0x98, 0xcb, 0x48, 0x83, 0x81, 0x39, 0x18, 0x66, 0xd3, 0x33,
	0xa7, 0xa0, 0x4f, 0x24, 0x04, 0xd3, 0x83, 0x3e, 0x28, 0x72, 0x10, 0xc4, 0x9c, 0x32, 0x8b, 0x3f,
	0xbc, 0x51, 0x07, 0xc4, 0x94, 0xc6, 0x60, 0xc1, 0x46, 0xca, 0x53, 0x6e, 0x4c, 0xf3, 0x2f, 0x73,
	0xdb, 0xfe, 0x59, 0x41, 0xdb, 0x3d, 0xdb, 0x0f, 0x7e, 0x85, 0x76, 0xf9, 0x05, 0x03, 0x11, 0x91,
	0x24, 0x11, 0x20, 0xa5, 0xeb, 0xb4, 0x9c, 0xce, 0x7f, 0xc7, 0xee, 0xb7, 0x2f, 0xfb, 0x0d, 0xdb,
	0xc8, 0x5b, 0x83, 0xf4, 0x94, 0xa0, 0x2c, 0x0d, 0xff, 0xd7, 0x74, 0x7b, 0x87, 0xbb, 0xa8, 0xc6,
	0x33, 0x10, 0x44, 0xf1, 0x6b, 0x87, 0x8d, 0xbf, 0x38, 0xdc, 0x29, 0x14, 0x85, 0x49, 0x80, 0xaa,
	0x52, 0x91, 0x21, 0xb8, 0xe5, 0x96, 0xd3, 0xd9, 0x39, 0xdc, 0xf3, 0xad, 0x2c, 0xcf, 0xec, 0xdb,
	0xcc, 0x7e, 0x97, 0x53, 0x16, 0x1a, 0x1e, 0x7e, 0x83, 0xb6, 0x6d, 0x50, 0xe9, 0x56, 0x5a, 0xe5,
	0xce, 0xce, 0xe1, 0x63, 0xff, 0x8f, 0x3f, 0xea, 0x17, 0xf9, 0x7a, 0x86, 0xd6, 0xe5, 0xec, 0x03,
	0x4d, 0xc3, 0xdf, 0x2a, 0xfc, 0x12, 0x35, 0x27, 0x4c, 0x9b, 0x45, 0x12, 0xa4, 0xa4, 0x9c, 0x45,
	0xc0, 0x92, 0x68, 0x00, 0x34, 0x1d, 0x28, 0xb7, 0xda, 0x72, 0x3a, 0x95, 0xf0, 0x81, 0x65, 0xf4,
	0x0c, 0xe1, 0x84, 0x25, 0xa7, 0x1a, 0xc6, 0xef, 0xd0, 0x7d, 0x6b, 0x14, 0xc5, 0xda, 0x38, 0x1a,
	0x50, 0xa9, 0xb8, 0x98, 0xb9, 0x9b, 0xba, 0x99, 0xf6, 0xcd, 0x66, 0x96, 0x9b, 0x38, 0xcf, 0x12,
	0xa2, 0x20, 0x6c, 0xc8, 0xe5, 0xcb, 0x53, 0xa3, 0xc7, 0x09, 0xba, 0x57, 0x38, 0x4f, 0x24, 0x49,
	0x21, 0x1a, 0x83, 0x12, 0x34, 0x96, 0xee, 0x96, 0x36, 0x7e, 0xb6, 0x26, 0x65, 0x51, 0xe1, 0x3c,
	0xd7, 0x9c, 0x19, 0xc9, 0x09, 0x53, 0x62, 0x16, 0xd6, 0xe5, 0x2a, 0xd2, 0xfc, 0x88, 0xdc, 0x75,
	0x02, 0x5c, 0x43, 0xe5, 0x21, 0xcc, 0xcc, 0x16, 0x84, 0xf9, 0x27, 0x3e, 0x42, 0xd5, 0x29, 0x19,
	0x4d, 0x40, 0xcf, 0x75, 0x6d, 0xb8, 0x65, 0xa7, 0xd0, 0x08, 0x5e, 0x6c, 0x1c, 0x39, 0xed, 0xef,
	0x0e, 0xaa, 0xdf, 0x92, 0x1f, 0x3f, 0xb9, 0x65, 0x71, 0x4c, 0xd1, 0x95, 0xf5, 0x78, 0x8d, 0xb6,
	0x6c, 0x0a, 0xdb, 0xc2, 0xbf, 0x0d, 0xbb, 0x10, 0xe1, 0xa7, 0xe8, 0x2e, 0x89, 0x15, 0x9d, 0x12,
	0x95, 0x8f, 0xd9, 0x8e, 0x38, 0x5f, 0xb5, 0x72, 0x58, 0xbb, 0x06, 0xec, 0x6c, 0x03, 0x54, 0x4f,
	0x60, 0x95, 0x5e, 0xd1, 0x74, 0xbc, 0x0c, 0x19, 0xc1, 0xf1, 0xd9, 0xd7, 0xb9, 0xe7, 0x5c, 0xce,
	0x3d, 0xe7, 0x6a, 0xee, 0x39, 0x3f, 0xe6, 0x9e, 0xf3, 0x79, 0xe1, 0x95, 0x2e, 0x17, 0x5e, 0xe9,
	0x6a, 0xe1, 0x95, 0xde, 0x07, 0x29, 0x55, 0x83, 0x49, 0xdf, 0x8f, 0xf9, 0x38, 0xc8, 0xf8, 0x50,
	0xed, 0x33, 0x50, 0x17, 0x5c, 0x0c, 0xf5, 0x41, 0xf0, 0xd1, 0x28, 0xf8, 0x54, 0x3c, 0x5d, 0x35,
	0xcb, 0x40, 0xf6, 0x37, 0xf5, 0x1b, 0x7d, 0xfe, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x7b, 0x89,
	0x03, 0x40, 0x04, 0x00, 0x00,
}

func (m *Supplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceUsageMetrics) > 0 {
		keysForServiceUsageMetrics := make([]string, 0, len(m.ServiceUsageMetrics))
		for k := range m.ServiceUsageMetrics {
			keysForServiceUsageMetrics = append(keysForServiceUsageMetrics, string(k))
		}
		github_com_cosmos_gogoproto_sortkeys.Strings(keysForServiceUsageMetrics)
		for iNdEx := len(keysForServiceUsageMetrics) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ServiceUsageMetrics[string(keysForServiceUsageMetrics[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSupplier(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForServiceUsageMetrics[iNdEx])
			copy(dAtA[i:], keysForServiceUsageMetrics[iNdEx])
			i = encodeVarintSupplier(dAtA, i, uint64(len(keysForServiceUsageMetrics[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSupplier(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ServiceConfigHistory) > 0 {
		for iNdEx := len(m.ServiceConfigHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceConfigHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupplier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UnstakeSessionEndHeight != 0 {
		i = encodeVarintSupplier(dAtA, i, uint64(m.UnstakeSessionEndHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupplier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Stake != nil {
		{
			size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSupplier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintSupplier(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintSupplier(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeactivationHeight != 0 {
		i = encodeVarintSupplier(dAtA, i, uint64(m.DeactivationHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.ActivationHeight != 0 {
		i = encodeVarintSupplier(dAtA, i, uint64(m.ActivationHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSupplier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintSupplier(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSupplier(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupplier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Supplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovSupplier(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovSupplier(uint64(l))
	}
	if m.Stake != nil {
		l = m.Stake.Size()
		n += 1 + l + sovSupplier(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovSupplier(uint64(l))
		}
	}
	if m.UnstakeSessionEndHeight != 0 {
		n += 1 + sovSupplier(uint64(m.UnstakeSessionEndHeight))
	}
	if len(m.ServiceConfigHistory) > 0 {
		for _, e := range m.ServiceConfigHistory {
			l = e.Size()
			n += 1 + l + sovSupplier(uint64(l))
		}
	}
	if len(m.ServiceUsageMetrics) > 0 {
		for k, v := range m.ServiceUsageMetrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSupplier(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSupplier(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSupplier(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ServiceConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovSupplier(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovSupplier(uint64(l))
	}
	if m.ActivationHeight != 0 {
		n += 1 + sovSupplier(uint64(m.ActivationHeight))
	}
	if m.DeactivationHeight != 0 {
		n += 1 + sovSupplier(uint64(m.DeactivationHeight))
	}
	return n
}

func sovSupplier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupplier(x uint64) (n int) {
	return sovSupplier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Supplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupplier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stake == nil {
				m.Stake = &types.Coin{}
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &SupplierServiceConfig{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeSessionEndHeight", wireType)
			}
			m.UnstakeSessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakeSessionEndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceConfigHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceConfigHistory = append(m.ServiceConfigHistory, &ServiceConfigUpdate{})
			if err := m.ServiceConfigHistory[len(m.ServiceConfigHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceUsageMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceUsageMetrics == nil {
				m.ServiceUsageMetrics = make(map[string]*ServiceUsageMetrics)
			}
			var mapkey string
			var mapvalue *ServiceUsageMetrics
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSupplier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSupplier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSupplier
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSupplier
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSupplier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSupplier
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSupplier
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ServiceUsageMetrics{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSupplier(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSupplier
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceUsageMetrics[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupplier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupplier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupplier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupplier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupplier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &SupplierServiceConfig{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationHeight", wireType)
			}
			m.ActivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivationHeight", wireType)
			}
			m.DeactivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeactivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSupplier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupplier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupplier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupplier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupplier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupplier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupplier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupplier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupplier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupplier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupplier = fmt.Errorf("proto: unexpected end of group")
)
