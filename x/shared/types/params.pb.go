// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/shared/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// num_blocks_per_session is the number of blocks between the session start & end heights.
	NumBlocksPerSession uint64 `protobuf:"varint,1,opt,name=num_blocks_per_session,json=numBlocksPerSession,proto3" json:"num_blocks_per_session"`
	// grace_period_end_offset_blocks is the number of blocks, after the session end height,
	// during which the supplier can still service payable relays.
	// Suppliers will need to recreate a claim for the previous session (if already created) to
	// get paid for the additional relays.
	GracePeriodEndOffsetBlocks uint64 `protobuf:"varint,2,opt,name=grace_period_end_offset_blocks,json=gracePeriodEndOffsetBlocks,proto3" json:"grace_period_end_offset_blocks"`
	// claim_window_open_offset_blocks is the number of blocks after the session grace
	// period height, at which the claim window opens.
	ClaimWindowOpenOffsetBlocks uint64 `protobuf:"varint,3,opt,name=claim_window_open_offset_blocks,json=claimWindowOpenOffsetBlocks,proto3" json:"claim_window_open_offset_blocks"`
	// claim_window_close_offset_blocks is the number of blocks after the claim window
	// open height, at which the claim window closes.
	ClaimWindowCloseOffsetBlocks uint64 `protobuf:"varint,4,opt,name=claim_window_close_offset_blocks,json=claimWindowCloseOffsetBlocks,proto3" json:"claim_window_close_offset_blocks"`
	// proof_window_open_offset_blocks is the number of blocks after the claim window
	// close height, at which the proof window opens.
	ProofWindowOpenOffsetBlocks uint64 `protobuf:"varint,5,opt,name=proof_window_open_offset_blocks,json=proofWindowOpenOffsetBlocks,proto3" json:"proof_window_open_offset_blocks"`
	// proof_window_close_offset_blocks is the number of blocks after the proof window
	// open height, at which the proof window closes.
	ProofWindowCloseOffsetBlocks uint64 `protobuf:"varint,6,opt,name=proof_window_close_offset_blocks,json=proofWindowCloseOffsetBlocks,proto3" json:"proof_window_close_offset_blocks"`
	// supplier_unbonding_period_sessions is the number of sessions that a supplier must wait after
	// unstaking before their staked assets are moved to their account balance.
	// Onchain business logic requires, and ensures, that the corresponding block count of the unbonding
	// period will exceed the end of any active claim & proof lifecycles.
	SupplierUnbondingPeriodSessions uint64 `protobuf:"varint,7,opt,name=supplier_unbonding_period_sessions,json=supplierUnbondingPeriodSessions,proto3" json:"supplier_unbonding_period_sessions"`
	// application_unbonding_period_sessions is the number of sessions that an application must wait after
	// unstaking before their staked assets are moved to their account balance.
	// Onchain business logic requires, and ensures, that the corresponding block count of the
	// application unbonding period will exceed the end of its corresponding proof window close height.
	ApplicationUnbondingPeriodSessions uint64 `protobuf:"varint,8,opt,name=application_unbonding_period_sessions,json=applicationUnbondingPeriodSessions,proto3" json:"application_unbonding_period_sessions"`
	// The amount of upokt that a compute unit should translate to when settling a session.
	// DEV_NOTE: This used to be under x/tokenomics but has been moved here to avoid cyclic dependencies.
	ComputeUnitsToTokensMultiplier uint64 `protobuf:"varint,9,opt,name=compute_units_to_tokens_multiplier,json=computeUnitsToTokensMultiplier,proto3" json:"compute_units_to_tokens_multiplier" yaml:"compute_units_to_tokens_multiplier"`
	// gateway_unbonding_period_sessions is the number of sessions that a gateway must wait after
	// unstaking before their staked assets are moved to its account balance.
	GatewayUnbondingPeriodSessions uint64 `protobuf:"varint,10,opt,name=gateway_unbonding_period_sessions,json=gatewayUnbondingPeriodSessions,proto3" json:"gateway_unbonding_period_sessions"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2903b40318a5dde0, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNumBlocksPerSession() uint64 {
	if m != nil {
		return m.NumBlocksPerSession
	}
	return 0
}

func (m *Params) GetGracePeriodEndOffsetBlocks() uint64 {
	if m != nil {
		return m.GracePeriodEndOffsetBlocks
	}
	return 0
}

func (m *Params) GetClaimWindowOpenOffsetBlocks() uint64 {
	if m != nil {
		return m.ClaimWindowOpenOffsetBlocks
	}
	return 0
}

func (m *Params) GetClaimWindowCloseOffsetBlocks() uint64 {
	if m != nil {
		return m.ClaimWindowCloseOffsetBlocks
	}
	return 0
}

func (m *Params) GetProofWindowOpenOffsetBlocks() uint64 {
	if m != nil {
		return m.ProofWindowOpenOffsetBlocks
	}
	return 0
}

func (m *Params) GetProofWindowCloseOffsetBlocks() uint64 {
	if m != nil {
		return m.ProofWindowCloseOffsetBlocks
	}
	return 0
}

func (m *Params) GetSupplierUnbondingPeriodSessions() uint64 {
	if m != nil {
		return m.SupplierUnbondingPeriodSessions
	}
	return 0
}

func (m *Params) GetApplicationUnbondingPeriodSessions() uint64 {
	if m != nil {
		return m.ApplicationUnbondingPeriodSessions
	}
	return 0
}

func (m *Params) GetComputeUnitsToTokensMultiplier() uint64 {
	if m != nil {
		return m.ComputeUnitsToTokensMultiplier
	}
	return 0
}

func (m *Params) GetGatewayUnbondingPeriodSessions() uint64 {
	if m != nil {
		return m.GatewayUnbondingPeriodSessions
	}
	return 0
}

// ParamsUpdate defines the parameters update along with the block height at which
// the update is effective.
// This mechanism enables governance to schedule parameter changes that take effect
// at a specified future block height, providing transparency and allowing network
// participants time to prepare for the changes.
type ParamsUpdate struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// activation_height specifies the block height at which these parameters will become effective.
	// Once the blockchain reaches this height, the parameters will automatically activate.
	ActivationHeight int64 `protobuf:"varint,2,opt,name=activation_height,json=activationHeight,proto3" json:"activation_height"`
	// deactivation_height specifies the block height at which these parameters will no longer be effective.
	// - For currently active parameters, this value is set to 0, indicating no scheduled deactivation.
	// - For scheduled future updates, this will be set when another parameter update is scheduled to replace this one.
	DeactivationHeight int64 `protobuf:"varint,3,opt,name=deactivation_height,json=deactivationHeight,proto3" json:"deactivation_height"`
}

func (m *ParamsUpdate) Reset()         { *m = ParamsUpdate{} }
func (m *ParamsUpdate) String() string { return proto.CompactTextString(m) }
func (*ParamsUpdate) ProtoMessage()    {}
func (*ParamsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2903b40318a5dde0, []int{1}
}
func (m *ParamsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ParamsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsUpdate.Merge(m, src)
}
func (m *ParamsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ParamsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsUpdate proto.InternalMessageInfo

func (m *ParamsUpdate) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *ParamsUpdate) GetActivationHeight() int64 {
	if m != nil {
		return m.ActivationHeight
	}
	return 0
}

func (m *ParamsUpdate) GetDeactivationHeight() int64 {
	if m != nil {
		return m.DeactivationHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "pocket.shared.Params")
	proto.RegisterType((*ParamsUpdate)(nil), "pocket.shared.ParamsUpdate")
}

func init() { proto.RegisterFile("pocket/shared/params.proto", fileDescriptor_2903b40318a5dde0) }

var fileDescriptor_2903b40318a5dde0 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x9b, 0xff, 0xf6, 0x2f, 0xcc, 0x80, 0xc4, 0x32, 0x36, 0xaa, 0x6e, 0x8a, 0x47, 0x60,
	0x88, 0x4d, 0xa2, 0x95, 0xe0, 0xb6, 0x63, 0x10, 0xd2, 0x2e, 0xd3, 0xa6, 0x6c, 0x13, 0x12, 0x97,
	0xc8, 0x4d, 0xdc, 0xd4, 0x6a, 0x62, 0x5b, 0xb1, 0x43, 0x99, 0xc4, 0x27, 0xe0, 0xc4, 0x9d, 0x03,
	0x1c, 0x39, 0xee, 0x63, 0xec, 0xb8, 0xe3, 0x4e, 0xd1, 0xd4, 0x1d, 0x86, 0x72, 0xe4, 0x13, 0xa0,
	0xda, 0x29, 0x6d, 0xb7, 0x75, 0xe9, 0x25, 0x72, 0xde, 0xe7, 0xe7, 0xf7, 0xc9, 0xeb, 0x58, 0x0f,
	0xa8, 0x73, 0xe6, 0x77, 0xb1, 0x6c, 0x8a, 0x0e, 0x4a, 0x70, 0xd0, 0xe4, 0x28, 0x41, 0xb1, 0x68,
	0xf0, 0x84, 0x49, 0x66, 0x3e, 0xd2, 0x5a, 0x43, 0x6b, 0xf5, 0x45, 0x14, 0x13, 0xca, 0x9a, 0xea,
	0xa9, 0x89, 0xfa, 0x93, 0x90, 0x85, 0x4c, 0x2d, 0x9b, 0x83, 0x95, 0xae, 0xda, 0xdf, 0x17, 0x40,
	0x75, 0x5f, 0x35, 0x32, 0xf7, 0xc0, 0x0a, 0x4d, 0x63, 0xaf, 0x15, 0x31, 0xbf, 0x2b, 0x3c, 0x8e,
	0x13, 0x4f, 0x60, 0x21, 0x08, 0xa3, 0x35, 0x63, 0xdd, 0x78, 0x35, 0xef, 0xd4, 0xf3, 0x0c, 0x4e,
	0x21, 0xdc, 0x25, 0x9a, 0xc6, 0x8e, 0x2a, 0xef, 0xe3, 0xe4, 0x40, 0x17, 0xcd, 0x36, 0xb0, 0xc2,
	0x04, 0xf9, 0x78, 0x40, 0x12, 0x16, 0x78, 0x98, 0x06, 0x1e, 0x6b, 0xb7, 0x05, 0x96, 0x45, 0x8b,
	0xda, 0x7f, 0xaa, 0xb1, 0x9d, 0x67, 0xb0, 0x84, 0x74, 0xeb, 0x4a, 0xdf, 0x57, 0xf2, 0x7b, 0x1a,
	0xec, 0x29, 0x51, 0x3b, 0x9a, 0x04, 0x40, 0x3f, 0x42, 0x24, 0xf6, 0x7a, 0x84, 0x06, 0xac, 0xe7,
	0x31, 0x8e, 0xe9, 0x35, 0xa3, 0x39, 0x65, 0xf4, 0x3c, 0xcf, 0x60, 0x19, 0xea, 0xae, 0x2a, 0xe0,
	0x83, 0xd2, 0xf7, 0x38, 0xa6, 0x13, 0x56, 0x11, 0x58, 0x9f, 0xd8, 0xef, 0x47, 0x4c, 0xe0, 0x6b,
	0x5e, 0xf3, 0xca, 0xeb, 0x45, 0x9e, 0xc1, 0x52, 0xd6, 0x5d, 0x1b, 0x33, 0x7b, 0x37, 0xd0, 0xaf,
	0x0f, 0xc6, 0x13, 0xc6, 0xda, 0x77, 0x0c, 0xf6, 0xff, 0x68, 0xb0, 0x12, 0xd4, 0x5d, 0x55, 0xc0,
	0xf4, 0xc1, 0x26, 0xf6, 0xdf, 0x36, 0x58, 0x75, 0x34, 0x58, 0x19, 0xeb, 0xae, 0x8d, 0x99, 0xdd,
	0x1c, 0x4c, 0x00, 0x5b, 0xa4, 0x9c, 0x47, 0x04, 0x27, 0x5e, 0x4a, 0x5b, 0x8c, 0x06, 0x84, 0x86,
	0xc3, 0x9f, 0x5f, 0xdc, 0x29, 0x51, 0xbb, 0xa7, 0xfc, 0x5e, 0xe6, 0x19, 0x9c, 0x81, 0x76, 0xe1,
	0x90, 0x39, 0x1a, 0x22, 0xfa, 0xb6, 0x14, 0xb7, 0x51, 0x98, 0x5f, 0xc0, 0x06, 0x1a, 0x10, 0x3e,
	0x92, 0x84, 0xd1, 0x3b, 0x7c, 0xef, 0x2b, 0xdf, 0xcd, 0x3c, 0x83, 0xb3, 0x6d, 0x70, 0xed, 0x31,
	0x6c, 0x9a, 0xfb, 0x0f, 0x03, 0xd8, 0x3e, 0x8b, 0x79, 0x2a, 0xb1, 0x97, 0x52, 0x22, 0x85, 0x27,
	0x99, 0x27, 0x59, 0x17, 0x53, 0xe1, 0xc5, 0x69, 0x24, 0x89, 0xfa, 0xf6, 0xda, 0x82, 0xf2, 0x3e,
	0x18, 0xcc, 0x5c, 0x4e, 0xff, 0xc9, 0xe0, 0xe6, 0x31, 0x8a, 0xa3, 0xed, 0x19, 0x58, 0xdb, 0xb5,
	0x0a, 0xe8, 0x68, 0xc0, 0x1c, 0xb2, 0x43, 0x45, 0xec, 0xfe, 0x03, 0x4c, 0x0e, 0x9e, 0x85, 0x48,
	0xe2, 0x1e, 0x3a, 0xbe, 0xe3, 0x6c, 0x80, 0xfa, 0xbe, 0x8d, 0x3c, 0x83, 0xe5, 0xb0, 0x6b, 0x15,
	0xc8, 0x94, 0x33, 0xd9, 0x86, 0xbf, 0x7f, 0x42, 0xe3, 0xeb, 0xd5, 0xc9, 0xd6, 0x4a, 0x91, 0x6c,
	0x9f, 0x87, 0xd9, 0xa6, 0x23, 0xc9, 0xbe, 0x30, 0xc0, 0x43, 0xbd, 0x3c, 0xe2, 0x01, 0x92, 0xd8,
	0x74, 0x40, 0x55, 0xc7, 0x9e, 0xca, 0xa4, 0x07, 0x6f, 0x96, 0x1b, 0x13, 0xb9, 0xd7, 0xd0, 0xb0,
	0xb3, 0x74, 0x9a, 0xc1, 0x4a, 0x9e, 0xc1, 0x02, 0xfe, 0x75, 0x75, 0xb2, 0x65, 0xb8, 0xc5, 0x8b,
	0xe9, 0x80, 0x45, 0xe4, 0x4b, 0xf2, 0x49, 0xff, 0xd5, 0x0e, 0x26, 0x61, 0x47, 0xaa, 0x24, 0x9a,
	0x73, 0x96, 0xf3, 0x0c, 0xde, 0x14, 0xdd, 0xc7, 0xa3, 0xd2, 0x8e, 0xaa, 0x98, 0x3b, 0x60, 0x29,
	0xc0, 0x37, 0xbb, 0xcc, 0xa9, 0x2e, 0x4f, 0xf3, 0x0c, 0xde, 0x26, 0xbb, 0xe6, 0x78, 0x51, 0x77,
	0x72, 0x76, 0x4f, 0xfb, 0x96, 0x71, 0xd6, 0xb7, 0x8c, 0xf3, 0xbe, 0x65, 0x5c, 0xf4, 0x2d, 0xe3,
	0xdb, 0xa5, 0x55, 0x39, 0xbb, 0xb4, 0x2a, 0xe7, 0x97, 0x56, 0xe5, 0x63, 0x33, 0x24, 0xb2, 0x93,
	0xb6, 0x1a, 0x3e, 0x8b, 0x9b, 0x9c, 0x75, 0xe5, 0x6b, 0x8a, 0x65, 0x8f, 0x25, 0x5d, 0xf5, 0x92,
	0xb0, 0x28, 0x1a, 0x1d, 0x99, 0x3c, 0xe6, 0x58, 0xb4, 0xaa, 0x2a, 0xd6, 0xdf, 0xfe, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0xcf, 0x9a, 0x14, 0xd7, 0x2c, 0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumBlocksPerSession != that1.NumBlocksPerSession {
		return false
	}
	if this.GracePeriodEndOffsetBlocks != that1.GracePeriodEndOffsetBlocks {
		return false
	}
	if this.ClaimWindowOpenOffsetBlocks != that1.ClaimWindowOpenOffsetBlocks {
		return false
	}
	if this.ClaimWindowCloseOffsetBlocks != that1.ClaimWindowCloseOffsetBlocks {
		return false
	}
	if this.ProofWindowOpenOffsetBlocks != that1.ProofWindowOpenOffsetBlocks {
		return false
	}
	if this.ProofWindowCloseOffsetBlocks != that1.ProofWindowCloseOffsetBlocks {
		return false
	}
	if this.SupplierUnbondingPeriodSessions != that1.SupplierUnbondingPeriodSessions {
		return false
	}
	if this.ApplicationUnbondingPeriodSessions != that1.ApplicationUnbondingPeriodSessions {
		return false
	}
	if this.ComputeUnitsToTokensMultiplier != that1.ComputeUnitsToTokensMultiplier {
		return false
	}
	if this.GatewayUnbondingPeriodSessions != that1.GatewayUnbondingPeriodSessions {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GatewayUnbondingPeriodSessions != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GatewayUnbondingPeriodSessions))
		i--
		dAtA[i] = 0x50
	}
	if m.ComputeUnitsToTokensMultiplier != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ComputeUnitsToTokensMultiplier))
		i--
		dAtA[i] = 0x48
	}
	if m.ApplicationUnbondingPeriodSessions != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ApplicationUnbondingPeriodSessions))
		i--
		dAtA[i] = 0x40
	}
	if m.SupplierUnbondingPeriodSessions != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SupplierUnbondingPeriodSessions))
		i--
		dAtA[i] = 0x38
	}
	if m.ProofWindowCloseOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofWindowCloseOffsetBlocks))
		i--
		dAtA[i] = 0x30
	}
	if m.ProofWindowOpenOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofWindowOpenOffsetBlocks))
		i--
		dAtA[i] = 0x28
	}
	if m.ClaimWindowCloseOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ClaimWindowCloseOffsetBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.ClaimWindowOpenOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ClaimWindowOpenOffsetBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.GracePeriodEndOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GracePeriodEndOffsetBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.NumBlocksPerSession != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NumBlocksPerSession))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParamsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeactivationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DeactivationHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ActivationHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumBlocksPerSession != 0 {
		n += 1 + sovParams(uint64(m.NumBlocksPerSession))
	}
	if m.GracePeriodEndOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.GracePeriodEndOffsetBlocks))
	}
	if m.ClaimWindowOpenOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ClaimWindowOpenOffsetBlocks))
	}
	if m.ClaimWindowCloseOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ClaimWindowCloseOffsetBlocks))
	}
	if m.ProofWindowOpenOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ProofWindowOpenOffsetBlocks))
	}
	if m.ProofWindowCloseOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ProofWindowCloseOffsetBlocks))
	}
	if m.SupplierUnbondingPeriodSessions != 0 {
		n += 1 + sovParams(uint64(m.SupplierUnbondingPeriodSessions))
	}
	if m.ApplicationUnbondingPeriodSessions != 0 {
		n += 1 + sovParams(uint64(m.ApplicationUnbondingPeriodSessions))
	}
	if m.ComputeUnitsToTokensMultiplier != 0 {
		n += 1 + sovParams(uint64(m.ComputeUnitsToTokensMultiplier))
	}
	if m.GatewayUnbondingPeriodSessions != 0 {
		n += 1 + sovParams(uint64(m.GatewayUnbondingPeriodSessions))
	}
	return n
}

func (m *ParamsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.ActivationHeight != 0 {
		n += 1 + sovParams(uint64(m.ActivationHeight))
	}
	if m.DeactivationHeight != 0 {
		n += 1 + sovParams(uint64(m.DeactivationHeight))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocksPerSession", wireType)
			}
			m.NumBlocksPerSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocksPerSession |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodEndOffsetBlocks", wireType)
			}
			m.GracePeriodEndOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriodEndOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimWindowOpenOffsetBlocks", wireType)
			}
			m.ClaimWindowOpenOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimWindowOpenOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimWindowCloseOffsetBlocks", wireType)
			}
			m.ClaimWindowCloseOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimWindowCloseOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofWindowOpenOffsetBlocks", wireType)
			}
			m.ProofWindowOpenOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofWindowOpenOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofWindowCloseOffsetBlocks", wireType)
			}
			m.ProofWindowCloseOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofWindowCloseOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierUnbondingPeriodSessions", wireType)
			}
			m.SupplierUnbondingPeriodSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplierUnbondingPeriodSessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationUnbondingPeriodSessions", wireType)
			}
			m.ApplicationUnbondingPeriodSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationUnbondingPeriodSessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeUnitsToTokensMultiplier", wireType)
			}
			m.ComputeUnitsToTokensMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeUnitsToTokensMultiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayUnbondingPeriodSessions", wireType)
			}
			m.GatewayUnbondingPeriodSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayUnbondingPeriodSessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationHeight", wireType)
			}
			m.ActivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivationHeight", wireType)
			}
			m.DeactivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeactivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
