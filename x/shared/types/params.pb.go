// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/shared/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// num_blocks_per_session is the number of blocks between the session start & end heights.
	NumBlocksPerSession uint64 `protobuf:"varint,1,opt,name=num_blocks_per_session,json=numBlocksPerSession,proto3" json:"num_blocks_per_session"`
	// grace_period_end_offset_blocks is the number of blocks, after the session end height,
	// during which the supplier can still service payable relays.
	// Suppliers will need to recreate a claim for the previous session (if already created) to
	// get paid for the additional relays.
	GracePeriodEndOffsetBlocks uint64 `protobuf:"varint,2,opt,name=grace_period_end_offset_blocks,json=gracePeriodEndOffsetBlocks,proto3" json:"grace_period_end_offset_blocks"`
	// claim_window_open_offset_blocks is the number of blocks after the session grace
	// period height, at which the claim window opens.
	ClaimWindowOpenOffsetBlocks uint64 `protobuf:"varint,3,opt,name=claim_window_open_offset_blocks,json=claimWindowOpenOffsetBlocks,proto3" json:"claim_window_open_offset_blocks"`
	// claim_window_close_offset_blocks is the number of blocks after the claim window
	// open height, at which the claim window closes.
	ClaimWindowCloseOffsetBlocks uint64 `protobuf:"varint,4,opt,name=claim_window_close_offset_blocks,json=claimWindowCloseOffsetBlocks,proto3" json:"claim_window_close_offset_blocks"`
	// proof_window_open_offset_blocks is the number of blocks after the claim window
	// close height, at which the proof window opens.
	ProofWindowOpenOffsetBlocks uint64 `protobuf:"varint,5,opt,name=proof_window_open_offset_blocks,json=proofWindowOpenOffsetBlocks,proto3" json:"proof_window_open_offset_blocks"`
	// proof_window_close_offset_blocks is the number of blocks after the proof window
	// open height, at which the proof window closes.
	ProofWindowCloseOffsetBlocks uint64 `protobuf:"varint,6,opt,name=proof_window_close_offset_blocks,json=proofWindowCloseOffsetBlocks,proto3" json:"proof_window_close_offset_blocks"`
	// supplier_unbonding_period_sessions is the number of sessions that a supplier must wait after
	// unstaking before their staked assets are moved to their account balance.
	// On-chain business logic requires, and ensures, that the corresponding block count of the unbonding
	// period will exceed the end of any active claim & proof lifecycles.
	SupplierUnbondingPeriodSessions uint64 `protobuf:"varint,7,opt,name=supplier_unbonding_period_sessions,json=supplierUnbondingPeriodSessions,proto3" json:"supplier_unbonding_period_sessions"`
	// application_transfer_and_unbonding_period_sessions is the number of sessions that an application
	// must wait, after beginning a transfer or unstake operation, before their staked assets are moved
	// to the destination application or their account balance, respectively.
	// On-chain business logic requires, and ensures, that the corresponding block count of the
	// application transfer/unbonding period will exceed the end of its corresponding proof window close height.
	ApplicationTransferAndUnbondingPeriodSessions uint64 `protobuf:"varint,8,opt,name=application_transfer_and_unbonding_period_sessions,json=applicationTransferAndUnbondingPeriodSessions,proto3" json:"application_transfer_and_unbonding_period_sessions"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee6189c7aa51bbf5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNumBlocksPerSession() uint64 {
	if m != nil {
		return m.NumBlocksPerSession
	}
	return 0
}

func (m *Params) GetGracePeriodEndOffsetBlocks() uint64 {
	if m != nil {
		return m.GracePeriodEndOffsetBlocks
	}
	return 0
}

func (m *Params) GetClaimWindowOpenOffsetBlocks() uint64 {
	if m != nil {
		return m.ClaimWindowOpenOffsetBlocks
	}
	return 0
}

func (m *Params) GetClaimWindowCloseOffsetBlocks() uint64 {
	if m != nil {
		return m.ClaimWindowCloseOffsetBlocks
	}
	return 0
}

func (m *Params) GetProofWindowOpenOffsetBlocks() uint64 {
	if m != nil {
		return m.ProofWindowOpenOffsetBlocks
	}
	return 0
}

func (m *Params) GetProofWindowCloseOffsetBlocks() uint64 {
	if m != nil {
		return m.ProofWindowCloseOffsetBlocks
	}
	return 0
}

func (m *Params) GetSupplierUnbondingPeriodSessions() uint64 {
	if m != nil {
		return m.SupplierUnbondingPeriodSessions
	}
	return 0
}

func (m *Params) GetApplicationTransferAndUnbondingPeriodSessions() uint64 {
	if m != nil {
		return m.ApplicationTransferAndUnbondingPeriodSessions
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "poktroll.shared.Params")
}

func init() { proto.RegisterFile("poktroll/shared/params.proto", fileDescriptor_ee6189c7aa51bbf5) }

var fileDescriptor_ee6189c7aa51bbf5 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0x37, 0xba, 0x76, 0x25, 0x17, 0x31, 0x8a, 0x94, 0x6e, 0xc9, 0xac, 0x55, 0x44, 0x84,
	0x6d, 0x40, 0xc1, 0x83, 0x37, 0x2b, 0x1e, 0x3c, 0xb5, 0x44, 0x45, 0xf0, 0x32, 0x4c, 0x93, 0x49,
	0x76, 0x68, 0xf2, 0xff, 0x0f, 0x33, 0x09, 0xd5, 0x57, 0xf0, 0xe4, 0x23, 0xe8, 0x13, 0xe8, 0x63,
	0x78, 0xdc, 0xa3, 0xa7, 0x20, 0xed, 0x41, 0xc9, 0x53, 0x48, 0x26, 0x8d, 0xdb, 0x76, 0xed, 0x46,
	0xbc, 0x94, 0x61, 0xbe, 0xdf, 0xf7, 0xff, 0xe6, 0xa3, 0x33, 0xb1, 0xfb, 0x12, 0x67, 0x99, 0xc2,
	0x24, 0xf1, 0xf4, 0x09, 0x53, 0x3c, 0xf4, 0x24, 0x53, 0x2c, 0xd5, 0x43, 0xa9, 0x30, 0x43, 0xe7,
	0x5a, 0xa3, 0x0e, 0x6b, 0xb5, 0x77, 0x9d, 0xa5, 0x02, 0xd0, 0x33, 0xbf, 0x35, 0xd3, 0xbb, 0x19,
	0x63, 0x8c, 0x66, 0xe9, 0x55, 0xab, 0x7a, 0x77, 0xf0, 0xe5, 0xc0, 0xee, 0x4c, 0xcc, 0x28, 0x67,
	0x6c, 0xdf, 0x82, 0x3c, 0xa5, 0xd3, 0x04, 0x83, 0x99, 0xa6, 0x92, 0x2b, 0xaa, 0xb9, 0xd6, 0x02,
	0xa1, 0x6b, 0x1d, 0x59, 0xf7, 0xf7, 0x47, 0xbd, 0xb2, 0x20, 0x3b, 0x08, 0xff, 0x06, 0xe4, 0xe9,
	0xc8, 0x6c, 0x4f, 0xb8, 0x7a, 0x59, 0x6f, 0x3a, 0x91, 0xed, 0xc6, 0x8a, 0x05, 0xbc, 0x22, 0x05,
	0x86, 0x94, 0x43, 0x48, 0x31, 0x8a, 0x34, 0xcf, 0x56, 0x23, 0xba, 0x97, 0xcc, 0xe0, 0x41, 0x59,
	0x90, 0x16, 0xd2, 0xef, 0x19, 0x7d, 0x62, 0xe4, 0xe7, 0x10, 0x8e, 0x8d, 0x58, 0x27, 0x3a, 0xc2,
	0x26, 0x41, 0xc2, 0x44, 0x4a, 0xe7, 0x02, 0x42, 0x9c, 0x53, 0x94, 0x1c, 0xb6, 0x82, 0x2e, 0x9b,
	0xa0, 0x3b, 0x65, 0x41, 0xda, 0x50, 0xff, 0xd0, 0x00, 0x6f, 0x8c, 0x3e, 0x96, 0x1c, 0x36, 0xa2,
	0x12, 0xfb, 0x68, 0xc3, 0x1f, 0x24, 0xa8, 0xf9, 0x56, 0xd6, 0xbe, 0xc9, 0xba, 0x5b, 0x16, 0xa4,
	0x95, 0xf5, 0xfb, 0x6b, 0x61, 0xcf, 0x2a, 0x7d, 0xbb, 0x98, 0x54, 0x88, 0xd1, 0x05, 0xc5, 0xae,
	0x9c, 0x15, 0x6b, 0x41, 0xfd, 0x43, 0x03, 0xec, 0x2e, 0xb6, 0xe1, 0xff, 0x5b, 0xb1, 0xce, 0x59,
	0xb1, 0x36, 0xd6, 0xef, 0xaf, 0x85, 0x9d, 0x2f, 0xa6, 0xed, 0x81, 0xce, 0xa5, 0x4c, 0x04, 0x57,
	0x34, 0x87, 0x29, 0x42, 0x28, 0x20, 0x6e, 0xfe, 0xfc, 0xd5, 0x9d, 0xd2, 0xdd, 0x03, 0x93, 0x77,
	0xaf, 0x2c, 0xc8, 0x3f, 0xd0, 0x3e, 0x69, 0x98, 0xd7, 0x0d, 0x52, 0xdf, 0x96, 0xd5, 0x6d, 0xd4,
	0xce, 0x67, 0xcb, 0x7e, 0xc8, 0x2a, 0x24, 0x60, 0x99, 0x40, 0xa0, 0x99, 0x62, 0xa0, 0x23, 0xae,
	0x28, 0x83, 0xf0, 0x82, 0x53, 0x5c, 0x35, 0xa7, 0x78, 0x5c, 0x16, 0xe4, 0x3f, 0xdc, 0xfe, 0xf1,
	0x9a, 0xe7, 0xd5, 0xca, 0xf2, 0x14, 0xc2, 0x1d, 0x67, 0x7c, 0x72, 0xfb, 0xd7, 0x27, 0x62, 0x7d,
	0xf8, 0xf9, 0xf5, 0x41, 0xf7, 0xcf, 0x7b, 0x7f, 0xd7, 0xbc, 0xf8, 0xfa, 0x99, 0x8e, 0x5e, 0x7c,
	0x5b, 0xb8, 0xd6, 0xe9, 0xc2, 0xb5, 0x7e, 0x2c, 0x5c, 0xeb, 0xe3, 0xd2, 0xdd, 0x3b, 0x5d, 0xba,
	0x7b, 0xdf, 0x97, 0xee, 0xde, 0x5b, 0x2f, 0x16, 0xd9, 0x49, 0x3e, 0x1d, 0x06, 0x98, 0x7a, 0x95,
	0xfd, 0x18, 0x78, 0x36, 0x47, 0x35, 0xf3, 0xce, 0xcf, 0xca, 0xde, 0x4b, 0xae, 0xa7, 0x1d, 0xf3,
	0x0d, 0x78, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x49, 0x86, 0x2b, 0x5d, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumBlocksPerSession != that1.NumBlocksPerSession {
		return false
	}
	if this.GracePeriodEndOffsetBlocks != that1.GracePeriodEndOffsetBlocks {
		return false
	}
	if this.ClaimWindowOpenOffsetBlocks != that1.ClaimWindowOpenOffsetBlocks {
		return false
	}
	if this.ClaimWindowCloseOffsetBlocks != that1.ClaimWindowCloseOffsetBlocks {
		return false
	}
	if this.ProofWindowOpenOffsetBlocks != that1.ProofWindowOpenOffsetBlocks {
		return false
	}
	if this.ProofWindowCloseOffsetBlocks != that1.ProofWindowCloseOffsetBlocks {
		return false
	}
	if this.SupplierUnbondingPeriodSessions != that1.SupplierUnbondingPeriodSessions {
		return false
	}
	if this.ApplicationTransferAndUnbondingPeriodSessions != that1.ApplicationTransferAndUnbondingPeriodSessions {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplicationTransferAndUnbondingPeriodSessions != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ApplicationTransferAndUnbondingPeriodSessions))
		i--
		dAtA[i] = 0x40
	}
	if m.SupplierUnbondingPeriodSessions != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SupplierUnbondingPeriodSessions))
		i--
		dAtA[i] = 0x38
	}
	if m.ProofWindowCloseOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofWindowCloseOffsetBlocks))
		i--
		dAtA[i] = 0x30
	}
	if m.ProofWindowOpenOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofWindowOpenOffsetBlocks))
		i--
		dAtA[i] = 0x28
	}
	if m.ClaimWindowCloseOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ClaimWindowCloseOffsetBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.ClaimWindowOpenOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ClaimWindowOpenOffsetBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.GracePeriodEndOffsetBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GracePeriodEndOffsetBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.NumBlocksPerSession != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NumBlocksPerSession))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumBlocksPerSession != 0 {
		n += 1 + sovParams(uint64(m.NumBlocksPerSession))
	}
	if m.GracePeriodEndOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.GracePeriodEndOffsetBlocks))
	}
	if m.ClaimWindowOpenOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ClaimWindowOpenOffsetBlocks))
	}
	if m.ClaimWindowCloseOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ClaimWindowCloseOffsetBlocks))
	}
	if m.ProofWindowOpenOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ProofWindowOpenOffsetBlocks))
	}
	if m.ProofWindowCloseOffsetBlocks != 0 {
		n += 1 + sovParams(uint64(m.ProofWindowCloseOffsetBlocks))
	}
	if m.SupplierUnbondingPeriodSessions != 0 {
		n += 1 + sovParams(uint64(m.SupplierUnbondingPeriodSessions))
	}
	if m.ApplicationTransferAndUnbondingPeriodSessions != 0 {
		n += 1 + sovParams(uint64(m.ApplicationTransferAndUnbondingPeriodSessions))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocksPerSession", wireType)
			}
			m.NumBlocksPerSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocksPerSession |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodEndOffsetBlocks", wireType)
			}
			m.GracePeriodEndOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriodEndOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimWindowOpenOffsetBlocks", wireType)
			}
			m.ClaimWindowOpenOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimWindowOpenOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimWindowCloseOffsetBlocks", wireType)
			}
			m.ClaimWindowCloseOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimWindowCloseOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofWindowOpenOffsetBlocks", wireType)
			}
			m.ProofWindowOpenOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofWindowOpenOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofWindowCloseOffsetBlocks", wireType)
			}
			m.ProofWindowCloseOffsetBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofWindowCloseOffsetBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierUnbondingPeriodSessions", wireType)
			}
			m.SupplierUnbondingPeriodSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplierUnbondingPeriodSessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationTransferAndUnbondingPeriodSessions", wireType)
			}
			m.ApplicationTransferAndUnbondingPeriodSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationTransferAndUnbondingPeriodSessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
