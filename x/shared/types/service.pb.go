// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/shared/service.proto

// NOTE that the `shared` package is not a Cosmos module,
// but rather a manually created package to resolve circular type dependencies.

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enum to define RPC types
type RPCType int32

const (
	RPCType_UNKNOWN_RPC RPCType = 0
	RPCType_GRPC        RPCType = 1
	RPCType_WEBSOCKET   RPCType = 2
	RPCType_JSON_RPC    RPCType = 3
	RPCType_REST        RPCType = 4
	RPCType_COMET_BFT   RPCType = 5
)

var RPCType_name = map[int32]string{
	0: "UNKNOWN_RPC",
	1: "GRPC",
	2: "WEBSOCKET",
	3: "JSON_RPC",
	4: "REST",
	5: "COMET_BFT",
}

var RPCType_value = map[string]int32{
	"UNKNOWN_RPC": 0,
	"GRPC":        1,
	"WEBSOCKET":   2,
	"JSON_RPC":    3,
	"REST":        4,
	"COMET_BFT":   5,
}

func (x RPCType) String() string {
	return proto.EnumName(RPCType_name, int32(x))
}

func (RPCType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{0}
}

// Enum to define configuration options
// TODO_RESEARCH: Should these be configs, SLAs or something else? There will be more discussion once we get closer to implementing onchain QoS.
type ConfigOptions int32

const (
	ConfigOptions_UNKNOWN_CONFIG ConfigOptions = 0
	ConfigOptions_TIMEOUT        ConfigOptions = 1
)

var ConfigOptions_name = map[int32]string{
	0: "UNKNOWN_CONFIG",
	1: "TIMEOUT",
}

var ConfigOptions_value = map[string]int32{
	"UNKNOWN_CONFIG": 0,
	"TIMEOUT":        1,
}

func (x ConfigOptions) String() string {
	return proto.EnumName(ConfigOptions_name, int32(x))
}

func (ConfigOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{1}
}

// Service message to encapsulate unique and semantic identifiers for a service on the network
//
// Next free index: 6
type Service struct {
	// For example, what if we want to request a session for a certain service but with some additional configs that identify it?
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// TODO_POST_MAINNET: Rename service.name to service.description
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The cost of a single relay for this service in terms of compute units.
	// Must be used alongside the global 'compute_units_to_tokens_multiplier' to calculate the cost of a relay for this service.
	// cost_per_relay_for_specific_service = compute_units_per_relay_for_specific_service * compute_units_to_tokens_multiplier_global_value
	ComputeUnitsPerRelay uint64 `protobuf:"varint,3,opt,name=compute_units_per_relay,json=computeUnitsPerRelay,proto3" json:"compute_units_per_relay,omitempty"`
	// The owner address that created the service.
	// It is the address that receives rewards based on the Service's onchain usage
	// It is the only address that can update the service configuration (e.g. compute_units_per_relay),
	// or make other updates to it.
	OwnerAddress string `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// Optional metadata containing an experimental API specification for the service.
	// When exposed via JSON, this field is base64 encoded and MUST be <= 256 KiB when decoded.
	Metadata *Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{0}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.Size()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetComputeUnitsPerRelay() uint64 {
	if m != nil {
		return m.ComputeUnitsPerRelay
	}
	return 0
}

func (m *Service) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Service) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// ApplicationServiceConfig holds the service configuration the application stakes for
type ApplicationServiceConfig struct {
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (m *ApplicationServiceConfig) Reset()         { *m = ApplicationServiceConfig{} }
func (m *ApplicationServiceConfig) String() string { return proto.CompactTextString(m) }
func (*ApplicationServiceConfig) ProtoMessage()    {}
func (*ApplicationServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{1}
}
func (m *ApplicationServiceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationServiceConfig.Merge(m, src)
}
func (m *ApplicationServiceConfig) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationServiceConfig proto.InternalMessageInfo

func (m *ApplicationServiceConfig) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

// SupplierServiceConfig holds the service configuration the supplier stakes for
type SupplierServiceConfig struct {
	ServiceId string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Endpoints []*SupplierEndpoint    `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	RevShare  []*ServiceRevenueShare `protobuf:"bytes,3,rep,name=rev_share,json=revShare,proto3" json:"rev_share,omitempty"`
}

func (m *SupplierServiceConfig) Reset()         { *m = SupplierServiceConfig{} }
func (m *SupplierServiceConfig) String() string { return proto.CompactTextString(m) }
func (*SupplierServiceConfig) ProtoMessage()    {}
func (*SupplierServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{2}
}
func (m *SupplierServiceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplierServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SupplierServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplierServiceConfig.Merge(m, src)
}
func (m *SupplierServiceConfig) XXX_Size() int {
	return m.Size()
}
func (m *SupplierServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplierServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SupplierServiceConfig proto.InternalMessageInfo

func (m *SupplierServiceConfig) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *SupplierServiceConfig) GetEndpoints() []*SupplierEndpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *SupplierServiceConfig) GetRevShare() []*ServiceRevenueShare {
	if m != nil {
		return m.RevShare
	}
	return nil
}

// SupplierEndpoint message to hold service configuration details
type SupplierEndpoint struct {
	Url     string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	RpcType RPCType         `protobuf:"varint,2,opt,name=rpc_type,json=rpcType,proto3,enum=pocket.shared.RPCType" json:"rpc_type,omitempty"`
	Configs []*ConfigOption `protobuf:"bytes,3,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *SupplierEndpoint) Reset()         { *m = SupplierEndpoint{} }
func (m *SupplierEndpoint) String() string { return proto.CompactTextString(m) }
func (*SupplierEndpoint) ProtoMessage()    {}
func (*SupplierEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{3}
}
func (m *SupplierEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplierEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SupplierEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplierEndpoint.Merge(m, src)
}
func (m *SupplierEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *SupplierEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplierEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_SupplierEndpoint proto.InternalMessageInfo

func (m *SupplierEndpoint) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SupplierEndpoint) GetRpcType() RPCType {
	if m != nil {
		return m.RpcType
	}
	return RPCType_UNKNOWN_RPC
}

func (m *SupplierEndpoint) GetConfigs() []*ConfigOption {
	if m != nil {
		return m.Configs
	}
	return nil
}

// ServiceRevenueShare message to hold revenue share configuration details
type ServiceRevenueShare struct {
	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RevSharePercentage uint64 `protobuf:"varint,3,opt,name=rev_share_percentage,json=revSharePercentage,proto3" json:"rev_share_percentage,omitempty"`
}

func (m *ServiceRevenueShare) Reset()         { *m = ServiceRevenueShare{} }
func (m *ServiceRevenueShare) String() string { return proto.CompactTextString(m) }
func (*ServiceRevenueShare) ProtoMessage()    {}
func (*ServiceRevenueShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{4}
}
func (m *ServiceRevenueShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRevenueShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceRevenueShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRevenueShare.Merge(m, src)
}
func (m *ServiceRevenueShare) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRevenueShare) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRevenueShare.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRevenueShare proto.InternalMessageInfo

func (m *ServiceRevenueShare) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ServiceRevenueShare) GetRevSharePercentage() uint64 {
	if m != nil {
		return m.RevSharePercentage
	}
	return 0
}

// Key-value wrapper for config options, as proto maps can't be keyed by enums
type ConfigOption struct {
	Key   ConfigOptions `protobuf:"varint,1,opt,name=key,proto3,enum=pocket.shared.ConfigOptions" json:"key,omitempty"`
	Value string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ConfigOption) Reset()         { *m = ConfigOption{} }
func (m *ConfigOption) String() string { return proto.CompactTextString(m) }
func (*ConfigOption) ProtoMessage()    {}
func (*ConfigOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{5}
}
func (m *ConfigOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigOption.Merge(m, src)
}
func (m *ConfigOption) XXX_Size() int {
	return m.Size()
}
func (m *ConfigOption) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigOption.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigOption proto.InternalMessageInfo

func (m *ConfigOption) GetKey() ConfigOptions {
	if m != nil {
		return m.Key
	}
	return ConfigOptions_UNKNOWN_CONFIG
}

func (m *ConfigOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Metadata message to hold additional metadata for a service.
// The raw bytes are stored on-chain and will be base64 encoded in JSON representations.
//
// Next free index: 2
type Metadata struct {
	// EXPERIMENTAL: Serialized API spec limited to 256 KiB when decoded.
	// TODO_FUTURE: support dedicated openapi_ / openrpc_ fields once formats stabilize.
	ExperimentalApiSpecs []byte `protobuf:"bytes,1,opt,name=experimental_api_specs,json=experimentalApiSpecs,proto3" json:"experimental_api_specs,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfdeb4ae793ca69, []int{6}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetExperimentalApiSpecs() []byte {
	if m != nil {
		return m.ExperimentalApiSpecs
	}
	return nil
}

func init() {
	proto.RegisterEnum("pocket.shared.RPCType", RPCType_name, RPCType_value)
	proto.RegisterEnum("pocket.shared.ConfigOptions", ConfigOptions_name, ConfigOptions_value)
	proto.RegisterType((*Service)(nil), "pocket.shared.Service")
	proto.RegisterType((*ApplicationServiceConfig)(nil), "pocket.shared.ApplicationServiceConfig")
	proto.RegisterType((*SupplierServiceConfig)(nil), "pocket.shared.SupplierServiceConfig")
	proto.RegisterType((*SupplierEndpoint)(nil), "pocket.shared.SupplierEndpoint")
	proto.RegisterType((*ServiceRevenueShare)(nil), "pocket.shared.ServiceRevenueShare")
	proto.RegisterType((*ConfigOption)(nil), "pocket.shared.ConfigOption")
	proto.RegisterType((*Metadata)(nil), "pocket.shared.Metadata")
}

func init() { proto.RegisterFile("pocket/shared/service.proto", fileDescriptor_4dfdeb4ae793ca69) }

var fileDescriptor_4dfdeb4ae793ca69 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x93, 0x70, 0x93, 0x9c, 0xfc, 0x5c, 0x6b, 0x6e, 0x2e, 0xb8, 0xd0, 0xa6, 0x91, 0x57,
	0x11, 0x12, 0x09, 0x0d, 0x65, 0xd1, 0x05, 0x6a, 0x49, 0x14, 0x10, 0xa0, 0xfc, 0x68, 0x6c, 0x84,
	0xc4, 0xc6, 0x32, 0xf6, 0x34, 0x58, 0x49, 0x3c, 0xa3, 0xb1, 0x13, 0xc8, 0xb2, 0x2f, 0x50, 0xf5,
	0x61, 0xaa, 0x3e, 0x43, 0x97, 0xa8, 0x2b, 0x96, 0x55, 0x78, 0x91, 0x6a, 0xfc, 0x93, 0x42, 0x54,
	0xb5, 0xea, 0xee, 0xcc, 0xf9, 0xbe, 0x33, 0xe7, 0x9c, 0xcf, 0x9f, 0x07, 0xb6, 0x18, 0xb5, 0x46,
	0xc4, 0x6f, 0x78, 0xd7, 0x26, 0x27, 0x76, 0xc3, 0x23, 0x7c, 0xe6, 0x58, 0xa4, 0xce, 0x38, 0xf5,
	0x29, 0x2a, 0x86, 0x60, 0x3d, 0x04, 0x37, 0x9f, 0x59, 0xd4, 0x9b, 0x50, 0xcf, 0x08, 0xc0, 0x46,
	0x78, 0x08, 0x99, 0x9b, 0xe5, 0x21, 0x1d, 0xd2, 0x30, 0x2f, 0xa2, 0x30, 0xab, 0xde, 0x4b, 0x90,
	0xd1, 0xc2, 0x1b, 0x51, 0x09, 0x92, 0x8e, 0xad, 0x48, 0x55, 0xa9, 0x96, 0xc3, 0x49, 0xc7, 0x46,
	0x08, 0xd2, 0xae, 0x39, 0x21, 0x4a, 0x32, 0xc8, 0x04, 0x31, 0xda, 0x87, 0x0d, 0x8b, 0x4e, 0xd8,
	0xd4, 0x27, 0xc6, 0xd4, 0x75, 0x7c, 0xcf, 0x60, 0x84, 0x1b, 0x9c, 0x8c, 0xcd, 0xb9, 0x92, 0xaa,
	0x4a, 0xb5, 0x34, 0x2e, 0x47, 0xf0, 0xb9, 0x40, 0x07, 0x84, 0x63, 0x81, 0xa1, 0x03, 0x28, 0xd2,
	0x1b, 0x97, 0x70, 0xc3, 0xb4, 0x6d, 0x4e, 0x3c, 0x4f, 0x49, 0x8b, 0x3b, 0x5b, 0xca, 0xb7, 0xcf,
	0x3b, 0xe5, 0x68, 0xca, 0xc3, 0x10, 0xd1, 0x7c, 0xee, 0xb8, 0x43, 0x5c, 0x08, 0xe8, 0x51, 0x0e,
	0xed, 0x41, 0x76, 0x42, 0x7c, 0xd3, 0x36, 0x7d, 0x53, 0x59, 0xab, 0x4a, 0xb5, 0x7c, 0x73, 0xa3,
	0xfe, 0x64, 0xf1, 0x7a, 0x37, 0x82, 0xf1, 0x92, 0xa8, 0xbe, 0x01, 0xe5, 0x90, 0xb1, 0xb1, 0x63,
	0x99, 0xbe, 0x43, 0xdd, 0x68, 0xc9, 0x36, 0x75, 0xdf, 0x3b, 0x43, 0xf4, 0x02, 0x20, 0xd2, 0xd1,
	0x58, 0xae, 0x9c, 0x8b, 0x32, 0x27, 0xb6, 0xfa, 0x45, 0x82, 0xff, 0xb5, 0xa9, 0x28, 0x26, 0xfc,
	0x6f, 0x0a, 0xd1, 0x01, 0xe4, 0x88, 0x6b, 0x33, 0xea, 0xb8, 0xbe, 0xa7, 0x24, 0xab, 0xa9, 0x5a,
	0xbe, 0xf9, 0x72, 0x65, 0xd2, 0xf8, 0xde, 0x4e, 0xc4, 0xc3, 0x3f, 0x2b, 0xd0, 0x5b, 0xc8, 0x71,
	0x32, 0x33, 0x02, 0xa6, 0x92, 0x0a, 0xca, 0xd5, 0xd5, 0xf2, 0xb0, 0x17, 0x26, 0x33, 0xe2, 0x4e,
	0x89, 0x26, 0x92, 0x38, 0xcb, 0xc9, 0x2c, 0x88, 0xd4, 0x8f, 0x12, 0xc8, 0xab, 0x0d, 0x90, 0x0c,
	0xa9, 0x29, 0x1f, 0x47, 0xc3, 0x8a, 0x10, 0xbd, 0x82, 0x2c, 0x67, 0x96, 0xe1, 0xcf, 0x59, 0xf8,
	0x75, 0x4b, 0xcd, 0xf5, 0x95, 0x36, 0x78, 0xd0, 0xd6, 0xe7, 0x8c, 0xe0, 0x0c, 0x67, 0x96, 0x08,
	0xd0, 0x3e, 0x64, 0xac, 0x40, 0x02, 0x2f, 0x1a, 0x6c, 0x6b, 0xa5, 0x22, 0x14, 0xa8, 0xcf, 0x84,
	0xd8, 0x38, 0xe6, 0xaa, 0x1f, 0x24, 0xf8, 0xef, 0x17, 0x23, 0xa3, 0x26, 0x64, 0x62, 0x2b, 0x48,
	0x7f, 0xb0, 0x42, 0x4c, 0x44, 0xbb, 0x50, 0x5e, 0xaa, 0x23, 0x7c, 0x67, 0x11, 0xd7, 0x37, 0x87,
	0x24, 0x32, 0x1e, 0x8a, 0x45, 0x18, 0x2c, 0x91, 0xd3, 0x74, 0x36, 0x29, 0xa7, 0x54, 0x1d, 0x0a,
	0x8f, 0x87, 0x43, 0x75, 0x48, 0x8d, 0xc8, 0x3c, 0xe8, 0x5b, 0x6a, 0x3e, 0xff, 0xcd, 0x1a, 0x1e,
	0x16, 0x44, 0x54, 0x86, 0xb5, 0x99, 0x39, 0x9e, 0xc6, 0x3f, 0x42, 0x78, 0x50, 0xdf, 0x41, 0x36,
	0x36, 0x1d, 0x7a, 0x0d, 0xeb, 0xe4, 0x96, 0x11, 0xee, 0x4c, 0x44, 0xe3, 0xb1, 0x61, 0x32, 0xc7,
	0xf0, 0x18, 0xb1, 0xc2, 0xe5, 0x0a, 0xb8, 0xfc, 0x18, 0x3d, 0x64, 0x8e, 0x26, 0xb0, 0xed, 0x4b,
	0xc8, 0x44, 0x32, 0xa3, 0x7f, 0x21, 0x7f, 0xde, 0x3b, 0xeb, 0xf5, 0x2f, 0x7a, 0x06, 0x1e, 0xb4,
	0xe5, 0x04, 0xca, 0x42, 0xfa, 0x58, 0x44, 0x12, 0x2a, 0x42, 0xee, 0xa2, 0xd3, 0xd2, 0xfa, 0xed,
	0xb3, 0x8e, 0x2e, 0x27, 0x51, 0x01, 0xb2, 0xa7, 0x5a, 0x3f, 0xa4, 0xa5, 0x04, 0x0d, 0x77, 0x34,
	0x5d, 0x4e, 0x0b, 0x5a, 0xbb, 0xdf, 0xed, 0xe8, 0x46, 0xeb, 0x48, 0x97, 0xd7, 0xb6, 0x77, 0xa1,
	0xf8, 0x64, 0x13, 0x84, 0xa0, 0x14, 0x77, 0x68, 0xf7, 0x7b, 0x47, 0x27, 0xc7, 0x72, 0x02, 0xe5,
	0x21, 0xa3, 0x9f, 0x74, 0x3b, 0xfd, 0x73, 0x5d, 0x96, 0x5a, 0xdd, 0xaf, 0x8b, 0x8a, 0x74, 0xb7,
	0xa8, 0x48, 0xf7, 0x8b, 0x8a, 0xf4, 0x7d, 0x51, 0x91, 0x3e, 0x3d, 0x54, 0x12, 0x77, 0x0f, 0x95,
	0xc4, 0xfd, 0x43, 0x25, 0x71, 0xd9, 0x18, 0x3a, 0xfe, 0xf5, 0xf4, 0xaa, 0x6e, 0xd1, 0x49, 0x83,
	0xd1, 0x91, 0xbf, 0xe3, 0x12, 0xff, 0x86, 0xf2, 0x51, 0x70, 0xe0, 0x74, 0x3c, 0x6e, 0xdc, 0xc6,
	0x0f, 0x94, 0x70, 0x95, 0x77, 0xf5, 0x4f, 0xf0, 0xbe, 0xec, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x7f, 0xae, 0x80, 0xb6, 0xbe, 0x04, 0x00, 0x00,
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintService(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ComputeUnitsPerRelay != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ComputeUnitsPerRelay))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationServiceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationServiceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationServiceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplierServiceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplierServiceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplierServiceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RevShare) > 0 {
		for iNdEx := len(m.RevShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RevShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Endpoints) > 0 {
		for iNdEx := len(m.Endpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Endpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplierEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplierEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplierEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RpcType != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RpcType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintService(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceRevenueShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRevenueShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRevenueShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevSharePercentage != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RevSharePercentage))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExperimentalApiSpecs) > 0 {
		i -= len(m.ExperimentalApiSpecs)
		copy(dAtA[i:], m.ExperimentalApiSpecs)
		i = encodeVarintService(dAtA, i, uint64(len(m.ExperimentalApiSpecs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ComputeUnitsPerRelay != 0 {
		n += 1 + sovService(uint64(m.ComputeUnitsPerRelay))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ApplicationServiceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SupplierServiceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.RevShare) > 0 {
		for _, e := range m.RevShare {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SupplierEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RpcType != 0 {
		n += 1 + sovService(uint64(m.RpcType))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ServiceRevenueShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RevSharePercentage != 0 {
		n += 1 + sovService(uint64(m.RevSharePercentage))
	}
	return n
}

func (m *ConfigOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovService(uint64(m.Key))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExperimentalApiSpecs)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeUnitsPerRelay", wireType)
			}
			m.ComputeUnitsPerRelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeUnitsPerRelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationServiceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationServiceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationServiceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplierServiceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplierServiceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplierServiceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &SupplierEndpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevShare = append(m.RevShare, &ServiceRevenueShare{})
			if err := m.RevShare[len(m.RevShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplierEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplierEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplierEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcType", wireType)
			}
			m.RpcType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpcType |= RPCType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigOption{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceRevenueShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRevenueShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRevenueShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevSharePercentage", wireType)
			}
			m.RevSharePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevSharePercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= ConfigOptions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalApiSpecs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExperimentalApiSpecs = append(m.ExperimentalApiSpecs[:0], dAtA[iNdEx:postIndex]...)
			if m.ExperimentalApiSpecs == nil {
				m.ExperimentalApiSpecs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
