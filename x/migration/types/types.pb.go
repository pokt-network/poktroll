// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/types.proto

package types

import (
	crypto_ed25519 "crypto/ed25519"
	fmt "fmt"
	github_com_cometbft_cometbft_crypto "github.com/cometbft/cometbft/crypto"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MorseAccountState is the on-chain representation of the imported account state from Morse.
type MorseAccountState struct {
	Accounts []*MorseAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
}

func (m *MorseAccountState) Reset()         { *m = MorseAccountState{} }
func (m *MorseAccountState) String() string { return proto.CompactTextString(m) }
func (*MorseAccountState) ProtoMessage()    {}
func (*MorseAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed31f79aa0bc330, []int{0}
}
func (m *MorseAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccountState.Merge(m, src)
}
func (m *MorseAccountState) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccountState proto.InternalMessageInfo

func (m *MorseAccountState) GetAccounts() []*MorseAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// MorseAccount is an analog of the Morse ProtoBaseAccount type. It encapsulates
// the minimum information required to import accounts.
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/auth/auth.proto#L14.
type MorseAccount struct {
	Address github_com_cometbft_cometbft_crypto.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cometbft/cometbft/crypto.Address" json:"address"`
	PubKey  *MorsePublicKey                             `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"public_key" yaml:"public_key"`
	Coins   []types.Coin                                `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins"`
}

func (m *MorseAccount) Reset()         { *m = MorseAccount{} }
func (m *MorseAccount) String() string { return proto.CompactTextString(m) }
func (*MorseAccount) ProtoMessage()    {}
func (*MorseAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed31f79aa0bc330, []int{1}
}
func (m *MorseAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccount.Merge(m, src)
}
func (m *MorseAccount) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccount proto.InternalMessageInfo

func (*MorseAccount) XXX_MessageName() string {
	return "poktroll.migration.MorseAccount"
}

// MorsePublicKey is required to conform to the encoding of the Morse state export.
// NB: All Morse account public keys will be ed25519 keys by definition.
type MorsePublicKey struct {
	Value crypto_ed25519.PublicKey `protobuf:"bytes,2,opt,name=value,proto3,casttype=crypto/ed25519.PublicKey" json:"value,omitempty"`
}

func (m *MorsePublicKey) Reset()         { *m = MorsePublicKey{} }
func (m *MorsePublicKey) String() string { return proto.CompactTextString(m) }
func (*MorsePublicKey) ProtoMessage()    {}
func (*MorsePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed31f79aa0bc330, []int{2}
}
func (m *MorsePublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorsePublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorsePublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorsePublicKey.Merge(m, src)
}
func (m *MorsePublicKey) XXX_Size() int {
	return m.Size()
}
func (m *MorsePublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MorsePublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_MorsePublicKey proto.InternalMessageInfo

func (m *MorsePublicKey) GetValue() crypto_ed25519.PublicKey {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*MorseAccountState)(nil), "poktroll.migration.MorseAccountState")
	proto.RegisterType((*MorseAccount)(nil), "poktroll.migration.MorseAccount")
	proto.RegisterType((*MorsePublicKey)(nil), "poktroll.migration.MorsePublicKey")
}

func init() { proto.RegisterFile("poktroll/migration/types.proto", fileDescriptor_7ed31f79aa0bc330) }

var fileDescriptor_7ed31f79aa0bc330 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x2d, 0x6d, 0xd0, 0x35, 0x42, 0xaa, 0x85, 0x44, 0x5a, 0xa1, 0xbb, 0xc8, 0x2c,
	0x91, 0x50, 0xef, 0x14, 0xa3, 0x0c, 0x64, 0xab, 0x61, 0xa2, 0x42, 0xaa, 0x0c, 0x13, 0x4b, 0xb0,
	0x9d, 0x23, 0x58, 0xb1, 0xfd, 0x2c, 0xdf, 0xb9, 0xe0, 0x6f, 0xd0, 0x91, 0x09, 0x31, 0x56, 0x7c,
	0x06, 0x3e, 0x44, 0xc5, 0xd4, 0xb1, 0x93, 0x85, 0x92, 0x2d, 0x23, 0x63, 0x26, 0x64, 0x5f, 0x62,
	0x0c, 0x88, 0xed, 0xfd, 0xdf, 0xfb, 0xff, 0x4f, 0xef, 0x7e, 0x7a, 0x98, 0xa4, 0x30, 0x57, 0x19,
	0x44, 0x11, 0x8f, 0xc3, 0x59, 0xe6, 0xa9, 0x10, 0x12, 0xae, 0x8a, 0x54, 0x48, 0x96, 0x66, 0xa0,
	0xc0, 0x34, 0xb7, 0x73, 0xd6, 0xcc, 0x8f, 0x8f, 0x02, 0x90, 0x31, 0xc8, 0x49, 0xed, 0xe0, 0x5a,
	0x68, 0xfb, 0x31, 0xd1, 0x8a, 0xfb, 0x9e, 0x14, 0xfc, 0x62, 0xe8, 0x0b, 0xe5, 0x0d, 0x79, 0x00,
	0x61, 0xb2, 0x99, 0xdf, 0x9f, 0xc1, 0x0c, 0x74, 0xae, 0xaa, 0x74, 0xd7, 0x9a, 0xe0, 0xc3, 0x97,
	0x90, 0x49, 0x71, 0x1a, 0x04, 0x90, 0x27, 0xea, 0x95, 0xf2, 0x94, 0x30, 0x5f, 0xe0, 0xbb, 0x9e,
	0xd6, 0xb2, 0x87, 0xfa, 0xbb, 0x83, 0x03, 0xbb, 0xcf, 0xfe, 0x5d, 0x86, 0xb5, 0x83, 0x4e, 0x77,
	0x55, 0xd2, 0x26, 0xe5, 0x36, 0x95, 0xf5, 0x79, 0x07, 0x77, 0xdb, 0x46, 0xf3, 0x35, 0xee, 0x78,
	0xd3, 0x69, 0x26, 0x64, 0xf5, 0x36, 0x1a, 0x74, 0x9d, 0xf1, 0xaa, 0xa4, 0xdb, 0xd6, 0xba, 0xa4,
	0x8f, 0x67, 0xa1, 0x7a, 0x9f, 0xfb, 0x2c, 0x80, 0x98, 0x07, 0x10, 0x0b, 0xe5, 0xbf, 0x53, 0xad,
	0x22, 0x2b, 0x52, 0x05, 0xec, 0x54, 0xdb, 0xdd, 0x6d, 0xce, 0x7c, 0x8b, 0x3b, 0x69, 0xee, 0x4f,
	0xe6, 0xa2, 0xe8, 0xed, 0xf4, 0xd1, 0xe0, 0xc0, 0xb6, 0xfe, 0xbb, 0xf1, 0x79, 0xee, 0x47, 0x61,
	0x70, 0x26, 0x0a, 0xe7, 0xd1, 0xaa, 0xa4, 0x38, 0xad, 0x65, 0x95, 0xfc, 0x59, 0xd2, 0xc3, 0xc2,
	0x8b, 0xa3, 0xb1, 0xf5, 0xbb, 0x67, 0xb9, 0xfb, 0x69, 0xee, 0x9f, 0x89, 0xc2, 0x1c, 0xe1, 0xbd,
	0x8a, 0xa6, 0xec, 0xed, 0xd6, 0x44, 0x8e, 0xd8, 0x86, 0x7e, 0xc5, 0x9b, 0x6d, 0x78, 0xb3, 0x67,
	0x10, 0x26, 0xce, 0x9d, 0xeb, 0x92, 0x1a, 0xae, 0x76, 0x8f, 0x1f, 0x5c, 0x5e, 0x51, 0xe3, 0xcb,
	0x15, 0x45, 0x97, 0x5f, 0x29, 0xfa, 0xfe, 0xed, 0xa4, 0xb3, 0xe1, 0x60, 0x3d, 0xc7, 0xf7, 0xfe,
	0x5c, 0xc7, 0xb4, 0xf1, 0xde, 0x85, 0x17, 0xe5, 0xa2, 0xfe, 0x41, 0xd7, 0x79, 0xb8, 0x2e, 0x69,
	0x4f, 0xff, 0x97, 0x8b, 0xa9, 0x3d, 0x1a, 0x0d, 0x9f, 0xb2, 0xc6, 0xec, 0x6a, 0xab, 0x73, 0x7e,
	0xbd, 0x20, 0xe8, 0x66, 0x41, 0xd0, 0xed, 0x82, 0xa0, 0x1f, 0x0b, 0x82, 0x3e, 0x2d, 0x89, 0x71,
	0xb3, 0x24, 0xc6, 0xed, 0x92, 0x18, 0x6f, 0xec, 0x16, 0xcb, 0x0a, 0xc7, 0x49, 0x22, 0xd4, 0x07,
	0xc8, 0xe6, 0xbc, 0x39, 0xbd, 0x8f, 0x7f, 0x1f, 0x9f, 0xbf, 0x5f, 0x1f, 0xc6, 0x93, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd9, 0x80, 0x8f, 0x0e, 0x9f, 0x02, 0x00, 0x00,
}

func (m *MorseAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorsePublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorsePublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorsePublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MorseAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MorsePublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MorseAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &MorsePublicKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorsePublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorsePublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorsePublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
