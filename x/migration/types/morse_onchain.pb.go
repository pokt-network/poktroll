// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/migration/morse_onchain.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MorseSupplierClaimSignerType
// - Enum for Morse supplier claim signer type
type MorseSupplierClaimSignerType int32

const (
	// Unspecified signer type
	MorseSupplierClaimSignerType_MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_UNSPECIFIED MorseSupplierClaimSignerType = 0
	// signer === addr === operator === owner
	// Custodial signer type
	// - The Morse node address is NOT EMPTY (i.e. operator)
	// - The Morse output address is EMPTY (i.e. owner)
	// - Implies that the operator and owner are THE SAME offchain identity
	MorseSupplierClaimSignerType_MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_NODE_ADDR MorseSupplierClaimSignerType = 1
	// signer === operator === addr && owner !== operator
	// Non-custodial signer type
	// - The Morse node address is NOT EMPTY (i.e. operator)
	// - The Morse output address is NOT EMPTY (i.e. owner)
	// - Implies that the operator and owner are MOST LIKELY DIFFERENT offchain identities
	// - The operator is the one signing the supplier claim
	MorseSupplierClaimSignerType_MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_NODE_ADDR MorseSupplierClaimSignerType = 2
	// signer === owner && owner !== addr
	// Owner non-custodial signer type
	// - The Morse node address is EMPTY (i.e. operator)
	// - The Morse output address is NOT EMPTY (i.e. owner)
	// - Implies that the operator and owner are MOST LIKELY different offchain identities
	// - The owner is the one signing the supplier claim
	MorseSupplierClaimSignerType_MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_OWNER MorseSupplierClaimSignerType = 3
)

var MorseSupplierClaimSignerType_name = map[int32]string{
	0: "MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_UNSPECIFIED",
	1: "MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_NODE_ADDR",
	2: "MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_NODE_ADDR",
	3: "MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_OWNER",
}

var MorseSupplierClaimSignerType_value = map[string]int32{
	"MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_UNSPECIFIED":                       0,
	"MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_NODE_ADDR":     1,
	"MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_NODE_ADDR": 2,
	"MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_OWNER":     3,
}

func (x MorseSupplierClaimSignerType) String() string {
	return proto.EnumName(MorseSupplierClaimSignerType_name, int32(x))
}

func (MorseSupplierClaimSignerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd3531b7be3acfaa, []int{0}
}

// MorseAccountState
// - Onchain representation of all account state to be migrated from Morse
// - NEVER persisted onchain
// - Dependency of the MsgImportMorseClaimableAccount handler
// - Main purpose: exposes #GetHash() for verifying integrity of all MorseClaimableAccounts
type MorseAccountState struct {
	Accounts []*MorseClaimableAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts" yaml:"accounts"`
}

func (m *MorseAccountState) Reset()         { *m = MorseAccountState{} }
func (m *MorseAccountState) String() string { return proto.CompactTextString(m) }
func (*MorseAccountState) ProtoMessage()    {}
func (*MorseAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd3531b7be3acfaa, []int{0}
}
func (m *MorseAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccountState.Merge(m, src)
}
func (m *MorseAccountState) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccountState proto.InternalMessageInfo

func (m *MorseAccountState) GetAccounts() []*MorseClaimableAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// MorseClaimableAccount
//   - Onchain (persisted) representation of a Morse account claimable as part of Morse -> Shannon migration
//   - Created during MorseAccountState import (see: MsgImportMorseClaimableAccount)
//   - Created ONLY ONCE and NEVER deleted (per morse_src_address per network / re-genesis),
//     unless the allow_morse_account_import_overwrite migration param is enabled
//   - Updated ONLY ONCE, when claimed (per morse_src_address per network / re-genesis)
type MorseClaimableAccount struct {
	// bech32-encoded address of the Shannon account to mint claimed balance
	// Intended to remain empty until the account is claimed
	ShannonDestAddress string `protobuf:"bytes,1,opt,name=shannon_dest_address,json=shannonDestAddress,proto3" json:"shannon_dest_address"`
	// Hex-encoded address of the Morse account whose balance will be claimed.
	// If this MorseClaimableAccount represents a Morse node/supplier:
	//   - Morse non-custodial (i.e. operator) address.
	//   - If morse_output_address is not set, this is the custodial address.
	//   - See 'pocket nodes --help' for more information. Note that this refers to the Morse CLI.
	MorseSrcAddress string `protobuf:"bytes,2,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address"`
	// Unstaked upokt tokens (account balance) available for claiming
	UnstakedBalance types.Coin `protobuf:"bytes,5,opt,name=unstaked_balance,json=unstakedBalance,proto3" json:"unstaked_balance"`
	// Staked tokens for supplier actor corresponding to this account address
	// DEV_NOTE: Context for Morse:
	// - Supplier = Servicer or Node (not a full node) in Morse
	// - All Validators are Servicers; not all Servicers are Validators
	// - Top 100 staked Servicers are validators (automatic)
	// - Only accounts for servicer stake balance transition
	// TODO_MAINNET(@Olshansk): Develop strategy for bootstrapping validators in Shannon with cosmos ecosystem
	SupplierStake types.Coin `protobuf:"bytes,6,opt,name=supplier_stake,json=supplierStake,proto3" json:"supplier_stake"`
	// Staked tokens for application actor corresponding to this account address
	ApplicationStake types.Coin `protobuf:"bytes,7,opt,name=application_stake,json=applicationStake,proto3" json:"application_stake"`
	// Shannon height at which the account was claimed
	// Intended to remain empty until the account is claimed
	ClaimedAtHeight int64 `protobuf:"varint,8,opt,name=claimed_at_height,json=claimedAtHeight,proto3" json:"claimed_at_height" yaml:"claimed_at_height"`
	// ONLY applicable to Morse node/supplier accounts.
	// Hex-encoded address of the Morse output account/wallet associated with the Morse node/supplier.
	// - E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
	// - Morse custodial (i.e. owner) address, which owns the staked tokens of the operator.
	//   See 'pocket nodes --help' for more information. Note that this refers to the Morse CLI.
	MorseOutputAddress string `protobuf:"bytes,9,opt,name=morse_output_address,json=morseOutputAddress,proto3" json:"morse_output_address,omitempty" yaml:"morse_output_address"`
	// TODO_IN_THIS_COMMIT: comment...
	UnstakingCompletionTime time.Time `protobuf:"bytes,10,opt,name=UnstakingCompletionTime,proto3,stdtime" json:"unstaking_time" yaml:"unstaking_time"`
}

func (m *MorseClaimableAccount) Reset()         { *m = MorseClaimableAccount{} }
func (m *MorseClaimableAccount) String() string { return proto.CompactTextString(m) }
func (*MorseClaimableAccount) ProtoMessage()    {}
func (*MorseClaimableAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd3531b7be3acfaa, []int{1}
}
func (m *MorseClaimableAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseClaimableAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseClaimableAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseClaimableAccount.Merge(m, src)
}
func (m *MorseClaimableAccount) XXX_Size() int {
	return m.Size()
}
func (m *MorseClaimableAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseClaimableAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MorseClaimableAccount proto.InternalMessageInfo

func (m *MorseClaimableAccount) GetShannonDestAddress() string {
	if m != nil {
		return m.ShannonDestAddress
	}
	return ""
}

func (m *MorseClaimableAccount) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *MorseClaimableAccount) GetUnstakedBalance() types.Coin {
	if m != nil {
		return m.UnstakedBalance
	}
	return types.Coin{}
}

func (m *MorseClaimableAccount) GetSupplierStake() types.Coin {
	if m != nil {
		return m.SupplierStake
	}
	return types.Coin{}
}

func (m *MorseClaimableAccount) GetApplicationStake() types.Coin {
	if m != nil {
		return m.ApplicationStake
	}
	return types.Coin{}
}

func (m *MorseClaimableAccount) GetClaimedAtHeight() int64 {
	if m != nil {
		return m.ClaimedAtHeight
	}
	return 0
}

func (m *MorseClaimableAccount) GetMorseOutputAddress() string {
	if m != nil {
		return m.MorseOutputAddress
	}
	return ""
}

func (m *MorseClaimableAccount) GetUnstakingCompletionTime() time.Time {
	if m != nil {
		return m.UnstakingCompletionTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("pocket.migration.MorseSupplierClaimSignerType", MorseSupplierClaimSignerType_name, MorseSupplierClaimSignerType_value)
	proto.RegisterType((*MorseAccountState)(nil), "pocket.migration.MorseAccountState")
	proto.RegisterType((*MorseClaimableAccount)(nil), "pocket.migration.MorseClaimableAccount")
}

func init() {
	proto.RegisterFile("pocket/migration/morse_onchain.proto", fileDescriptor_dd3531b7be3acfaa)
}

var fileDescriptor_dd3531b7be3acfaa = []byte{
	// 763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x8e, 0xdb, 0x54,
	0x14, 0x8d, 0x33, 0xed, 0x30, 0x7d, 0x15, 0x24, 0x63, 0x65, 0xc0, 0x13, 0x90, 0x1d, 0x45, 0x48,
	0x44, 0xa8, 0xb5, 0xe9, 0x14, 0x36, 0x2c, 0x90, 0xec, 0xc4, 0x85, 0xa0, 0x99, 0x24, 0xb2, 0x13,
	0x41, 0x59, 0xf0, 0xf4, 0xe2, 0xbc, 0x3a, 0x56, 0x6c, 0x3f, 0xcb, 0xef, 0x19, 0xc8, 0x27, 0xb0,
	0xeb, 0x27, 0xf0, 0x11, 0x7c, 0xc4, 0xb0, 0xab, 0x58, 0x75, 0x65, 0x50, 0x66, 0x97, 0x65, 0xbe,
	0x00, 0xf9, 0xd9, 0x0e, 0xc3, 0x24, 0xa3, 0xb0, 0xcb, 0x3d, 0xf7, 0x9c, 0x73, 0x6f, 0x7c, 0x7c,
	0x0d, 0x3e, 0x8e, 0x88, 0xb3, 0xc0, 0x4c, 0x0b, 0x3c, 0x37, 0x46, 0xcc, 0x23, 0xa1, 0x16, 0x90,
	0x98, 0x62, 0x48, 0x42, 0x67, 0x8e, 0xbc, 0x50, 0x8d, 0x62, 0xc2, 0x88, 0x58, 0xcf, 0x59, 0xea,
	0x96, 0xd5, 0x3c, 0x77, 0x08, 0x0d, 0x08, 0x85, 0xbc, 0xaf, 0xe5, 0x45, 0x4e, 0x6e, 0xca, 0x79,
	0xa5, 0x4d, 0x11, 0xc5, 0xda, 0x4f, 0xcf, 0xa6, 0x98, 0xa1, 0x67, 0x9a, 0x43, 0x4a, 0xb3, 0x66,
	0xc3, 0x25, 0x2e, 0xc9, 0x75, 0xd9, 0xaf, 0x02, 0x55, 0x5c, 0x42, 0x5c, 0x1f, 0x6b, 0xbc, 0x9a,
	0x26, 0xaf, 0x34, 0xe6, 0x05, 0x98, 0x32, 0x14, 0x44, 0x39, 0xa1, 0xbd, 0x04, 0xa7, 0x57, 0xd9,
	0x6a, 0xba, 0xe3, 0x90, 0x24, 0x64, 0x36, 0x43, 0x0c, 0x8b, 0x33, 0x70, 0x82, 0xf2, 0x9a, 0x4a,
	0xd5, 0xd6, 0x51, 0xe7, 0xf1, 0xc5, 0x27, 0xea, 0xdd, 0x5d, 0x55, 0x2e, 0xeb, 0xfa, 0xc8, 0x0b,
	0xd0, 0xd4, 0x2f, 0xf5, 0x86, 0xb2, 0x4e, 0x95, 0xad, 0x78, 0x93, 0x2a, 0xb5, 0x25, 0x0a, 0xfc,
	0x2f, 0xdb, 0x25, 0xd2, 0xb6, 0xb6, 0xcd, 0xf6, 0x1f, 0xc7, 0xe0, 0x6c, 0xaf, 0x89, 0xf8, 0x0a,
	0x34, 0xe8, 0x1c, 0x85, 0x21, 0x09, 0xe1, 0x0c, 0x53, 0x06, 0xd1, 0x6c, 0x16, 0x63, 0x4a, 0x25,
	0xa1, 0x25, 0x74, 0x1e, 0x19, 0x9f, 0x5f, 0xa7, 0x8a, 0xb0, 0x4e, 0x95, 0xbd, 0x9c, 0x3f, 0x7f,
	0x7f, 0xda, 0x28, 0x9e, 0x9b, 0x9e, 0x23, 0x36, 0x8b, 0xbd, 0xd0, 0xb5, 0xc4, 0x82, 0xdd, 0xc3,
	0x94, 0x15, 0x1d, 0x51, 0x07, 0xa7, 0x79, 0x2e, 0x34, 0x76, 0xb6, 0x43, 0xaa, 0x7c, 0xc8, 0xd9,
	0x3a, 0x55, 0x76, 0x9b, 0x56, 0x8d, 0x43, 0x76, 0xec, 0x94, 0x16, 0x3f, 0x82, 0x7a, 0x12, 0x52,
	0x86, 0x16, 0x78, 0x06, 0xa7, 0xc8, 0x47, 0xa1, 0x83, 0xa5, 0x87, 0x2d, 0xa1, 0xf3, 0xf8, 0xe2,
	0x5c, 0x2d, 0xf6, 0xc8, 0x12, 0x53, 0x8b, 0xc4, 0xd4, 0x2e, 0xf1, 0x42, 0x43, 0xba, 0x4e, 0x95,
	0xca, 0x3a, 0x55, 0x76, 0xa4, 0x56, 0xad, 0x44, 0x8c, 0x1c, 0x10, 0xbf, 0x07, 0xef, 0xd1, 0x24,
	0x8a, 0x7c, 0x0f, 0xc7, 0x90, 0x77, 0xa4, 0xe3, 0x43, 0xee, 0xef, 0x17, 0xee, 0x77, 0x84, 0xd6,
	0xbb, 0x65, 0x6d, 0x67, 0xa5, 0x88, 0xc0, 0x29, 0xca, 0x6a, 0x87, 0xc7, 0x59, 0x98, 0xbf, 0x73,
	0xc8, 0xfc, 0xbc, 0x30, 0xdf, 0xd5, 0x5a, 0xf5, 0x5b, 0xd0, 0x76, 0x84, 0x93, 0x65, 0x8b, 0x67,
	0x10, 0x31, 0x38, 0xc7, 0x9e, 0x3b, 0x67, 0xd2, 0x49, 0x4b, 0xe8, 0x1c, 0x19, 0x5f, 0x14, 0x21,
	0xee, 0x12, 0x36, 0xa9, 0x22, 0xe5, 0x2f, 0xcd, 0x4e, 0xab, 0x6d, 0xd5, 0x0a, 0x4c, 0x67, 0xdf,
	0x70, 0x44, 0xa4, 0xa0, 0x51, 0x9c, 0x56, 0xc2, 0xa2, 0xe4, 0xdf, 0x57, 0xe5, 0x11, 0x4f, 0x51,
	0x5f, 0xa7, 0x8a, 0xbc, 0xaf, 0xff, 0x84, 0x04, 0x1e, 0xc3, 0x41, 0xc4, 0x96, 0x9b, 0x54, 0xf9,
	0x30, 0x1f, 0xb7, 0x8f, 0xd7, 0xb6, 0x44, 0x0e, 0x0f, 0x39, 0x5a, 0x86, 0xfe, 0xab, 0x00, 0x3e,
	0x98, 0xf0, 0xa0, 0xbc, 0xd0, 0xed, 0x92, 0x20, 0xf2, 0x71, 0xf6, 0xa7, 0xc7, 0x5e, 0x80, 0x25,
	0xc0, 0x9f, 0x60, 0x53, 0xcd, 0x0f, 0x4f, 0x2d, 0x0f, 0x4f, 0x1d, 0x97, 0x87, 0x67, 0x3c, 0x2f,
	0xf3, 0x49, 0x4a, 0x0b, 0x98, 0x5d, 0xe5, 0x26, 0x55, 0xce, 0xf2, 0x45, 0xfe, 0x8b, 0xb7, 0x5f,
	0xff, 0xa5, 0x08, 0xd6, 0x7d, 0xf3, 0xbe, 0x7d, 0x70, 0xf2, 0xa0, 0xfe, 0xf0, 0xd3, 0xdf, 0xaa,
	0xe0, 0x23, 0x7e, 0x4b, 0x76, 0x91, 0x31, 0xbf, 0x29, 0xdb, 0x73, 0x43, 0x1c, 0x8f, 0x97, 0x11,
	0x16, 0x3f, 0x03, 0x4f, 0xae, 0x86, 0x96, 0x6d, 0x42, 0x7b, 0x32, 0x1a, 0x5d, 0xf6, 0x4d, 0x0b,
	0x76, 0x2f, 0xf5, 0xfe, 0x15, 0xb4, 0xfb, 0x5f, 0x0f, 0x4c, 0x0b, 0x8e, 0x5f, 0x8e, 0x4c, 0x38,
	0x19, 0xd8, 0x23, 0xb3, 0xdb, 0x7f, 0xd1, 0x37, 0x7b, 0xf5, 0x8a, 0x68, 0x80, 0xaf, 0x0e, 0x2a,
	0xba, 0x13, 0x7b, 0x3c, 0xec, 0xf5, 0xf5, 0xcb, 0x1c, 0xed, 0x41, 0xe3, 0x25, 0x1c, 0x0c, 0x7b,
	0x26, 0xd4, 0x7b, 0x3d, 0xab, 0x2e, 0x88, 0x2f, 0x80, 0x71, 0xd0, 0x63, 0x30, 0x1c, 0x1c, 0xf0,
	0xa9, 0xfe, 0xaf, 0x5d, 0xee, 0xf3, 0x19, 0x7e, 0x37, 0x30, 0xad, 0xfa, 0x91, 0x31, 0xba, 0x5e,
	0xc9, 0xc2, 0x9b, 0x95, 0x2c, 0xbc, 0x5d, 0xc9, 0xc2, 0xdf, 0x2b, 0x59, 0x78, 0x7d, 0x23, 0x57,
	0xde, 0xdc, 0xc8, 0x95, 0xb7, 0x37, 0x72, 0xe5, 0x87, 0x0b, 0xd7, 0x63, 0xf3, 0x64, 0xaa, 0x3a,
	0x24, 0xd0, 0x22, 0xb2, 0x60, 0x4f, 0x43, 0xcc, 0x7e, 0x26, 0xf1, 0x82, 0x17, 0x31, 0xf1, 0x7d,
	0xed, 0x97, 0x5b, 0x5f, 0x73, 0xb6, 0x8c, 0x30, 0x9d, 0x1e, 0xf3, 0x70, 0x9f, 0xff, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x62, 0x24, 0x01, 0x33, 0xee, 0x05, 0x00, 0x00,
}

func (m *MorseAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseClaimableAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseClaimableAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseClaimableAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnstakingCompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnstakingCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMorseOnchain(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	if len(m.MorseOutputAddress) > 0 {
		i -= len(m.MorseOutputAddress)
		copy(dAtA[i:], m.MorseOutputAddress)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.MorseOutputAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ClaimedAtHeight != 0 {
		i = encodeVarintMorseOnchain(dAtA, i, uint64(m.ClaimedAtHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.ApplicationStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.SupplierStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.UnstakedBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShannonDestAddress) > 0 {
		i -= len(m.ShannonDestAddress)
		copy(dAtA[i:], m.ShannonDestAddress)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.ShannonDestAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMorseOnchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovMorseOnchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovMorseOnchain(uint64(l))
		}
	}
	return n
}

func (m *MorseClaimableAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShannonDestAddress)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	l = m.UnstakedBalance.Size()
	n += 1 + l + sovMorseOnchain(uint64(l))
	l = m.SupplierStake.Size()
	n += 1 + l + sovMorseOnchain(uint64(l))
	l = m.ApplicationStake.Size()
	n += 1 + l + sovMorseOnchain(uint64(l))
	if m.ClaimedAtHeight != 0 {
		n += 1 + sovMorseOnchain(uint64(m.ClaimedAtHeight))
	}
	l = len(m.MorseOutputAddress)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnstakingCompletionTime)
	n += 1 + l + sovMorseOnchain(uint64(l))
	return n
}

func sovMorseOnchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMorseOnchain(x uint64) (n int) {
	return sovMorseOnchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MorseClaimableAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseClaimableAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseClaimableAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseClaimableAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakedBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakedBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SupplierStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAtHeight", wireType)
			}
			m.ClaimedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseOutputAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseOutputAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnstakingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMorseOnchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMorseOnchain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMorseOnchain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMorseOnchain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMorseOnchain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMorseOnchain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMorseOnchain = fmt.Errorf("proto: unexpected end of group")
)
