// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/morse_onchain.proto

package types

import (
	crypto_ed25519 "crypto/ed25519"
	fmt "fmt"
	github_com_cometbft_cometbft_crypto "github.com/cometbft/cometbft/crypto"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_sortkeys "github.com/cosmos/gogoproto/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MorseAccountState is the onchain representation of the imported account state from Morse.
//
// TODO_UPNEXT(@bryanchriswhite): Decompose this on-chain structure.
type MorseAccountState struct {
	AccountsIdxByAddress map[string]uint64 `protobuf:"bytes,1,rep,name=accounts_idx_by_address,json=accountsIdxByAddress,proto3" json:"accounts_idx_by_address" yaml:"accounts_idx_by_address" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Accounts             []*MorseAccount   `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts" yaml:"accounts"`
}

func (m *MorseAccountState) Reset()         { *m = MorseAccountState{} }
func (m *MorseAccountState) String() string { return proto.CompactTextString(m) }
func (*MorseAccountState) ProtoMessage()    {}
func (*MorseAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74ea76a959fdb61, []int{0}
}
func (m *MorseAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccountState.Merge(m, src)
}
func (m *MorseAccountState) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccountState proto.InternalMessageInfo

func (m *MorseAccountState) GetAccountsIdxByAddress() map[string]uint64 {
	if m != nil {
		return m.AccountsIdxByAddress
	}
	return nil
}

func (m *MorseAccountState) GetAccounts() []*MorseAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// MorseAccount is an analog of the Morse ProtoBaseAccount type.
// It encapsulates the minimum information required to import accounts.
//
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/auth/auth.proto#L14.
type MorseAccount struct {
	// A hex-encoded representation of the address corresponding to a Morse application's ed25519 public key.
	Address github_com_cometbft_cometbft_crypto.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cometbft/cometbft/crypto.Address" json:"address"`
	// The ed25519 public key of the account.
	PubKey *MorsePublicKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"public_key" yaml:"public_key"`
	// The total amount of uPOKT owned by the account; this is a sum of the balance and any actor stakes.
	// NB: The default stake/balance proportion is derived from Morse query response(s) at the time of claiming.
	Coins []types.Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins"`
}

func (m *MorseAccount) Reset()         { *m = MorseAccount{} }
func (m *MorseAccount) String() string { return proto.CompactTextString(m) }
func (*MorseAccount) ProtoMessage()    {}
func (*MorseAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74ea76a959fdb61, []int{1}
}
func (m *MorseAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccount.Merge(m, src)
}
func (m *MorseAccount) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccount proto.InternalMessageInfo

func (*MorseAccount) XXX_MessageName() string {
	return "poktroll.migration.MorseAccount"
}

// MorsePublicKey is required to conform to the encoding of the Morse state export.
// NB: All Morse account public keys will be ed25519 keys by definition.
type MorsePublicKey struct {
	Value crypto_ed25519.PublicKey `protobuf:"bytes,2,opt,name=value,proto3,casttype=crypto/ed25519.PublicKey" json:"value,omitempty"`
}

func (m *MorsePublicKey) Reset()         { *m = MorsePublicKey{} }
func (m *MorsePublicKey) String() string { return proto.CompactTextString(m) }
func (*MorsePublicKey) ProtoMessage()    {}
func (*MorsePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74ea76a959fdb61, []int{2}
}
func (m *MorsePublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorsePublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorsePublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorsePublicKey.Merge(m, src)
}
func (m *MorsePublicKey) XXX_Size() int {
	return m.Size()
}
func (m *MorsePublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MorsePublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_MorsePublicKey proto.InternalMessageInfo

func (m *MorsePublicKey) GetValue() crypto_ed25519.PublicKey {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*MorseAccountState)(nil), "poktroll.migration.MorseAccountState")
	proto.RegisterMapType((map[string]uint64)(nil), "poktroll.migration.MorseAccountState.AccountsIdxByAddressEntry")
	proto.RegisterType((*MorseAccount)(nil), "poktroll.migration.MorseAccount")
	proto.RegisterType((*MorsePublicKey)(nil), "poktroll.migration.MorsePublicKey")
}

func init() {
	proto.RegisterFile("poktroll/migration/morse_onchain.proto", fileDescriptor_e74ea76a959fdb61)
}

var fileDescriptor_e74ea76a959fdb61 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0xb4, 0xee, 0x56, 0x67, 0xeb, 0x8f, 0x0d, 0x85, 0x4d, 0x8b, 0x64, 0x4a, 0x04, 0x29,
	0xc8, 0x4e, 0x68, 0x65, 0x41, 0x0b, 0x2a, 0x1b, 0x15, 0x91, 0x45, 0x58, 0xa2, 0x27, 0x41, 0x62,
	0x92, 0x8e, 0xdd, 0xd0, 0x26, 0x13, 0x32, 0x93, 0xb5, 0xf9, 0x0f, 0xf6, 0xe8, 0xd1, 0x9b, 0x8b,
	0x7f, 0x83, 0xfe, 0x0f, 0x8b, 0xa7, 0x3d, 0xee, 0x69, 0x90, 0xf6, 0xd6, 0x63, 0xbd, 0xed, 0x49,
	0xd2, 0x49, 0xbb, 0x5d, 0xd6, 0xe2, 0x29, 0xef, 0x7d, 0xf9, 0xde, 0x7b, 0xdf, 0x7c, 0xbc, 0x07,
	0xef, 0x47, 0xb4, 0xcf, 0x63, 0x3a, 0x18, 0x18, 0x81, 0xdf, 0x8b, 0x1d, 0xee, 0xd3, 0xd0, 0x08,
	0x68, 0xcc, 0x88, 0x4d, 0x43, 0xef, 0xc0, 0xf1, 0x43, 0x1c, 0xc5, 0x94, 0x53, 0x45, 0x99, 0xf3,
	0xf0, 0x82, 0x57, 0xaf, 0x79, 0x94, 0x05, 0x94, 0xd9, 0x33, 0x86, 0x21, 0x13, 0x49, 0xaf, 0x6b,
	0x32, 0x33, 0x5c, 0x87, 0x11, 0xe3, 0xb0, 0xe5, 0x12, 0xee, 0xb4, 0x0c, 0x8f, 0xce, 0xdb, 0xd5,
	0xab, 0x3d, 0xda, 0xa3, 0xb2, 0x2e, 0x8b, 0x24, 0xaa, 0xff, 0x29, 0xc2, 0xcd, 0x37, 0xd9, 0xf0,
	0x5d, 0xcf, 0xa3, 0x49, 0xc8, 0xdf, 0x72, 0x87, 0x13, 0xe5, 0x27, 0x80, 0x5b, 0x8e, 0x04, 0x98,
	0xed, 0x77, 0x87, 0xb6, 0x9b, 0xda, 0x4e, 0xb7, 0x1b, 0x13, 0xc6, 0x54, 0xd0, 0x28, 0x35, 0x37,
	0xda, 0xcf, 0xf0, 0x55, 0x75, 0xf8, 0x4a, 0x23, 0x9c, 0x27, 0xec, 0x75, 0x77, 0x68, 0xa6, 0xbb,
	0xb2, 0xc3, 0xcb, 0x90, 0xc7, 0xa9, 0xf9, 0x64, 0x22, 0xd0, 0xaa, 0x19, 0x53, 0x81, 0xb4, 0xd4,
	0x09, 0x06, 0x1d, 0x7d, 0x05, 0x41, 0xb7, 0xaa, 0xce, 0x3f, 0x3a, 0x2b, 0x1f, 0xe0, 0xf5, 0x39,
	0xae, 0x16, 0x67, 0x3a, 0x1b, 0xff, 0xd3, 0x69, 0xa2, 0x89, 0x40, 0x8b, 0xaa, 0xa9, 0x40, 0xb7,
	0x2f, 0x4f, 0xd6, 0xad, 0xc5, 0xcf, 0xfa, 0x2b, 0x58, 0x5b, 0xf9, 0x20, 0xe5, 0x0e, 0x2c, 0xf5,
	0x49, 0xaa, 0x82, 0x06, 0x68, 0xde, 0xb0, 0xb2, 0x50, 0xa9, 0xc2, 0xb5, 0x43, 0x67, 0x90, 0x10,
	0xb5, 0xd8, 0x00, 0xcd, 0x6b, 0x96, 0x4c, 0x3a, 0xc5, 0x47, 0x40, 0xff, 0x56, 0x84, 0x95, 0x65,
	0x11, 0xca, 0x3b, 0x58, 0xbe, 0xf0, 0x17, 0x34, 0x2b, 0x66, 0x67, 0x22, 0xd0, 0x1c, 0x3a, 0x17,
	0xe8, 0x41, 0xcf, 0xe7, 0x07, 0x89, 0x8b, 0x3d, 0x1a, 0x18, 0x1e, 0x0d, 0x08, 0x77, 0x3f, 0xf1,
	0xa5, 0x20, 0x4e, 0x23, 0x4e, 0x71, 0x2e, 0xc7, 0x9a, 0xd7, 0x29, 0x1f, 0x61, 0x39, 0x4a, 0x5c,
	0x3b, 0x93, 0x95, 0x49, 0xd8, 0x68, 0xeb, 0x2b, 0xdd, 0xd8, 0x4f, 0xdc, 0x81, 0xef, 0xed, 0x91,
	0xd4, 0xbc, 0x37, 0x11, 0x08, 0x46, 0xb3, 0x34, 0xab, 0x9c, 0x0a, 0xb4, 0x29, 0x1d, 0xb9, 0xc0,
	0x74, 0x6b, 0x3d, 0x4a, 0xdc, 0x3d, 0x92, 0x2a, 0x4f, 0xe1, 0x5a, 0xb6, 0x62, 0x4c, 0x2d, 0xcd,
	0xdc, 0xae, 0xe1, 0x7c, 0x25, 0xb3, 0x25, 0xc4, 0xf9, 0x12, 0xe2, 0xe7, 0xd4, 0x0f, 0xcd, 0x9b,
	0x27, 0x02, 0x15, 0x26, 0x02, 0x49, 0xbe, 0x25, 0x3f, 0x9d, 0xad, 0xa3, 0x63, 0x54, 0xf8, 0x7a,
	0x8c, 0xc0, 0xd1, 0x77, 0x04, 0x7e, 0xfd, 0xd8, 0x2e, 0xe7, 0x86, 0xe8, 0x2f, 0xe0, 0xad, 0xcb,
	0xba, 0x94, 0xf6, 0xb2, 0x9b, 0x15, 0xf3, 0xee, 0xb9, 0x40, 0xaa, 0x7c, 0xb8, 0x41, 0xba, 0xed,
	0x9d, 0x9d, 0xd6, 0x63, 0xbc, 0x20, 0xe7, 0x5e, 0x9b, 0xfb, 0x27, 0x23, 0x0d, 0x9c, 0x8e, 0x34,
	0x70, 0x36, 0xd2, 0xc0, 0xef, 0x91, 0x06, 0xbe, 0x8c, 0xb5, 0xc2, 0xe9, 0x58, 0x2b, 0x9c, 0x8d,
	0xb5, 0xc2, 0xfb, 0xf6, 0x92, 0xa9, 0x99, 0x2f, 0xdb, 0x21, 0xe1, 0x9f, 0x69, 0xdc, 0x37, 0x16,
	0x07, 0x3a, 0x5c, 0x3a, 0x51, 0x9e, 0x46, 0x84, 0xb9, 0xeb, 0xb3, 0xb3, 0x79, 0xf8, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x74, 0x88, 0x66, 0xee, 0xc5, 0x03, 0x00, 0x00,
}

func (m *MorseAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccountsIdxByAddress) > 0 {
		keysForAccountsIdxByAddress := make([]string, 0, len(m.AccountsIdxByAddress))
		for k := range m.AccountsIdxByAddress {
			keysForAccountsIdxByAddress = append(keysForAccountsIdxByAddress, string(k))
		}
		github_com_cosmos_gogoproto_sortkeys.Strings(keysForAccountsIdxByAddress)
		for iNdEx := len(keysForAccountsIdxByAddress) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AccountsIdxByAddress[string(keysForAccountsIdxByAddress[iNdEx])]
			baseI := i
			i = encodeVarintMorseOnchain(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(keysForAccountsIdxByAddress[iNdEx])
			copy(dAtA[i:], keysForAccountsIdxByAddress[iNdEx])
			i = encodeVarintMorseOnchain(dAtA, i, uint64(len(keysForAccountsIdxByAddress[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMorseOnchain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorsePublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorsePublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorsePublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintMorseOnchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovMorseOnchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountsIdxByAddress) > 0 {
		for k, v := range m.AccountsIdxByAddress {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMorseOnchain(uint64(len(k))) + 1 + sovMorseOnchain(uint64(v))
			n += mapEntrySize + 1 + sovMorseOnchain(uint64(mapEntrySize))
		}
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovMorseOnchain(uint64(l))
		}
	}
	return n
}

func (m *MorseAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovMorseOnchain(uint64(l))
		}
	}
	return n
}

func (m *MorsePublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	return n
}

func sovMorseOnchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMorseOnchain(x uint64) (n int) {
	return sovMorseOnchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsIdxByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountsIdxByAddress == nil {
				m.AccountsIdxByAddress = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMorseOnchain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMorseOnchain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMorseOnchain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMorseOnchain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMorseOnchain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMorseOnchain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMorseOnchain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AccountsIdxByAddress[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MorseAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &MorsePublicKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorsePublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorsePublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorsePublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMorseOnchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMorseOnchain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMorseOnchain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMorseOnchain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMorseOnchain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMorseOnchain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMorseOnchain = fmt.Errorf("proto: unexpected end of group")
)
