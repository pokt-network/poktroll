// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/morse_onchain.proto

package types

import (
	crypto_ed25519 "crypto/ed25519"
	fmt "fmt"
	github_com_cometbft_cometbft_crypto "github.com/cometbft/cometbft/crypto"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MorseAccountState is the onchain representation of all account state to be migrated from Morse.
// It is NEVER persisted onchain but is a dependency of the MsgImportMorseClaimableAccount handler.
// It's main purpose is to expose the #GetHash() method for verifying the integrity of all MorseClaimableAccounts.
type MorseAccountState struct {
	Accounts []*MorseClaimableAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts" yaml:"accounts"`
}

func (m *MorseAccountState) Reset()         { *m = MorseAccountState{} }
func (m *MorseAccountState) String() string { return proto.CompactTextString(m) }
func (*MorseAccountState) ProtoMessage()    {}
func (*MorseAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74ea76a959fdb61, []int{0}
}
func (m *MorseAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccountState.Merge(m, src)
}
func (m *MorseAccountState) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccountState proto.InternalMessageInfo

func (m *MorseAccountState) GetAccounts() []*MorseClaimableAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// MorseClaimableAccount is the onchain (persisted) representation of a Morse
// account which is claimable as part of the Morse -> Shannon migration.
// They are intended to be created during MorseAccountState import (see: MsgImportMorseClaimableAccount).
type MorseClaimableAccount struct {
	// A hex-encoded representation of the address corresponding to a Morse application's ed25519 public key.
	Address github_com_cometbft_cometbft_crypto.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cometbft/cometbft/crypto.Address" json:"address"`
	// The ed25519 public key of the account.
	PublicKey crypto_ed25519.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3,casttype=crypto/ed25519.PublicKey" json:"public_key,omitempty"`
	// The total amount of uPOKT owned by the account; this is a sum of the balance and any actor stakes.
	// NB: The default stake/balance proportion is derived from Morse query response(s) at the time of claiming.
	TotalTokens     types.Coin `protobuf:"bytes,3,opt,name=total_tokens,json=totalTokens,proto3" json:"coins"`
	ClaimedAtHeight int64      `protobuf:"varint,4,opt,name=claimed_at_height,json=claimedAtHeight,proto3" json:"claimed_at_height,omitempty"`
}

func (m *MorseClaimableAccount) Reset()         { *m = MorseClaimableAccount{} }
func (m *MorseClaimableAccount) String() string { return proto.CompactTextString(m) }
func (*MorseClaimableAccount) ProtoMessage()    {}
func (*MorseClaimableAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74ea76a959fdb61, []int{1}
}
func (m *MorseClaimableAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseClaimableAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseClaimableAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseClaimableAccount.Merge(m, src)
}
func (m *MorseClaimableAccount) XXX_Size() int {
	return m.Size()
}
func (m *MorseClaimableAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseClaimableAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MorseClaimableAccount proto.InternalMessageInfo

func (m *MorseClaimableAccount) GetAddress() github_com_cometbft_cometbft_crypto.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MorseClaimableAccount) GetPublicKey() crypto_ed25519.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *MorseClaimableAccount) GetTotalTokens() types.Coin {
	if m != nil {
		return m.TotalTokens
	}
	return types.Coin{}
}

func (m *MorseClaimableAccount) GetClaimedAtHeight() int64 {
	if m != nil {
		return m.ClaimedAtHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*MorseAccountState)(nil), "poktroll.migration.MorseAccountState")
	proto.RegisterType((*MorseClaimableAccount)(nil), "poktroll.migration.MorseClaimableAccount")
}

func init() {
	proto.RegisterFile("poktroll/migration/morse_onchain.proto", fileDescriptor_e74ea76a959fdb61)
}

var fileDescriptor_e74ea76a959fdb61 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xb5, 0xec, 0x7e, 0xae, 0x53, 0x42, 0x44, 0x0b, 0x8a, 0x29, 0x92, 0xf1, 0xa1, 0xb8, 0x2d,
	0xdd, 0xc5, 0x2e, 0x39, 0x34, 0x3d, 0xd9, 0xb9, 0x14, 0x42, 0x21, 0xa8, 0x39, 0xf5, 0x22, 0x56,
	0xeb, 0x8d, 0x2c, 0x2c, 0x69, 0x84, 0x76, 0xdc, 0x56, 0xf4, 0x4f, 0xf4, 0x3f, 0xf4, 0xcf, 0xe4,
	0x98, 0x63, 0x4e, 0xa2, 0xd8, 0x37, 0x1f, 0x7b, 0xcc, 0xa9, 0x68, 0xd7, 0x32, 0x86, 0xe6, 0x36,
	0xf3, 0xe6, 0xbd, 0x27, 0xed, 0xbc, 0x21, 0xaf, 0x72, 0x58, 0x60, 0x01, 0x49, 0xc2, 0xd2, 0x38,
	0x2a, 0x38, 0xc6, 0x90, 0xb1, 0x14, 0x0a, 0x25, 0x03, 0xc8, 0xc4, 0x9c, 0xc7, 0x19, 0xcd, 0x0b,
	0x40, 0xb0, 0xed, 0x86, 0x47, 0x77, 0xbc, 0xde, 0xb1, 0x00, 0x95, 0x82, 0x0a, 0x34, 0x83, 0x99,
	0xc6, 0xd0, 0x7b, 0xae, 0xe9, 0x58, 0xc8, 0x95, 0x64, 0xdf, 0x46, 0xa1, 0x44, 0x3e, 0x62, 0x02,
	0x1a, 0xbb, 0xde, 0xf3, 0x08, 0x22, 0x30, 0xba, 0xba, 0x32, 0xe8, 0xe0, 0x27, 0x39, 0xfa, 0x5c,
	0x7f, 0x7b, 0x22, 0x04, 0x2c, 0x33, 0xfc, 0x82, 0x1c, 0xa5, 0x7d, 0x45, 0x9e, 0x70, 0xd3, 0x2b,
	0xa7, 0xdd, 0xef, 0x0c, 0xbb, 0xe3, 0xd7, 0xf4, 0xff, 0x9f, 0xa1, 0x5a, 0x78, 0x96, 0xf0, 0x38,
	0xe5, 0x61, 0xd2, 0x38, 0x4c, 0xbd, 0x4d, 0xe5, 0xed, 0xe4, 0x7f, 0x2b, 0xef, 0xb0, 0xe4, 0x69,
	0x72, 0x3a, 0x68, 0x90, 0x81, 0xbf, 0x1b, 0x0e, 0x7e, 0xb7, 0xc9, 0x8b, 0x7b, 0x4d, 0xec, 0x4b,
	0xf2, 0x98, 0xcf, 0x66, 0x85, 0x54, 0xca, 0xb1, 0xfa, 0xd6, 0xf0, 0x60, 0x7a, 0xba, 0xa9, 0xbc,
	0x06, 0xba, 0xab, 0xbc, 0xb7, 0x51, 0x8c, 0xf3, 0x65, 0x48, 0x05, 0xa4, 0x4c, 0x40, 0x2a, 0x31,
	0xbc, 0xc2, 0xbd, 0xa2, 0x28, 0x73, 0x04, 0x3a, 0x31, 0x74, 0xbf, 0xd1, 0xd9, 0x1f, 0x09, 0xc9,
	0x97, 0x61, 0x12, 0x8b, 0x60, 0x21, 0x4b, 0xa7, 0xad, 0x8d, 0x5f, 0xde, 0x55, 0x9e, 0x63, 0x04,
	0x4c, 0xce, 0xc6, 0x27, 0x27, 0xa3, 0x0f, 0xf4, 0x42, 0x93, 0xce, 0x65, 0xe9, 0x3f, 0xcd, 0x9b,
	0xd2, 0x3e, 0x27, 0x07, 0x08, 0xc8, 0x93, 0x00, 0x61, 0x21, 0x33, 0xe5, 0x74, 0xfa, 0xd6, 0xb0,
	0x3b, 0x3e, 0xa6, 0xdb, 0x10, 0xea, 0xb5, 0xd3, 0xed, 0xda, 0xe9, 0x19, 0xc4, 0xd9, 0xf4, 0xd9,
	0x75, 0xe5, 0xb5, 0x36, 0x95, 0xf7, 0xb0, 0x0e, 0x41, 0xf9, 0x5d, 0xad, 0xbe, 0xd4, 0x62, 0xfb,
	0x0d, 0x39, 0x12, 0xf5, 0x9b, 0xe5, 0x2c, 0xe0, 0x18, 0xcc, 0x65, 0x1c, 0xcd, 0xd1, 0x79, 0xd0,
	0xb7, 0x86, 0x1d, 0xff, 0x70, 0x3b, 0x98, 0xe0, 0x27, 0x0d, 0x4f, 0x2f, 0xae, 0x57, 0xae, 0x75,
	0xb3, 0x72, 0xad, 0xdb, 0x95, 0x6b, 0xfd, 0x59, 0xb9, 0xd6, 0xaf, 0xb5, 0xdb, 0xba, 0x59, 0xbb,
	0xad, 0xdb, 0xb5, 0xdb, 0xfa, 0x3a, 0xde, 0xdb, 0x44, 0x9d, 0xd1, 0xbb, 0x4c, 0xe2, 0x77, 0x28,
	0x16, 0x6c, 0x77, 0x65, 0x3f, 0xf6, 0xee, 0x0c, 0xcb, 0x5c, 0xaa, 0xf0, 0x91, 0xce, 0xfe, 0xfd,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xe0, 0x91, 0xc2, 0x8a, 0x02, 0x00, 0x00,
}

func (m *MorseAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseClaimableAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseClaimableAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseClaimableAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimedAtHeight != 0 {
		i = encodeVarintMorseOnchain(dAtA, i, uint64(m.ClaimedAtHeight))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TotalTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMorseOnchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMorseOnchain(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMorseOnchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovMorseOnchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovMorseOnchain(uint64(l))
		}
	}
	return n
}

func (m *MorseClaimableAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMorseOnchain(uint64(l))
	}
	l = m.TotalTokens.Size()
	n += 1 + l + sovMorseOnchain(uint64(l))
	if m.ClaimedAtHeight != 0 {
		n += 1 + sovMorseOnchain(uint64(m.ClaimedAtHeight))
	}
	return n
}

func sovMorseOnchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMorseOnchain(x uint64) (n int) {
	return sovMorseOnchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MorseClaimableAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseClaimableAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseClaimableAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseClaimableAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAtHeight", wireType)
			}
			m.ClaimedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMorseOnchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseOnchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMorseOnchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMorseOnchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseOnchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMorseOnchain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMorseOnchain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMorseOnchain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMorseOnchain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMorseOnchain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMorseOnchain = fmt.Errorf("proto: unexpected end of group")
)
