// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/legacy.proto

// Types in this file are ONLY present to facilitate the verifiability of the
// migration state from Morse to Shannon.
//
// These types are used by the migration subcommand  to transform
// the Morse state export into the Shannon state import.
// Ref: `poktrolld migrate collect-morse-accounts ...`
//
// They ARE NOT persisted on-chain at any point.package poktroll.migration;

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cometbft_cometbft_crypto "github.com/cometbft/cometbft/crypto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MorseStateExport is the data structure that is serialized and output when running
// `pocket utils export-genesis-for-reset`.
// See: https://editor.swagger.io/?url=https://raw.githubusercontent.com/pokt-network/pocket-core/staging/doc/specs/rpc-spec.yaml#operations-query-post_query_state
type MorseStateExport struct {
	// app_hash is the Morse tendermint state hash.
	AppHash string `protobuf:"bytes,1,opt,name=app_hash,json=appHash,proto3" json:"app_hash"`
	// app_state is the entire Morse tendermint application state.
	AppState *MorseAppState `protobuf:"bytes,2,opt,name=app_state,json=appState,proto3" json:"app_state"`
}

func (m *MorseStateExport) Reset()         { *m = MorseStateExport{} }
func (m *MorseStateExport) String() string { return proto.CompactTextString(m) }
func (*MorseStateExport) ProtoMessage()    {}
func (*MorseStateExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{0}
}
func (m *MorseStateExport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseStateExport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseStateExport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseStateExport.Merge(m, src)
}
func (m *MorseStateExport) XXX_Size() int {
	return m.Size()
}
func (m *MorseStateExport) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseStateExport.DiscardUnknown(m)
}

var xxx_messageInfo_MorseStateExport proto.InternalMessageInfo

func (m *MorseStateExport) GetAppHash() string {
	if m != nil {
		return m.AppHash
	}
	return ""
}

func (m *MorseStateExport) GetAppState() *MorseAppState {
	if m != nil {
		return m.AppState
	}
	return nil
}

// MorseAppState is the tendermint application state for the Morse tendermint
// application; not to be confused with the pokt protocol actor.
type MorseAppState struct {
	Application *MorseApplications `protobuf:"bytes,1,opt,name=application,proto3" json:"application"`
	Auth        *MorseAuth         `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth"`
	Pos         *MorsePos          `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos"`
}

func (m *MorseAppState) Reset()         { *m = MorseAppState{} }
func (m *MorseAppState) String() string { return proto.CompactTextString(m) }
func (*MorseAppState) ProtoMessage()    {}
func (*MorseAppState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{1}
}
func (m *MorseAppState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAppState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAppState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAppState.Merge(m, src)
}
func (m *MorseAppState) XXX_Size() int {
	return m.Size()
}
func (m *MorseAppState) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAppState.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAppState proto.InternalMessageInfo

func (m *MorseAppState) GetApplication() *MorseApplications {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *MorseAppState) GetAuth() *MorseAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *MorseAppState) GetPos() *MorsePos {
	if m != nil {
		return m.Pos
	}
	return nil
}

// A wrapper around the list of MorseApplications, necessary in order to conform to the Morse genesis structure.
type MorseApplications struct {
	Applications []*MorseApplication `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications"`
}

func (m *MorseApplications) Reset()         { *m = MorseApplications{} }
func (m *MorseApplications) String() string { return proto.CompactTextString(m) }
func (*MorseApplications) ProtoMessage()    {}
func (*MorseApplications) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{2}
}
func (m *MorseApplications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseApplications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseApplications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseApplications.Merge(m, src)
}
func (m *MorseApplications) XXX_Size() int {
	return m.Size()
}
func (m *MorseApplications) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseApplications.DiscardUnknown(m)
}

var xxx_messageInfo_MorseApplications proto.InternalMessageInfo

func (m *MorseApplications) GetApplications() []*MorseApplication {
	if m != nil {
		return m.Applications
	}
	return nil
}

// A wrapper around a list of Morse accounts.
type MorseAuth struct {
	Accounts []*MorseAuthAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
}

func (m *MorseAuth) Reset()         { *m = MorseAuth{} }
func (m *MorseAuth) String() string { return proto.CompactTextString(m) }
func (*MorseAuth) ProtoMessage()    {}
func (*MorseAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{3}
}
func (m *MorseAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAuth.Merge(m, src)
}
func (m *MorseAuth) XXX_Size() int {
	return m.Size()
}
func (m *MorseAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAuth.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAuth proto.InternalMessageInfo

func (m *MorseAuth) GetAccounts() []*MorseAuthAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// A wrapper around Morse account information, necessary in order to to confirm to the Morse genesis
// structure. Morse originally serialized accounts as pb.Any types in order to support multiple
// account types. For the purposes of the Morse -> Shannon migration, we're only concerned with
// externally owned accounts (as opposed to module accounts). As a result, we're simplifying its
// representation in Shannon by avoiding usage of pb.Any. It is necessary in order too conform to
// the Morse genesis structure.
type MorseAuthAccount struct {
	Type  string        `protobuf:"bytes,1,opt,name=Type,proto3" json:"type"`
	Value *MorseAccount `protobuf:"bytes,2,opt,name=Value,proto3" json:"value"`
}

func (m *MorseAuthAccount) Reset()         { *m = MorseAuthAccount{} }
func (m *MorseAuthAccount) String() string { return proto.CompactTextString(m) }
func (*MorseAuthAccount) ProtoMessage()    {}
func (*MorseAuthAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{4}
}
func (m *MorseAuthAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAuthAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAuthAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAuthAccount.Merge(m, src)
}
func (m *MorseAuthAccount) XXX_Size() int {
	return m.Size()
}
func (m *MorseAuthAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAuthAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAuthAccount proto.InternalMessageInfo

func (m *MorseAuthAccount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MorseAuthAccount) GetValue() *MorseAccount {
	if m != nil {
		return m.Value
	}
	return nil
}

// A wrapper around the list of Morse suppliers (aka "validators", "nodes", of "servicers").
// It is necessary to conform to the Morse genesis structure.
type MorsePos struct {
	Validators []*MorseValidator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
}

func (m *MorsePos) Reset()         { *m = MorsePos{} }
func (m *MorsePos) String() string { return proto.CompactTextString(m) }
func (*MorsePos) ProtoMessage()    {}
func (*MorsePos) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{5}
}
func (m *MorsePos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorsePos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorsePos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorsePos.Merge(m, src)
}
func (m *MorsePos) XXX_Size() int {
	return m.Size()
}
func (m *MorsePos) XXX_DiscardUnknown() {
	xxx_messageInfo_MorsePos.DiscardUnknown(m)
}

var xxx_messageInfo_MorsePos proto.InternalMessageInfo

func (m *MorsePos) GetValidators() []*MorseValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

// MorseApplication is a subset of the Morse ProtoApplication type.
// It encapsulates the minimum information required to import Morse applications.
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/apps/apps.proto#L16
type MorseApplication struct {
	// Address is a hex-encoded string representation of the address corresponding
	// to a Morse application's ed25519 public key.
	Address github_com_cometbft_cometbft_crypto.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cometbft/cometbft/crypto.Address" json:"address" yaml:"address"`
	// PublicKey is the binary representation of a Morse application's ed25519 public key.
	PublicKey    []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed       bool   `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed" yaml:"jailed"`
	Status       int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status" yaml:"status"`
	StakedTokens string `protobuf:"bytes,6,opt,name=staked_tokens,json=stakedTokens,proto3" json:"tokens"`
}

func (m *MorseApplication) Reset()         { *m = MorseApplication{} }
func (m *MorseApplication) String() string { return proto.CompactTextString(m) }
func (*MorseApplication) ProtoMessage()    {}
func (*MorseApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{6}
}
func (m *MorseApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseApplication.Merge(m, src)
}
func (m *MorseApplication) XXX_Size() int {
	return m.Size()
}
func (m *MorseApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseApplication.DiscardUnknown(m)
}

var xxx_messageInfo_MorseApplication proto.InternalMessageInfo

// MorseValidator is a subset of the Morse ProtoValidator type.
// It encapsulates the minimum information required to import Morse suppliers (aka "servicers" or "validators").
// See: https://github.com/pokt-network/pocket-core/blob/staging/proto/x/pos/types.proto#L16
type MorseValidator struct {
	Address      github_com_cometbft_cometbft_crypto.Address `protobuf:"bytes,1,opt,name=Address,proto3,casttype=github.com/cometbft/cometbft/crypto.Address" json:"address" yaml:"address"`
	PublicKey    []byte                                      `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed       bool                                        `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed"`
	Status       int32                                       `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	StakedTokens string                                      `protobuf:"bytes,7,opt,name=StakedTokens,proto3" json:"tokens"`
}

func (m *MorseValidator) Reset()         { *m = MorseValidator{} }
func (m *MorseValidator) String() string { return proto.CompactTextString(m) }
func (*MorseValidator) ProtoMessage()    {}
func (*MorseValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{7}
}
func (m *MorseValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseValidator.Merge(m, src)
}
func (m *MorseValidator) XXX_Size() int {
	return m.Size()
}
func (m *MorseValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MorseValidator proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MorseStateExport)(nil), "poktroll.migration.MorseStateExport")
	proto.RegisterType((*MorseAppState)(nil), "poktroll.migration.MorseAppState")
	proto.RegisterType((*MorseApplications)(nil), "poktroll.migration.MorseApplications")
	proto.RegisterType((*MorseAuth)(nil), "poktroll.migration.MorseAuth")
	proto.RegisterType((*MorseAuthAccount)(nil), "poktroll.migration.MorseAuthAccount")
	proto.RegisterType((*MorsePos)(nil), "poktroll.migration.MorsePos")
	proto.RegisterType((*MorseApplication)(nil), "poktroll.migration.MorseApplication")
	proto.RegisterType((*MorseValidator)(nil), "poktroll.migration.MorseValidator")
}

func init() { proto.RegisterFile("poktroll/migration/legacy.proto", fileDescriptor_3ba469df9d72c7fc) }

var fileDescriptor_3ba469df9d72c7fc = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xbd, 0x6b, 0x1b, 0x49,
	0x14, 0xd7, 0xfa, 0x4b, 0xd2, 0x48, 0xf2, 0xd9, 0xc3, 0x15, 0xc2, 0xe7, 0xdb, 0xd1, 0xcd, 0xdd,
	0x11, 0x41, 0x88, 0x04, 0x72, 0x11, 0x70, 0x2a, 0x2d, 0x04, 0x02, 0x89, 0x83, 0x19, 0x1b, 0x13,
	0x1c, 0x88, 0x19, 0x49, 0x6b, 0x49, 0xd1, 0x4a, 0x33, 0xec, 0xcc, 0x3a, 0xd6, 0x7f, 0x10, 0x52,
	0xa5, 0x4c, 0xe9, 0x7f, 0x25, 0x5d, 0x4a, 0x97, 0xae, 0x36, 0x41, 0x6a, 0xc2, 0x96, 0x2e, 0x53,
	0x85, 0x99, 0xfd, 0xd0, 0xca, 0x8e, 0x82, 0x53, 0xa4, 0x59, 0xe6, 0xbd, 0xf7, 0xfb, 0xbd, 0x8f,
	0xdf, 0xbc, 0x65, 0x00, 0xe2, 0x6c, 0x20, 0x5d, 0xe6, 0x38, 0xf5, 0x61, 0xbf, 0xeb, 0x52, 0xd9,
	0x67, 0xa3, 0xba, 0x63, 0x77, 0x69, 0x7b, 0x5c, 0xe3, 0x2e, 0x93, 0x0c, 0xc2, 0x18, 0x50, 0x4b,
	0x00, 0x5b, 0x7f, 0x76, 0x59, 0x97, 0xe9, 0x70, 0x5d, 0x9d, 0x42, 0xe4, 0x96, 0xf9, 0x83, 0x54,
	0x72, 0xcc, 0x6d, 0x11, 0xc6, 0xf1, 0x3b, 0x03, 0x6c, 0xec, 0x31, 0x57, 0xd8, 0x07, 0x92, 0x4a,
	0xfb, 0xf1, 0x39, 0x67, 0xae, 0x84, 0xf7, 0x40, 0x8e, 0x72, 0x7e, 0xd2, 0xa3, 0xa2, 0x57, 0x36,
	0x2a, 0x46, 0x35, 0x6f, 0x15, 0x03, 0x1f, 0x25, 0x3e, 0x92, 0xa5, 0x9c, 0x3f, 0xa1, 0xa2, 0x07,
	0xf7, 0x40, 0x5e, 0x39, 0x85, 0xe2, 0x96, 0x97, 0x2a, 0x46, 0xb5, 0xd0, 0xf8, 0xa7, 0x76, 0xbb,
	0xb7, 0x9a, 0xae, 0xd0, 0xe4, 0x5c, 0x17, 0xb1, 0x4a, 0x81, 0x8f, 0x66, 0x3c, 0xa2, 0xf2, 0xea,
	0x00, 0xfe, 0x6c, 0x80, 0xd2, 0x1c, 0x14, 0xbe, 0x00, 0x05, 0xca, 0xb9, 0xd3, 0x6f, 0xeb, 0x3c,
	0xba, 0x99, 0x42, 0xe3, 0xff, 0x9f, 0x95, 0x88, 0xb1, 0xc2, 0xfa, 0x23, 0xf0, 0x51, 0x9a, 0x4d,
	0xd2, 0x06, 0x7c, 0x04, 0x56, 0xa8, 0x27, 0x7b, 0x51, 0xd7, 0x7f, 0x2f, 0x4e, 0xe9, 0xc9, 0x9e,
	0x95, 0x0b, 0x7c, 0xa4, 0xe1, 0x44, 0x7f, 0xe1, 0x43, 0xb0, 0xcc, 0x99, 0x28, 0x2f, 0x6b, 0xee,
	0xf6, 0x42, 0xee, 0x3e, 0x13, 0x56, 0x36, 0xf0, 0x91, 0x02, 0x13, 0xf5, 0xc1, 0x0c, 0x6c, 0xde,
	0x6a, 0x14, 0x1e, 0x83, 0x62, 0xaa, 0x33, 0x51, 0x36, 0x2a, 0xcb, 0xd5, 0x42, 0xe3, 0xbf, 0xbb,
	0x4c, 0x69, 0x6d, 0x04, 0x3e, 0x9a, 0x63, 0x93, 0x39, 0x0b, 0xbf, 0x04, 0xf9, 0x64, 0x0c, 0xf8,
	0x1c, 0xe4, 0x68, 0xbb, 0xcd, 0xbc, 0x91, 0xbc, 0x43, 0x11, 0x4f, 0xf6, 0x9a, 0x21, 0x38, 0xba,
	0xfd, 0x88, 0x49, 0x92, 0x13, 0x16, 0xd1, 0xee, 0xa4, 0xb0, 0x70, 0x1b, 0xac, 0x1c, 0x8e, 0xb9,
	0x1d, 0xed, 0x8d, 0x16, 0x4e, 0xed, 0x1b, 0xd1, 0x5e, 0xd8, 0x04, 0xab, 0x47, 0xd4, 0xf1, 0xe2,
	0x65, 0xa9, 0x2c, 0x2e, 0x1f, 0x95, 0xce, 0x07, 0x3e, 0x5a, 0x3d, 0x53, 0x14, 0x12, 0x32, 0xf1,
	0x2b, 0x90, 0x8b, 0xc5, 0x85, 0x04, 0x80, 0x33, 0xea, 0xf4, 0x3b, 0x54, 0x32, 0x37, 0x1e, 0x09,
	0x2f, 0xcc, 0x79, 0x14, 0x43, 0xad, 0xf5, 0xc0, 0x47, 0x29, 0x26, 0x49, 0x9d, 0xf1, 0x74, 0x29,
	0x9e, 0x2a, 0xb5, 0x2d, 0xa7, 0x20, 0x4b, 0x3b, 0x1d, 0xd7, 0x16, 0x42, 0x0f, 0x56, 0xb4, 0x9e,
	0x05, 0x3e, 0x8a, 0x5d, 0xd7, 0x3e, 0x5a, 0x1f, 0xd3, 0xa1, 0xb3, 0x8b, 0x23, 0x07, 0xfe, 0xe6,
	0xa3, 0xfb, 0xdd, 0xbe, 0xec, 0x79, 0xad, 0x5a, 0x9b, 0x0d, 0xeb, 0x6d, 0x36, 0xb4, 0x65, 0xeb,
	0x54, 0xa6, 0x0e, 0xee, 0x98, 0x4b, 0x56, 0x6b, 0x86, 0x78, 0x12, 0x67, 0x82, 0x16, 0x00, 0xdc,
	0x6b, 0x39, 0xfd, 0xf6, 0xc9, 0xc0, 0x1e, 0x6b, 0x91, 0x8a, 0xd6, 0xbf, 0xaa, 0xd9, 0x99, 0xf7,
	0xda, 0x47, 0x9b, 0x61, 0xb5, 0x99, 0x0f, 0x93, 0x7c, 0x68, 0x3c, 0xb5, 0xc7, 0x70, 0x07, 0xac,
	0xbd, 0xa6, 0x7d, 0xc7, 0xee, 0xe8, 0xfd, 0xcc, 0x59, 0x7f, 0x05, 0x3e, 0x8a, 0x3c, 0xd7, 0x3e,
	0x2a, 0x85, 0xdc, 0xd0, 0xc6, 0x24, 0x0a, 0x28, 0x92, 0xfa, 0x1b, 0x3d, 0x51, 0x5e, 0xa9, 0x18,
	0xd5, 0xd5, 0x90, 0x14, 0x7a, 0x66, 0xa4, 0xd0, 0xc6, 0x24, 0x0a, 0xc0, 0x3a, 0x28, 0x09, 0x49,
	0x07, 0x76, 0xe7, 0x44, 0xb2, 0x81, 0x3d, 0x12, 0xe5, 0x35, 0x7d, 0xe9, 0x40, 0x71, 0x43, 0x0f,
	0x29, 0x86, 0x80, 0x43, 0x6d, 0xed, 0xe6, 0xde, 0x5e, 0xa0, 0xcc, 0xd7, 0x0b, 0x64, 0xe0, 0x8f,
	0x4b, 0x60, 0x7d, 0xfe, 0x52, 0x94, 0xc6, 0xcd, 0xdf, 0xa9, 0x71, 0x74, 0x80, 0x4d, 0x90, 0xdf,
	0x8f, 0xc5, 0xfa, 0x25, 0x89, 0x13, 0x16, 0xc4, 0x37, 0x24, 0x06, 0x33, 0x89, 0x13, 0x45, 0xf1,
	0x0d, 0x45, 0xc1, 0x4c, 0xd1, 0x44, 0xc0, 0x1a, 0x28, 0x1e, 0xa4, 0xf4, 0x29, 0x67, 0x6f, 0xeb,
	0x97, 0x8e, 0xef, 0x16, 0x95, 0x7e, 0x1f, 0x2e, 0x90, 0xa1, 0x34, 0xb4, 0xf6, 0x3f, 0x4d, 0x4c,
	0xe3, 0x72, 0x62, 0x1a, 0x57, 0x13, 0xd3, 0xf8, 0x32, 0x31, 0x8d, 0xf7, 0x53, 0x33, 0x73, 0x39,
	0x35, 0x33, 0x57, 0x53, 0x33, 0x73, 0xdc, 0x48, 0x89, 0xa3, 0xfe, 0x88, 0x07, 0x23, 0x5b, 0xbe,
	0x61, 0xee, 0xa0, 0x9e, 0xbc, 0x08, 0xe7, 0x37, 0xdf, 0x84, 0xd6, 0x9a, 0x7e, 0x14, 0x76, 0xbe,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x70, 0x19, 0x49, 0x20, 0x81, 0x06, 0x00, 0x00,
}

func (this *MorseApplication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MorseApplication)
	if !ok {
		that2, ok := that.(MorseApplication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StakedTokens != that1.StakedTokens {
		return false
	}
	return true
}
func (this *MorseValidator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MorseValidator)
	if !ok {
		that2, ok := that.(MorseValidator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StakedTokens != that1.StakedTokens {
		return false
	}
	return true
}
func (m *MorseStateExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseStateExport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseStateExport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppState != nil {
		{
			size, err := m.AppState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorseAppState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAppState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAppState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorseApplications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseApplications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseApplications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for iNdEx := len(m.Applications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseAuthAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAuthAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAuthAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorsePos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorsePos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorsePos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakedTokens) > 0 {
		i -= len(m.StakedTokens)
		copy(dAtA[i:], m.StakedTokens)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.StakedTokens)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorseValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakedTokens) > 0 {
		i -= len(m.StakedTokens)
		copy(dAtA[i:], m.StakedTokens)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.StakedTokens)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseStateExport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.AppState != nil {
		l = m.AppState.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorseAppState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorseApplications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func (m *MorseAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func (m *MorseAuthAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorsePos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func (m *MorseApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovLegacy(uint64(m.Status))
	}
	l = len(m.StakedTokens)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorseValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovLegacy(uint64(m.Status))
	}
	l = len(m.StakedTokens)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func sovLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacy(x uint64) (n int) {
	return sovLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseStateExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseStateExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseStateExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppState == nil {
				m.AppState = &MorseAppState{}
			}
			if err := m.AppState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAppState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAppState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAppState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &MorseApplications{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &MorseAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &MorsePos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseApplications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseApplications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseApplications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &MorseApplication{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MorseAuthAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAuthAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAuthAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAuthAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &MorseAccount{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorsePos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorsePos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorsePos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &MorseValidator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedTokens = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedTokens = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacy = fmt.Errorf("proto: unexpected end of group")
)
