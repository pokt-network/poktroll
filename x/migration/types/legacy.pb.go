// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/legacy.proto

// Types in this file are ONLY present to facilitate the verifiability of the
// migration state from Morse to Shannon. These types are used by the migration
// subcommand (e.g. `poktrolld migrate collect-morse-accounts ...) to transform
// the Morse state export into the Shannon state import. They ARE NOT persisted
// on-chain at any point.

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MorseStateExport struct {
	AppHash  string         `protobuf:"bytes,1,opt,name=app_hash,json=appHash,proto3" json:"app_hash"`
	AppState *MorseAppState `protobuf:"bytes,2,opt,name=app_state,json=appState,proto3" json:"app_state"`
}

func (m *MorseStateExport) Reset()         { *m = MorseStateExport{} }
func (m *MorseStateExport) String() string { return proto.CompactTextString(m) }
func (*MorseStateExport) ProtoMessage()    {}
func (*MorseStateExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{0}
}
func (m *MorseStateExport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseStateExport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseStateExport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseStateExport.Merge(m, src)
}
func (m *MorseStateExport) XXX_Size() int {
	return m.Size()
}
func (m *MorseStateExport) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseStateExport.DiscardUnknown(m)
}

var xxx_messageInfo_MorseStateExport proto.InternalMessageInfo

func (m *MorseStateExport) GetAppHash() string {
	if m != nil {
		return m.AppHash
	}
	return ""
}

func (m *MorseStateExport) GetAppState() *MorseAppState {
	if m != nil {
		return m.AppState
	}
	return nil
}

type MorseAppState struct {
	Application *MorseApplications `protobuf:"bytes,1,opt,name=application,proto3" json:"application"`
	Auth        *MorseAuth         `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth"`
	Pos         *MorsePos          `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos"`
}

func (m *MorseAppState) Reset()         { *m = MorseAppState{} }
func (m *MorseAppState) String() string { return proto.CompactTextString(m) }
func (*MorseAppState) ProtoMessage()    {}
func (*MorseAppState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{1}
}
func (m *MorseAppState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAppState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAppState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAppState.Merge(m, src)
}
func (m *MorseAppState) XXX_Size() int {
	return m.Size()
}
func (m *MorseAppState) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAppState.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAppState proto.InternalMessageInfo

func (m *MorseAppState) GetApplication() *MorseApplications {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *MorseAppState) GetAuth() *MorseAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *MorseAppState) GetPos() *MorsePos {
	if m != nil {
		return m.Pos
	}
	return nil
}

type MorseApplications struct {
	Applications []*MorseApplication `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications"`
}

func (m *MorseApplications) Reset()         { *m = MorseApplications{} }
func (m *MorseApplications) String() string { return proto.CompactTextString(m) }
func (*MorseApplications) ProtoMessage()    {}
func (*MorseApplications) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{2}
}
func (m *MorseApplications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseApplications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseApplications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseApplications.Merge(m, src)
}
func (m *MorseApplications) XXX_Size() int {
	return m.Size()
}
func (m *MorseApplications) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseApplications.DiscardUnknown(m)
}

var xxx_messageInfo_MorseApplications proto.InternalMessageInfo

func (m *MorseApplications) GetApplications() []*MorseApplication {
	if m != nil {
		return m.Applications
	}
	return nil
}

type MorseAuthAccount struct {
	Type  string        `protobuf:"bytes,1,opt,name=Type,proto3" json:"type"`
	Value *MorseAccount `protobuf:"bytes,2,opt,name=Value,proto3" json:"value"`
}

func (m *MorseAuthAccount) Reset()         { *m = MorseAuthAccount{} }
func (m *MorseAuthAccount) String() string { return proto.CompactTextString(m) }
func (*MorseAuthAccount) ProtoMessage()    {}
func (*MorseAuthAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{3}
}
func (m *MorseAuthAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAuthAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAuthAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAuthAccount.Merge(m, src)
}
func (m *MorseAuthAccount) XXX_Size() int {
	return m.Size()
}
func (m *MorseAuthAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAuthAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAuthAccount proto.InternalMessageInfo

func (m *MorseAuthAccount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MorseAuthAccount) GetValue() *MorseAccount {
	if m != nil {
		return m.Value
	}
	return nil
}

type MorseAuth struct {
	Accounts []*MorseAuthAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
}

func (m *MorseAuth) Reset()         { *m = MorseAuth{} }
func (m *MorseAuth) String() string { return proto.CompactTextString(m) }
func (*MorseAuth) ProtoMessage()    {}
func (*MorseAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{4}
}
func (m *MorseAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorseAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAuth.Merge(m, src)
}
func (m *MorseAuth) XXX_Size() int {
	return m.Size()
}
func (m *MorseAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAuth.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAuth proto.InternalMessageInfo

func (m *MorseAuth) GetAccounts() []*MorseAuthAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type MorsePos struct {
	Validators []*MorseValidator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
}

func (m *MorsePos) Reset()         { *m = MorsePos{} }
func (m *MorsePos) String() string { return proto.CompactTextString(m) }
func (*MorsePos) ProtoMessage()    {}
func (*MorsePos) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba469df9d72c7fc, []int{5}
}
func (m *MorsePos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorsePos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MorsePos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorsePos.Merge(m, src)
}
func (m *MorsePos) XXX_Size() int {
	return m.Size()
}
func (m *MorsePos) XXX_DiscardUnknown() {
	xxx_messageInfo_MorsePos.DiscardUnknown(m)
}

var xxx_messageInfo_MorsePos proto.InternalMessageInfo

func (m *MorsePos) GetValidators() []*MorseValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func init() {
	proto.RegisterType((*MorseStateExport)(nil), "poktroll.migration.MorseStateExport")
	proto.RegisterType((*MorseAppState)(nil), "poktroll.migration.MorseAppState")
	proto.RegisterType((*MorseApplications)(nil), "poktroll.migration.MorseApplications")
	proto.RegisterType((*MorseAuthAccount)(nil), "poktroll.migration.MorseAuthAccount")
	proto.RegisterType((*MorseAuth)(nil), "poktroll.migration.MorseAuth")
	proto.RegisterType((*MorsePos)(nil), "poktroll.migration.MorsePos")
}

func init() { proto.RegisterFile("poktroll/migration/legacy.proto", fileDescriptor_3ba469df9d72c7fc) }

var fileDescriptor_3ba469df9d72c7fc = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x92, 0x96, 0x26, 0x93, 0x16, 0xca, 0x8a, 0x43, 0x54, 0x15, 0x3b, 0x58, 0x20, 0x72,
	0xc1, 0x96, 0xc2, 0x81, 0x03, 0xa7, 0xac, 0x84, 0xc4, 0xa5, 0xa8, 0x5a, 0x50, 0x85, 0x8a, 0x04,
	0xda, 0x1a, 0xcb, 0xb6, 0xea, 0x66, 0x57, 0xde, 0x75, 0x69, 0xfe, 0x02, 0x27, 0x7e, 0x16, 0xc7,
	0x1e, 0x7b, 0x32, 0x28, 0xb9, 0xf9, 0x57, 0xa0, 0x5d, 0x7f, 0xd4, 0xa1, 0xa4, 0xea, 0xc5, 0xda,
	0x9d, 0x79, 0xef, 0xcd, 0x1b, 0xcf, 0x0e, 0xd8, 0x82, 0x9f, 0xaa, 0x94, 0x27, 0x89, 0x77, 0x16,
	0x87, 0x29, 0x53, 0x31, 0x9f, 0x79, 0x49, 0x10, 0x32, 0x7f, 0xee, 0x8a, 0x94, 0x2b, 0x8e, 0x71,
	0x0d, 0x70, 0x1b, 0xc0, 0xde, 0xe3, 0x90, 0x87, 0xdc, 0xa4, 0x3d, 0x7d, 0x2a, 0x91, 0x7b, 0xd6,
	0x7f, 0xa4, 0xd4, 0x5c, 0x04, 0xb2, 0xcc, 0x3b, 0x3f, 0x10, 0xec, 0x1e, 0xf0, 0x54, 0x06, 0x1f,
	0x14, 0x53, 0xc1, 0xdb, 0x0b, 0xc1, 0x53, 0x85, 0x5f, 0x40, 0x8f, 0x09, 0xf1, 0x35, 0x62, 0x32,
	0x1a, 0xa2, 0x11, 0x1a, 0xf7, 0xc9, 0x76, 0x91, 0xdb, 0x4d, 0x8c, 0x6e, 0x31, 0x21, 0xde, 0x31,
	0x19, 0xe1, 0x03, 0xe8, 0xeb, 0xa0, 0xd4, 0xdc, 0xe1, 0xbd, 0x11, 0x1a, 0x0f, 0x26, 0x4f, 0xdd,
	0x9b, 0xde, 0x5c, 0x53, 0x61, 0x2a, 0x84, 0x29, 0x42, 0x76, 0x8a, 0xdc, 0xbe, 0xe6, 0x51, 0xad,
	0x6b, 0x12, 0xce, 0x6f, 0x04, 0x3b, 0x2b, 0x50, 0xfc, 0x09, 0x06, 0x4c, 0x88, 0x24, 0xf6, 0x8d,
	0x8e, 0x31, 0x33, 0x98, 0x3c, 0xbf, 0xad, 0x44, 0x8d, 0x95, 0xe4, 0x61, 0x91, 0xdb, 0x6d, 0x36,
	0x6d, 0x5f, 0xf0, 0x1b, 0xd8, 0x60, 0x99, 0x8a, 0x2a, 0xd7, 0x4f, 0xd6, 0x4b, 0x66, 0x2a, 0x22,
	0xbd, 0x22, 0xb7, 0x0d, 0x9c, 0x9a, 0x2f, 0x7e, 0x0d, 0x5d, 0xc1, 0xe5, 0xb0, 0x6b, 0xb8, 0xfb,
	0x6b, 0xb9, 0x87, 0x5c, 0x92, 0xad, 0x22, 0xb7, 0x35, 0x98, 0xea, 0x8f, 0xc3, 0xe1, 0xd1, 0x0d,
	0xa3, 0xf8, 0x18, 0xb6, 0x5b, 0xce, 0xe4, 0x10, 0x8d, 0xba, 0xe3, 0xc1, 0xe4, 0xd9, 0x5d, 0xba,
	0x24, 0xbb, 0x45, 0x6e, 0xaf, 0xb0, 0xe9, 0xca, 0xcd, 0x91, 0xd5, 0x78, 0x75, 0x1b, 0x53, 0xdf,
	0xe7, 0xd9, 0x4c, 0xe1, 0x7d, 0xd8, 0xf8, 0x38, 0x17, 0x41, 0x35, 0x5a, 0xd3, 0x9b, 0x7e, 0x12,
	0xd4, 0x44, 0xf1, 0x14, 0x36, 0x8f, 0x58, 0x92, 0xd5, 0xf3, 0x1c, 0xad, 0xb7, 0x51, 0xca, 0x91,
	0x7e, 0x91, 0xdb, 0x9b, 0xe7, 0x9a, 0x42, 0x4b, 0xa6, 0xf3, 0x19, 0xfa, 0x4d, 0x51, 0xfc, 0x1e,
	0x7a, 0xac, 0x44, 0xde, 0xa1, 0xb3, 0x6b, 0x97, 0xd5, 0x93, 0xab, 0x98, 0xb4, 0x39, 0x39, 0x5f,
	0xa0, 0x57, 0xff, 0x5c, 0x4c, 0x01, 0xce, 0x59, 0x12, 0x7f, 0x63, 0x8a, 0xa7, 0xb5, 0xba, 0xb3,
	0x56, 0xfd, 0xa8, 0x86, 0x92, 0x07, 0x45, 0x6e, 0xb7, 0x98, 0xb4, 0x75, 0x26, 0x87, 0xbf, 0x16,
	0x16, 0xba, 0x5c, 0x58, 0xe8, 0x6a, 0x61, 0xa1, 0x3f, 0x0b, 0x0b, 0xfd, 0x5c, 0x5a, 0x9d, 0xcb,
	0xa5, 0xd5, 0xb9, 0x5a, 0x5a, 0x9d, 0xe3, 0x49, 0x18, 0xab, 0x28, 0x3b, 0x71, 0x7d, 0x7e, 0xe6,
	0xe9, 0x3a, 0x2f, 0x67, 0x81, 0xfa, 0xce, 0xd3, 0x53, 0xaf, 0xd9, 0xb3, 0x8b, 0x7f, 0x37, 0xed,
	0xe4, 0xbe, 0x59, 0xb5, 0x57, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xf5, 0x9c, 0x74, 0xd7,
	0x03, 0x00, 0x00,
}

func (m *MorseStateExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseStateExport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseStateExport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppState != nil {
		{
			size, err := m.AppState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorseAppState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAppState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAppState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorseApplications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseApplications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseApplications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for iNdEx := len(m.Applications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorseAuthAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAuthAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAuthAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MorseAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MorsePos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorsePos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorsePos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseStateExport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.AppState != nil {
		l = m.AppState.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorseAppState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorseApplications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func (m *MorseAuthAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MorseAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func (m *MorsePos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func sovLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacy(x uint64) (n int) {
	return sovLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseStateExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseStateExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseStateExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppState == nil {
				m.AppState = &MorseAppState{}
			}
			if err := m.AppState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAppState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAppState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAppState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &MorseApplications{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &MorseAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &MorsePos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseApplications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseApplications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseApplications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &MorseApplication{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAuthAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAuthAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAuthAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &MorseAccount{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorseAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MorseAuthAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MorsePos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorsePos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorsePos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &MorseValidator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacy = fmt.Errorf("proto: unexpected end of group")
)
