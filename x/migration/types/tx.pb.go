// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/pokt-network/poktroll/x/application/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgImportMorseClaimableAccounts is used to create the on-chain MorseClaimableAccounts ONLY AND EXACTLY ONCE (per network / re-genesis).
type MsgImportMorseClaimableAccounts struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// the account state derived from the Morse state export and the `poktrolld migrate collect-morse-accounts` command.
	MorseAccountState MorseAccountState `protobuf:"bytes,2,opt,name=morse_account_state,json=morseAccountState,proto3" json:"morse_account_state"`
	// Validates the morse_account_state sha256 hash:
	// - Transaction fails if hash doesn't match on-chain computation
	// - Off-chain social consensus should be reached off-chain before verification
	//
	// Verification can be done by comparing with locally derived Morse state like so:
	//   $ poktrolld migrate collect-morse-accounts $<(pocket util export-genesis-for-reset)
	//
	// Additional documentation:
	// - pocket util export-genesis-for-migration --help
	// - poktrolld migrate collect-morse-accounts --help
	MorseAccountStateHash []byte `protobuf:"bytes,3,opt,name=morse_account_state_hash,json=morseAccountStateHash,proto3" json:"morse_account_state_hash"`
}

func (m *MsgImportMorseClaimableAccounts) Reset()         { *m = MsgImportMorseClaimableAccounts{} }
func (m *MsgImportMorseClaimableAccounts) String() string { return proto.CompactTextString(m) }
func (*MsgImportMorseClaimableAccounts) ProtoMessage()    {}
func (*MsgImportMorseClaimableAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{2}
}
func (m *MsgImportMorseClaimableAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgImportMorseClaimableAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgImportMorseClaimableAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgImportMorseClaimableAccounts.Merge(m, src)
}
func (m *MsgImportMorseClaimableAccounts) XXX_Size() int {
	return m.Size()
}
func (m *MsgImportMorseClaimableAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgImportMorseClaimableAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgImportMorseClaimableAccounts proto.InternalMessageInfo

func (m *MsgImportMorseClaimableAccounts) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgImportMorseClaimableAccounts) GetMorseAccountState() MorseAccountState {
	if m != nil {
		return m.MorseAccountState
	}
	return MorseAccountState{}
}

func (m *MsgImportMorseClaimableAccounts) GetMorseAccountStateHash() []byte {
	if m != nil {
		return m.MorseAccountStateHash
	}
	return nil
}

// MsgImportMorseClaimableAccountsResponse is returned from MsgImportMorseClaimableAccounts.
// It indicates the canonical hash of the imported MorseAccountState, and the number of claimable accounts which were imported.
type MsgImportMorseClaimableAccountsResponse struct {
	// On-chain computed sha256 hash of the morse_account_state provided in the corresponding MsgCreateMorseAccountState.
	StateHash []byte `protobuf:"bytes,1,opt,name=state_hash,json=stateHash,proto3" json:"state_hash"`
	// Number of claimable accounts (EOAs) collected from Morse state export.
	NumAccounts uint64 `protobuf:"varint,2,opt,name=num_accounts,json=numAccounts,proto3" json:"num_accounts"`
}

func (m *MsgImportMorseClaimableAccountsResponse) Reset() {
	*m = MsgImportMorseClaimableAccountsResponse{}
}
func (m *MsgImportMorseClaimableAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgImportMorseClaimableAccountsResponse) ProtoMessage()    {}
func (*MsgImportMorseClaimableAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{3}
}
func (m *MsgImportMorseClaimableAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgImportMorseClaimableAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgImportMorseClaimableAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgImportMorseClaimableAccountsResponse.Merge(m, src)
}
func (m *MsgImportMorseClaimableAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgImportMorseClaimableAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgImportMorseClaimableAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgImportMorseClaimableAccountsResponse proto.InternalMessageInfo

func (m *MsgImportMorseClaimableAccountsResponse) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *MsgImportMorseClaimableAccountsResponse) GetNumAccounts() uint64 {
	if m != nil {
		return m.NumAccounts
	}
	return 0
}

// MsgClaimMorseAccount is used to execute a claim (one-time minting of tokens on Shannon),
// of the balance of the given Morse account, according to the on-chain MorseClaimableAccounts,
// to the balance of the given Shannon account.
//
// NOTE:
// - The Shannon account specified must be the message signer
// - Authz grants MAY be used to delegate claiming authority to other Shannon accounts
type MsgClaimMorseAccount struct {
	// The bech32-encoded address of the Shannon account to which the claimed balance will be minted.
	ShannonDestAddress string `protobuf:"bytes,1,opt,name=shannon_dest_address,json=shannonDestAddress,proto3" json:"shannon_dest_address"`
	// The hex-encoded address of the Morse account whose balance will be claimed.
	// E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
	MorseSrcAddress string `protobuf:"bytes,2,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address"`
	// The hex-encoded signature, by the Morse account, of this message (where this field is nil).
	// I.e.: morse_signature = private_key.sign(marshal(MsgClaimMorseAccount{morse_signature: nil, ...}))
	MorseSignature []byte `protobuf:"bytes,3,opt,name=morse_signature,json=morseSignature,proto3" json:"morse_signature"`
}

func (m *MsgClaimMorseAccount) Reset()         { *m = MsgClaimMorseAccount{} }
func (m *MsgClaimMorseAccount) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMorseAccount) ProtoMessage()    {}
func (*MsgClaimMorseAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{4}
}
func (m *MsgClaimMorseAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMorseAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgClaimMorseAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMorseAccount.Merge(m, src)
}
func (m *MsgClaimMorseAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMorseAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMorseAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMorseAccount proto.InternalMessageInfo

func (m *MsgClaimMorseAccount) GetShannonDestAddress() string {
	if m != nil {
		return m.ShannonDestAddress
	}
	return ""
}

func (m *MsgClaimMorseAccount) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *MsgClaimMorseAccount) GetMorseSignature() []byte {
	if m != nil {
		return m.MorseSignature
	}
	return nil
}

// MsgClaimMorseAccountResponse is returned from MsgClaimMorseAccount.
// It indicates the morse_src_address of the account which was claimed, the total
// balance claimed, and the height at which the claim was committed.
type MsgClaimMorseAccountResponse struct {
	// The hex-encoded address of the Morse account whose balance will be claimed.
	// E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
	MorseSrcAddress string `protobuf:"bytes,1,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address"`
	// The balance which was claimed.
	ClaimedBalance types.Coin `protobuf:"bytes,2,opt,name=claimed_balance,json=claimedBalance,proto3" json:"claimed_balance"`
	// The height (on Shannon) at which the claim was created.
	ClaimedAtHeight int64 `protobuf:"varint,3,opt,name=claimed_at_height,json=claimedAtHeight,proto3" json:"claimed_at_height,omitempty"`
}

func (m *MsgClaimMorseAccountResponse) Reset()         { *m = MsgClaimMorseAccountResponse{} }
func (m *MsgClaimMorseAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMorseAccountResponse) ProtoMessage()    {}
func (*MsgClaimMorseAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{5}
}
func (m *MsgClaimMorseAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMorseAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgClaimMorseAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMorseAccountResponse.Merge(m, src)
}
func (m *MsgClaimMorseAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMorseAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMorseAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMorseAccountResponse proto.InternalMessageInfo

func (m *MsgClaimMorseAccountResponse) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *MsgClaimMorseAccountResponse) GetClaimedBalance() types.Coin {
	if m != nil {
		return m.ClaimedBalance
	}
	return types.Coin{}
}

func (m *MsgClaimMorseAccountResponse) GetClaimedAtHeight() int64 {
	if m != nil {
		return m.ClaimedAtHeight
	}
	return 0
}

// MsgClaimMorseApplication is used to execute a claim (one-time minting of tokens on Shannon),
// of the total tokens owned by the given Morse account, according to the on-chain MorseClaimableAccounts,
// to the balance of the given Shannon account, followed by staking that Shannon account as an application.
type MsgClaimMorseApplication struct {
	// The bech32-encoded address of the Shannon account to which the claimed tokens
	// will be minted and from which the application will be staked.
	ShannonDestAddress string `protobuf:"bytes,1,opt,name=shannonDestAddress,proto3" json:"shannonDestAddress,omitempty"`
	// The hex-encoded address of the Morse account whose balance will be claimed.
	// E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
	MorseSrcAddress string `protobuf:"bytes,2,opt,name=morseSrcAddress,proto3" json:"morseSrcAddress,omitempty"`
	// The hex-encoded signature, by the Morse account, of this message (where this field is nil).
	// I.e.: morse_signature = private_key.sign(marshal(MsgClaimMorseAccount{morse_signature: nil, ...}))
	MorseSignature string `protobuf:"bytes,3,opt,name=morseSignature,proto3" json:"morseSignature,omitempty"`
	// The upokt which the Shannon destination account will stake as an application.
	Stake types.Coin `protobuf:"bytes,4,opt,name=stake,proto3" json:"stake"`
	// The services this application is staked to request service for.
	// NOTE: This is not a repeated field, as in MsgStakeApplication,
	// because an application can only be staked for one service.
	ServiceConfig string `protobuf:"bytes,5,opt,name=serviceConfig,proto3" json:"serviceConfig,omitempty"`
}

func (m *MsgClaimMorseApplication) Reset()         { *m = MsgClaimMorseApplication{} }
func (m *MsgClaimMorseApplication) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMorseApplication) ProtoMessage()    {}
func (*MsgClaimMorseApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{6}
}
func (m *MsgClaimMorseApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMorseApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgClaimMorseApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMorseApplication.Merge(m, src)
}
func (m *MsgClaimMorseApplication) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMorseApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMorseApplication.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMorseApplication proto.InternalMessageInfo

func (m *MsgClaimMorseApplication) GetShannonDestAddress() string {
	if m != nil {
		return m.ShannonDestAddress
	}
	return ""
}

func (m *MsgClaimMorseApplication) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *MsgClaimMorseApplication) GetMorseSignature() string {
	if m != nil {
		return m.MorseSignature
	}
	return ""
}

func (m *MsgClaimMorseApplication) GetStake() types.Coin {
	if m != nil {
		return m.Stake
	}
	return types.Coin{}
}

func (m *MsgClaimMorseApplication) GetServiceConfig() string {
	if m != nil {
		return m.ServiceConfig
	}
	return ""
}

// MsgClaimMorseApplicationResponse is returned from MsgClaimMorseApplication.
// It indicates the morse_src_address of the account which was claimed, the unstaked
// balance claimed, the application stake, and the height at which the claim was committed.
type MsgClaimMorseApplicationResponse struct {
	// The hex-encoded address of the Morse account whose balance will be claimed.
	MorseSrcAddress string `protobuf:"bytes,1,opt,name=morseSrcAddress,proto3" json:"morseSrcAddress,omitempty"`
	// The unstaked balance which was claimed.
	ClaimedBalance types.Coin `protobuf:"bytes,2,opt,name=claimedBalance,proto3" json:"claimedBalance"`
	// The stake of the application which was staked as a result of the claim.
	// If the application was already staked, this amount does not include the initial stake (i.e. only the portion which was "claimed").
	ClaimedApplicationStake types.Coin `protobuf:"bytes,3,opt,name=claimedApplicationStake,proto3" json:"claimedApplicationStake"`
	// The height (on Shannon) at which the claim was created.
	ClaimedAtHeight int32 `protobuf:"varint,4,opt,name=claimedAtHeight,proto3" json:"claimedAtHeight,omitempty"`
	// The application which was staked as a result of the claim.
	Application types1.Application `protobuf:"bytes,5,opt,name=application,proto3" json:"application"`
}

func (m *MsgClaimMorseApplicationResponse) Reset()         { *m = MsgClaimMorseApplicationResponse{} }
func (m *MsgClaimMorseApplicationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMorseApplicationResponse) ProtoMessage()    {}
func (*MsgClaimMorseApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21658240592266b6, []int{7}
}
func (m *MsgClaimMorseApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMorseApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgClaimMorseApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMorseApplicationResponse.Merge(m, src)
}
func (m *MsgClaimMorseApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMorseApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMorseApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMorseApplicationResponse proto.InternalMessageInfo

func (m *MsgClaimMorseApplicationResponse) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *MsgClaimMorseApplicationResponse) GetClaimedBalance() types.Coin {
	if m != nil {
		return m.ClaimedBalance
	}
	return types.Coin{}
}

func (m *MsgClaimMorseApplicationResponse) GetClaimedApplicationStake() types.Coin {
	if m != nil {
		return m.ClaimedApplicationStake
	}
	return types.Coin{}
}

func (m *MsgClaimMorseApplicationResponse) GetClaimedAtHeight() int32 {
	if m != nil {
		return m.ClaimedAtHeight
	}
	return 0
}

func (m *MsgClaimMorseApplicationResponse) GetApplication() types1.Application {
	if m != nil {
		return m.Application
	}
	return types1.Application{}
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "poktroll.migration.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "poktroll.migration.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgImportMorseClaimableAccounts)(nil), "poktroll.migration.MsgImportMorseClaimableAccounts")
	proto.RegisterType((*MsgImportMorseClaimableAccountsResponse)(nil), "poktroll.migration.MsgImportMorseClaimableAccountsResponse")
	proto.RegisterType((*MsgClaimMorseAccount)(nil), "poktroll.migration.MsgClaimMorseAccount")
	proto.RegisterType((*MsgClaimMorseAccountResponse)(nil), "poktroll.migration.MsgClaimMorseAccountResponse")
	proto.RegisterType((*MsgClaimMorseApplication)(nil), "poktroll.migration.MsgClaimMorseApplication")
	proto.RegisterType((*MsgClaimMorseApplicationResponse)(nil), "poktroll.migration.MsgClaimMorseApplicationResponse")
}

func init() { proto.RegisterFile("poktroll/migration/tx.proto", fileDescriptor_21658240592266b6) }

var fileDescriptor_21658240592266b6 = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x3d, 0x6f, 0xdb, 0x46,
	0x18, 0x36, 0x25, 0x3b, 0x80, 0x5e, 0xbb, 0x76, 0xcd, 0xd8, 0x90, 0xac, 0x18, 0xa2, 0xaa, 0xa6,
	0xa9, 0xe0, 0xd6, 0x64, 0x6c, 0xf7, 0x03, 0x70, 0xdb, 0xc1, 0x72, 0x81, 0x26, 0x83, 0x80, 0x80,
	0x46, 0x86, 0xb6, 0x03, 0x7b, 0xa2, 0xae, 0x24, 0x61, 0x91, 0x47, 0xf0, 0x4e, 0x6e, 0x82, 0x2e,
	0x45, 0xc7, 0x02, 0x05, 0x82, 0x0e, 0xfd, 0x0d, 0x1d, 0x3d, 0xe4, 0x0f, 0x74, 0xcb, 0x18, 0x74,
	0xca, 0x24, 0x14, 0x36, 0x0a, 0x03, 0x5a, 0xfa, 0x17, 0x02, 0xf2, 0x8e, 0x94, 0x44, 0x9d, 0x22,
	0xc7, 0x8b, 0x6d, 0xbe, 0xef, 0xf3, 0x7e, 0x3c, 0xcf, 0x73, 0x3e, 0x12, 0xee, 0x84, 0xe4, 0x94,
	0x45, 0xa4, 0xd7, 0x33, 0x7c, 0xcf, 0x89, 0x10, 0xf3, 0x48, 0x60, 0xb0, 0x27, 0x7a, 0x18, 0x11,
	0x46, 0x54, 0x35, 0x4d, 0xea, 0x59, 0xb2, 0xba, 0x8e, 0x7c, 0x2f, 0x20, 0x46, 0xf2, 0x93, 0xc3,
	0xaa, 0x65, 0x9b, 0x50, 0x9f, 0x50, 0xc3, 0xa7, 0x8e, 0x71, 0xb6, 0x17, 0xff, 0x12, 0x89, 0x2d,
	0x9e, 0xb0, 0x92, 0x27, 0x83, 0x3f, 0x88, 0xd4, 0x86, 0x43, 0x1c, 0xc2, 0xe3, 0xf1, 0x5f, 0x22,
	0x7a, 0x4f, 0xb2, 0x8d, 0x4f, 0x22, 0x8a, 0x2d, 0x12, 0xd8, 0x2e, 0xf2, 0x02, 0x81, 0xd3, 0x24,
	0xb8, 0x10, 0x45, 0xc8, 0x4f, 0xdb, 0xd7, 0x33, 0x00, 0x0a, 0xc3, 0x9e, 0x67, 0x0b, 0x62, 0x4f,
	0x43, 0x9c, 0x22, 0x6a, 0x62, 0xe9, 0x0e, 0xa2, 0xd8, 0x38, 0xdb, 0xeb, 0x60, 0x86, 0xf6, 0x0c,
	0x9b, 0xa4, 0x23, 0x1a, 0x7f, 0x2b, 0xb0, 0xd6, 0xa6, 0xce, 0xe3, 0xb0, 0x8b, 0x18, 0x7e, 0x94,
	0xf4, 0x56, 0x3f, 0x83, 0x12, 0xea, 0x33, 0x97, 0x44, 0x1e, 0x7b, 0x5a, 0x51, 0xea, 0x4a, 0xb3,
	0xd4, 0xaa, 0xfc, 0xf3, 0x7c, 0x77, 0x43, 0x30, 0x3b, 0xea, 0x76, 0x23, 0x4c, 0xe9, 0x09, 0x8b,
	0xbc, 0xc0, 0x31, 0x47, 0x50, 0xf5, 0x2b, 0xb8, 0xc5, 0xb7, 0xab, 0x14, 0xea, 0x4a, 0x73, 0x79,
	0xbf, 0xaa, 0x4f, 0x0b, 0xab, 0xf3, 0x19, 0xad, 0xd2, 0x8b, 0x81, 0xb6, 0xf0, 0xd7, 0xd5, 0xf9,
	0x8e, 0x62, 0x8a, 0xa2, 0xc3, 0xcf, 0x7f, 0xbd, 0x3a, 0xdf, 0x19, 0xb5, 0xfb, 0xed, 0xea, 0x7c,
	0xe7, 0x6e, 0xc6, 0xef, 0xc9, 0x98, 0x04, 0xb9, 0x7d, 0x1b, 0x5b, 0x50, 0xce, 0x85, 0x4c, 0x4c,
	0x43, 0x12, 0x50, 0xdc, 0x78, 0x5e, 0x00, 0xad, 0x4d, 0x9d, 0x87, 0x7e, 0x48, 0x22, 0xd6, 0x8e,
	0x25, 0x3e, 0xee, 0x21, 0xcf, 0x47, 0x9d, 0x1e, 0x3e, 0xb2, 0x6d, 0xd2, 0x0f, 0xd8, 0xcd, 0xe9,
	0x46, 0x70, 0x9b, 0x9b, 0x86, 0x78, 0x27, 0x8b, 0x32, 0xc4, 0xb0, 0xe0, 0xfe, 0x81, 0x8c, 0x7b,
	0xb2, 0x80, 0x98, 0x7b, 0x12, 0x83, 0x5b, 0x77, 0x62, 0x19, 0x86, 0x03, 0x4d, 0xd6, 0xc9, 0x5c,
	0xf7, 0xf3, 0x78, 0xf5, 0x31, 0x54, 0x24, 0x48, 0xcb, 0x45, 0xd4, 0xad, 0x14, 0xeb, 0x4a, 0x73,
	0xa5, 0xb5, 0x3d, 0x1c, 0x68, 0x33, 0x31, 0xe6, 0xe6, 0x54, 0xcb, 0x07, 0x88, 0xba, 0x87, 0xab,
	0x93, 0xd2, 0x37, 0x7e, 0x57, 0xe0, 0xc3, 0x39, 0xb2, 0xa5, 0x12, 0xab, 0xbb, 0x00, 0x63, 0x4b,
	0x28, 0xc9, 0x12, 0xab, 0xc3, 0x81, 0x36, 0x16, 0x35, 0x4b, 0x34, 0x1d, 0xa5, 0x1e, 0xc0, 0x4a,
	0xd0, 0xf7, 0xd3, 0xdd, 0xf8, 0x51, 0x59, 0x6c, 0xbd, 0x3b, 0x1c, 0x68, 0x13, 0x71, 0x73, 0x39,
	0xe8, 0xfb, 0xe9, 0xac, 0xc6, 0x9f, 0x05, 0xd8, 0x68, 0x53, 0x27, 0x59, 0x62, 0x5c, 0x44, 0xb5,
	0x03, 0x1b, 0xd4, 0x45, 0x41, 0x40, 0x02, 0xab, 0x8b, 0x29, 0xb3, 0x10, 0x37, 0x4b, 0xd8, 0x78,
	0x7f, 0x38, 0xd0, 0xa4, 0xf9, 0x99, 0xf6, 0xaa, 0x02, 0xfd, 0x35, 0xa6, 0x4c, 0x64, 0xd4, 0x23,
	0xe0, 0x46, 0x58, 0x34, 0xb2, 0xb3, 0x01, 0x85, 0x64, 0xc0, 0xe6, 0x70, 0xa0, 0x4d, 0x27, 0xcd,
	0xb5, 0x24, 0x74, 0x12, 0xd9, 0x69, 0x8b, 0x2f, 0x61, 0x4d, 0xa0, 0x3c, 0x27, 0x40, 0xac, 0x1f,
	0x61, 0xe1, 0xd6, 0xed, 0xe1, 0x40, 0xcb, 0xa7, 0xcc, 0x55, 0x5e, 0x9e, 0x3e, 0x1f, 0x6e, 0xc5,
	0xee, 0x48, 0x79, 0x34, 0x86, 0x0a, 0x6c, 0xcb, 0x84, 0xc9, 0xdc, 0x91, 0x2e, 0xaf, 0xbc, 0xd5,
	0xf2, 0xdf, 0xc3, 0x9a, 0x1d, 0xf7, 0xc7, 0x5d, 0xab, 0x83, 0x7a, 0x28, 0xb0, 0xd3, 0x33, 0xbe,
	0xa5, 0x0b, 0x0d, 0xe3, 0xcb, 0x45, 0x17, 0x97, 0x8b, 0x7e, 0x4c, 0xbc, 0xa0, 0x55, 0x16, 0xe7,
	0x3a, 0x5f, 0x69, 0xae, 0x8a, 0x40, 0x8b, 0x3f, 0xab, 0x3b, 0xb0, 0x9e, 0x42, 0x10, 0xb3, 0x5c,
	0xec, 0x39, 0x2e, 0x4b, 0xb4, 0x29, 0x9a, 0x69, 0xed, 0x11, 0x7b, 0x90, 0x84, 0x1b, 0x7f, 0x14,
	0xa0, 0x32, 0x49, 0x76, 0x74, 0xe9, 0xa9, 0x3a, 0x48, 0xbc, 0xe3, 0x4c, 0xa5, 0xae, 0x36, 0x21,
	0x4f, 0x94, 0x7b, 0x3a, 0xcd, 0xff, 0x1e, 0xe4, 0x0c, 0x49, 0xf6, 0x2b, 0xe5, 0x6d, 0x52, 0x3f,
	0x85, 0x25, 0xca, 0xd0, 0x29, 0xae, 0x2c, 0xce, 0x53, 0x67, 0x31, 0x56, 0xc7, 0xe4, 0x68, 0xf5,
	0x2e, 0xbc, 0x43, 0x71, 0x74, 0xe6, 0xd9, 0xf8, 0x98, 0x04, 0x3f, 0x7a, 0x4e, 0x65, 0x29, 0xe9,
	0x3e, 0x19, 0x3c, 0x2c, 0xc7, 0x67, 0x40, 0xc2, 0xa3, 0xf1, 0x5f, 0x01, 0xea, 0xb3, 0x44, 0xc9,
	0x4e, 0x81, 0x84, 0xac, 0x22, 0x27, 0xfb, 0x0d, 0xe4, 0x1c, 0x9a, 0xef, 0x35, 0x67, 0x93, 0x37,
	0xf6, 0x5b, 0x28, 0xa7, 0xfe, 0x8d, 0x16, 0x3a, 0x49, 0xf4, 0x29, 0x5e, 0xaf, 0xe3, 0xac, 0xfa,
	0x98, 0x4d, 0xee, 0x68, 0x24, 0x92, 0x2f, 0x4d, 0x9d, 0x18, 0xf5, 0x21, 0x2c, 0x8f, 0xbd, 0x18,
	0x13, 0x65, 0x97, 0xf7, 0xdf, 0x1b, 0x5d, 0xcd, 0x63, 0x49, 0x7d, 0x6c, 0x8c, 0x58, 0x60, 0xbc,
	0x76, 0xff, 0xff, 0x22, 0x14, 0xdb, 0xd4, 0x51, 0x7f, 0x80, 0x95, 0x89, 0x97, 0xe5, 0xfb, 0xd2,
	0x8b, 0x7e, 0xf2, 0x75, 0x54, 0xfd, 0xe8, 0x1a, 0xa0, 0xcc, 0xac, 0x67, 0x0a, 0x6c, 0xbf, 0xf1,
	0x85, 0x75, 0x30, 0xa3, 0xdb, 0x9b, 0x8a, 0xaa, 0x5f, 0xdc, 0xa0, 0x28, 0x5b, 0x89, 0xc0, 0xfa,
	0xf4, 0xdd, 0xdb, 0x9c, 0xd1, 0x71, 0x0a, 0x59, 0xbd, 0x7f, 0x5d, 0x64, 0x36, 0xf0, 0x67, 0xd8,
	0x94, 0xff, 0x9b, 0x7f, 0x3c, 0xbf, 0xd5, 0x08, 0x5d, 0xfd, 0xe4, 0x6d, 0xd0, 0xe9, 0xf0, 0xea,
	0xd2, 0x2f, 0xf1, 0x77, 0x49, 0xeb, 0xd1, 0x8b, 0x8b, 0x9a, 0xf2, 0xf2, 0xa2, 0xa6, 0xbc, 0xba,
	0xa8, 0x29, 0xff, 0x5e, 0xd4, 0x94, 0x67, 0x97, 0xb5, 0x85, 0x97, 0x97, 0xb5, 0x85, 0x57, 0x97,
	0xb5, 0x85, 0xef, 0xf6, 0x1d, 0x8f, 0xb9, 0xfd, 0x8e, 0x6e, 0x13, 0xdf, 0x88, 0x87, 0xec, 0x06,
	0x98, 0xfd, 0x44, 0xa2, 0x53, 0x43, 0xfa, 0xc9, 0x92, 0x7c, 0x92, 0x75, 0x6e, 0x25, 0xdf, 0x5c,
	0x07, 0xaf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xde, 0xec, 0x7b, 0x8e, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ImportMorseClaimableAccounts(ctx context.Context, in *MsgImportMorseClaimableAccounts, opts ...grpc.CallOption) (*MsgImportMorseClaimableAccountsResponse, error)
	ClaimMorseAccount(ctx context.Context, in *MsgClaimMorseAccount, opts ...grpc.CallOption) (*MsgClaimMorseAccountResponse, error)
	ClaimMorseApplication(ctx context.Context, in *MsgClaimMorseApplication, opts ...grpc.CallOption) (*MsgClaimMorseApplicationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/poktroll.migration.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ImportMorseClaimableAccounts(ctx context.Context, in *MsgImportMorseClaimableAccounts, opts ...grpc.CallOption) (*MsgImportMorseClaimableAccountsResponse, error) {
	out := new(MsgImportMorseClaimableAccountsResponse)
	err := c.cc.Invoke(ctx, "/poktroll.migration.Msg/ImportMorseClaimableAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimMorseAccount(ctx context.Context, in *MsgClaimMorseAccount, opts ...grpc.CallOption) (*MsgClaimMorseAccountResponse, error) {
	out := new(MsgClaimMorseAccountResponse)
	err := c.cc.Invoke(ctx, "/poktroll.migration.Msg/ClaimMorseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimMorseApplication(ctx context.Context, in *MsgClaimMorseApplication, opts ...grpc.CallOption) (*MsgClaimMorseApplicationResponse, error) {
	out := new(MsgClaimMorseApplicationResponse)
	err := c.cc.Invoke(ctx, "/poktroll.migration.Msg/ClaimMorseApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	ImportMorseClaimableAccounts(context.Context, *MsgImportMorseClaimableAccounts) (*MsgImportMorseClaimableAccountsResponse, error)
	ClaimMorseAccount(context.Context, *MsgClaimMorseAccount) (*MsgClaimMorseAccountResponse, error)
	ClaimMorseApplication(context.Context, *MsgClaimMorseApplication) (*MsgClaimMorseApplicationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) ImportMorseClaimableAccounts(ctx context.Context, req *MsgImportMorseClaimableAccounts) (*MsgImportMorseClaimableAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportMorseClaimableAccounts not implemented")
}
func (*UnimplementedMsgServer) ClaimMorseAccount(ctx context.Context, req *MsgClaimMorseAccount) (*MsgClaimMorseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMorseAccount not implemented")
}
func (*UnimplementedMsgServer) ClaimMorseApplication(ctx context.Context, req *MsgClaimMorseApplication) (*MsgClaimMorseApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMorseApplication not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poktroll.migration.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ImportMorseClaimableAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgImportMorseClaimableAccounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ImportMorseClaimableAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poktroll.migration.Msg/ImportMorseClaimableAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ImportMorseClaimableAccounts(ctx, req.(*MsgImportMorseClaimableAccounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimMorseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimMorseAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimMorseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poktroll.migration.Msg/ClaimMorseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimMorseAccount(ctx, req.(*MsgClaimMorseAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimMorseApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimMorseApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimMorseApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poktroll.migration.Msg/ClaimMorseApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimMorseApplication(ctx, req.(*MsgClaimMorseApplication))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poktroll.migration.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "ImportMorseClaimableAccounts",
			Handler:    _Msg_ImportMorseClaimableAccounts_Handler,
		},
		{
			MethodName: "ClaimMorseAccount",
			Handler:    _Msg_ClaimMorseAccount_Handler,
		},
		{
			MethodName: "ClaimMorseApplication",
			Handler:    _Msg_ClaimMorseApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poktroll/migration/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgImportMorseClaimableAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgImportMorseClaimableAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgImportMorseClaimableAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MorseAccountStateHash) > 0 {
		i -= len(m.MorseAccountStateHash)
		copy(dAtA[i:], m.MorseAccountStateHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseAccountStateHash)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.MorseAccountState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgImportMorseClaimableAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgImportMorseClaimableAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgImportMorseClaimableAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumAccounts != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumAccounts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StateHash) > 0 {
		i -= len(m.StateHash)
		copy(dAtA[i:], m.StateHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMorseAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMorseAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMorseAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MorseSignature) > 0 {
		i -= len(m.MorseSignature)
		copy(dAtA[i:], m.MorseSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShannonDestAddress) > 0 {
		i -= len(m.ShannonDestAddress)
		copy(dAtA[i:], m.ShannonDestAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShannonDestAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMorseAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMorseAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMorseAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimedAtHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimedAtHeight))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.ClaimedBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMorseApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMorseApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMorseApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceConfig) > 0 {
		i -= len(m.ServiceConfig)
		copy(dAtA[i:], m.ServiceConfig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ServiceConfig)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MorseSignature) > 0 {
		i -= len(m.MorseSignature)
		copy(dAtA[i:], m.MorseSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShannonDestAddress) > 0 {
		i -= len(m.ShannonDestAddress)
		copy(dAtA[i:], m.ShannonDestAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShannonDestAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMorseApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMorseApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMorseApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ClaimedAtHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimedAtHeight))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.ClaimedApplicationStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ClaimedBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgImportMorseClaimableAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MorseAccountState.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.MorseAccountStateHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgImportMorseClaimableAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumAccounts != 0 {
		n += 1 + sovTx(uint64(m.NumAccounts))
	}
	return n
}

func (m *MsgClaimMorseAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShannonDestAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MorseSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimMorseAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ClaimedBalance.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ClaimedAtHeight != 0 {
		n += 1 + sovTx(uint64(m.ClaimedAtHeight))
	}
	return n
}

func (m *MsgClaimMorseApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShannonDestAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MorseSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ServiceConfig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimMorseApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ClaimedBalance.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ClaimedApplicationStake.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ClaimedAtHeight != 0 {
		n += 1 + sovTx(uint64(m.ClaimedAtHeight))
	}
	l = m.Application.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgImportMorseClaimableAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgImportMorseClaimableAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgImportMorseClaimableAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseAccountState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MorseAccountState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseAccountStateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseAccountStateHash = append(m.MorseAccountStateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MorseAccountStateHash == nil {
				m.MorseAccountStateHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgImportMorseClaimableAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgImportMorseClaimableAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgImportMorseClaimableAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHash = append(m.StateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateHash == nil {
				m.StateHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAccounts", wireType)
			}
			m.NumAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAccounts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMorseAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMorseAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMorseAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSignature = append(m.MorseSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.MorseSignature == nil {
				m.MorseSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMorseAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMorseAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMorseAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAtHeight", wireType)
			}
			m.ClaimedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMorseApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMorseApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMorseApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMorseApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMorseApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMorseApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedApplicationStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedApplicationStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAtHeight", wireType)
			}
			m.ClaimedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimedAtHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
