// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/migration/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/application/types"
	_ "github.com/pokt-network/poktroll/x/shared/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventImportMorseClaimableAccounts
// - Emitted when MorseClaimableAccounts are created on-chain
// - Represents import event for Morse claimable accounts
type EventImportMorseClaimableAccounts struct {
	// Shannon height at which MorseAccountState was created on-chain
	CreatedAtHeight int64 `protobuf:"varint,1,opt,name=created_at_height,json=createdAtHeight,proto3" json:"created_at_height"`
	// On-chain computed sha256 hash of the MorseAccountState
	// - Contains all imported MorseClaimableAccounts
	MorseAccountStateHash []byte `protobuf:"bytes,2,opt,name=morse_account_state_hash,json=morseAccountStateHash,proto3" json:"morse_account_state_hash"`
	// Number of claimable accounts (EOAs) imported from Morse state export
	// - Account balances include consolidated application and supplier actor stakes
	NumAccounts uint64 `protobuf:"varint,3,opt,name=num_accounts,json=numAccounts,proto3" json:"num_accounts"`
}

func (m *EventImportMorseClaimableAccounts) Reset()         { *m = EventImportMorseClaimableAccounts{} }
func (m *EventImportMorseClaimableAccounts) String() string { return proto.CompactTextString(m) }
func (*EventImportMorseClaimableAccounts) ProtoMessage()    {}
func (*EventImportMorseClaimableAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_58efe7e8c8e55703, []int{0}
}
func (m *EventImportMorseClaimableAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventImportMorseClaimableAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventImportMorseClaimableAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventImportMorseClaimableAccounts.Merge(m, src)
}
func (m *EventImportMorseClaimableAccounts) XXX_Size() int {
	return m.Size()
}
func (m *EventImportMorseClaimableAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_EventImportMorseClaimableAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_EventImportMorseClaimableAccounts proto.InternalMessageInfo

func (m *EventImportMorseClaimableAccounts) GetCreatedAtHeight() int64 {
	if m != nil {
		return m.CreatedAtHeight
	}
	return 0
}

func (m *EventImportMorseClaimableAccounts) GetMorseAccountStateHash() []byte {
	if m != nil {
		return m.MorseAccountStateHash
	}
	return nil
}

func (m *EventImportMorseClaimableAccounts) GetNumAccounts() uint64 {
	if m != nil {
		return m.NumAccounts
	}
	return 0
}

// EventMorseAccountClaimed
// - Emitted when a MorseAccount is claimed on-chain
type EventMorseAccountClaimed struct {
	// Shannon session end height in which the claim was committed
	SessionEndHeight int64 `protobuf:"varint,1,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// bech32-encoded Shannon address to mint claimed balance
	ShannonDestAddress string `protobuf:"bytes,3,opt,name=shannon_dest_address,json=shannonDestAddress,proto3" json:"shannon_dest_address"`
	// Hex-encoded Morse account address whose balance was claimed
	MorseSrcAddress string `protobuf:"bytes,4,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address"`
	// Unstaked balance claimed from Morse
	ClaimedBalance string `protobuf:"bytes,5,opt,name=claimed_balance,json=claimedBalance,proto3" json:"claimed_balance"`
}

func (m *EventMorseAccountClaimed) Reset()         { *m = EventMorseAccountClaimed{} }
func (m *EventMorseAccountClaimed) String() string { return proto.CompactTextString(m) }
func (*EventMorseAccountClaimed) ProtoMessage()    {}
func (*EventMorseAccountClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_58efe7e8c8e55703, []int{1}
}
func (m *EventMorseAccountClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMorseAccountClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventMorseAccountClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMorseAccountClaimed.Merge(m, src)
}
func (m *EventMorseAccountClaimed) XXX_Size() int {
	return m.Size()
}
func (m *EventMorseAccountClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMorseAccountClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_EventMorseAccountClaimed proto.InternalMessageInfo

func (m *EventMorseAccountClaimed) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventMorseAccountClaimed) GetShannonDestAddress() string {
	if m != nil {
		return m.ShannonDestAddress
	}
	return ""
}

func (m *EventMorseAccountClaimed) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *EventMorseAccountClaimed) GetClaimedBalance() string {
	if m != nil {
		return m.ClaimedBalance
	}
	return ""
}

// EventMorseApplicationClaimed
// - Emitted when a MorseAccount is claimed on-chain as a staked application
type EventMorseApplicationClaimed struct {
	// Shannon session end height in which the claim was committed
	SessionEndHeight int64 `protobuf:"varint,1,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// Hex-encoded Morse account address whose balance was claimed
	MorseSrcAddress string `protobuf:"bytes,3,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address"`
	// Application staked as a result of the claim
	// - Mirrors Morse application stake
	Application *types.Application `protobuf:"bytes,5,opt,name=application,proto3" json:"application"`
	// Unstaked balance claimed from Morse
	ClaimedBalance string `protobuf:"bytes,6,opt,name=claimed_balance,json=claimedBalance,proto3" json:"claimed_balance"`
	// Application stake claimed as a result of the claim
	// - Equivalent to Morse application staked amount
	ClaimedApplicationStake string `protobuf:"bytes,7,opt,name=claimed_application_stake,json=claimedApplicationStake,proto3" json:"claimed_application_stake"`
}

func (m *EventMorseApplicationClaimed) Reset()         { *m = EventMorseApplicationClaimed{} }
func (m *EventMorseApplicationClaimed) String() string { return proto.CompactTextString(m) }
func (*EventMorseApplicationClaimed) ProtoMessage()    {}
func (*EventMorseApplicationClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_58efe7e8c8e55703, []int{2}
}
func (m *EventMorseApplicationClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMorseApplicationClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventMorseApplicationClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMorseApplicationClaimed.Merge(m, src)
}
func (m *EventMorseApplicationClaimed) XXX_Size() int {
	return m.Size()
}
func (m *EventMorseApplicationClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMorseApplicationClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_EventMorseApplicationClaimed proto.InternalMessageInfo

func (m *EventMorseApplicationClaimed) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventMorseApplicationClaimed) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *EventMorseApplicationClaimed) GetApplication() *types.Application {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *EventMorseApplicationClaimed) GetClaimedBalance() string {
	if m != nil {
		return m.ClaimedBalance
	}
	return ""
}

func (m *EventMorseApplicationClaimed) GetClaimedApplicationStake() string {
	if m != nil {
		return m.ClaimedApplicationStake
	}
	return ""
}

// EventMorseSupplierClaimed
// - Emitted when a MorseAccount is claimed on-chain as a staked Supplier
type EventMorseSupplierClaimed struct {
	// Shannon session end height in which the claim was committed
	SessionEndHeight int64 `protobuf:"varint,1,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// Unstaked balance claimed from Morse
	ClaimedBalance string `protobuf:"bytes,9,opt,name=claimed_balance,json=claimedBalance,proto3" json:"claimed_balance"`
	// The hex-encoded address of the Morse non-custodial (i.e. operator) account.
	// - Unstaked balance was migrated 1:1
	// - Stake was migrated 1:1 from morse_node_address to shannon_operator_address
	// - Morse non-custodial (i.e. operator) address.
	// If morse_output_address was not set, this is the custodial address.
	// - See 'pocket nodes --help' for more information. Note that this refers to the Morse CLI.
	// E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
	MorseNodeAddress string `protobuf:"bytes,8,opt,name=morse_node_address,json=morseNodeAddress,proto3" json:"morse_node_address"`
	// ONLY applicable to Morse node/supplier accounts.
	// Hex-encoded address of the Morse output account/wallet associated with the Morse node/supplier.
	//   - E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
	//   - Morse custodial (i.e. owner) address, which owned the staked tokens of the operator.
	//     See 'pocket nodes --help' for more information. Note that this refers to the Morse CLI.
	MorseOutputAddress string `protobuf:"bytes,6,opt,name=morse_output_address,json=morseOutputAddress,proto3" json:"morse_output_address"`
	// The type of supplier claim signer, indicating which actor executed the claim
	// and whether it was a custodial or non-custodial claim.
	// - MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_ADDR
	// - MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_OPERATOR
	// - MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_OWNER
	ClaimSignerType MorseSupplierClaimSignerType `protobuf:"varint,7,opt,name=claim_signer_type,json=claimSignerType,proto3,enum=pocket.migration.MorseSupplierClaimSignerType" json:"claim_signer_type"`
	// Supplier stake claimed as a result of the claim
	// - Equivalent to Morse supplier staked amount
	ClaimedSupplierStake string `protobuf:"bytes,10,opt,name=claimed_supplier_stake,json=claimedSupplierStake,proto3" json:"claimed_supplier_stake"`
	// The operator address of the supplier.
	SupplierOperatorAddress string `protobuf:"bytes,11,opt,name=supplier_operator_address,json=supplierOperatorAddress,proto3" json:"supplier_operator_address,omitempty"`
	// The owner address of the supplier.
	SupplierOwnerAddress string `protobuf:"bytes,12,opt,name=supplier_owner_address,json=supplierOwnerAddress,proto3" json:"supplier_owner_address,omitempty"`
}

func (m *EventMorseSupplierClaimed) Reset()         { *m = EventMorseSupplierClaimed{} }
func (m *EventMorseSupplierClaimed) String() string { return proto.CompactTextString(m) }
func (*EventMorseSupplierClaimed) ProtoMessage()    {}
func (*EventMorseSupplierClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_58efe7e8c8e55703, []int{3}
}
func (m *EventMorseSupplierClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMorseSupplierClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventMorseSupplierClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMorseSupplierClaimed.Merge(m, src)
}
func (m *EventMorseSupplierClaimed) XXX_Size() int {
	return m.Size()
}
func (m *EventMorseSupplierClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMorseSupplierClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_EventMorseSupplierClaimed proto.InternalMessageInfo

func (m *EventMorseSupplierClaimed) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventMorseSupplierClaimed) GetClaimedBalance() string {
	if m != nil {
		return m.ClaimedBalance
	}
	return ""
}

func (m *EventMorseSupplierClaimed) GetMorseNodeAddress() string {
	if m != nil {
		return m.MorseNodeAddress
	}
	return ""
}

func (m *EventMorseSupplierClaimed) GetMorseOutputAddress() string {
	if m != nil {
		return m.MorseOutputAddress
	}
	return ""
}

func (m *EventMorseSupplierClaimed) GetClaimSignerType() MorseSupplierClaimSignerType {
	if m != nil {
		return m.ClaimSignerType
	}
	return MorseSupplierClaimSignerType_MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_UNSPECIFIED
}

func (m *EventMorseSupplierClaimed) GetClaimedSupplierStake() string {
	if m != nil {
		return m.ClaimedSupplierStake
	}
	return ""
}

func (m *EventMorseSupplierClaimed) GetSupplierOperatorAddress() string {
	if m != nil {
		return m.SupplierOperatorAddress
	}
	return ""
}

func (m *EventMorseSupplierClaimed) GetSupplierOwnerAddress() string {
	if m != nil {
		return m.SupplierOwnerAddress
	}
	return ""
}

// EventMorseAccountRecovered
// - Emitted when a Morse account is recovered on-chain
type EventMorseAccountRecovered struct {
	// The session end height (on Shannon) in which the recovery was committed (i.e. claimed).
	SessionEndHeight int64 `protobuf:"varint,1,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The total balance which was recovered:
	// - Includes both unstaked and staked balances (consolidated)
	// - Auto-liquidates both unstaked and staked balances at once
	RecoveredBalance string `protobuf:"bytes,5,opt,name=recovered_balance,json=recoveredBalance,proto3" json:"recovered_balance"`
	// The bech32-encoded address of the Shannon account to which the recovered balance was minted.
	ShannonDestAddress string `protobuf:"bytes,3,opt,name=shannon_dest_address,json=shannonDestAddress,proto3" json:"shannon_dest_address"`
	// The hex-encoded address of the Morse account whose balance and stakes have been recovered.
	// This address MUST be in the recovery allow list and could be of types such as:
	// - Unreachable/Locked EOA, Supplier or Application address
	// - Module account
	// - Invalid address (too short, too long, or non-hexadecimal format)
	MorseSrcAddress string `protobuf:"bytes,4,opt,name=morse_src_address,json=morseSrcAddress,proto3" json:"morse_src_address"`
}

func (m *EventMorseAccountRecovered) Reset()         { *m = EventMorseAccountRecovered{} }
func (m *EventMorseAccountRecovered) String() string { return proto.CompactTextString(m) }
func (*EventMorseAccountRecovered) ProtoMessage()    {}
func (*EventMorseAccountRecovered) Descriptor() ([]byte, []int) {
	return fileDescriptor_58efe7e8c8e55703, []int{4}
}
func (m *EventMorseAccountRecovered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMorseAccountRecovered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventMorseAccountRecovered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMorseAccountRecovered.Merge(m, src)
}
func (m *EventMorseAccountRecovered) XXX_Size() int {
	return m.Size()
}
func (m *EventMorseAccountRecovered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMorseAccountRecovered.DiscardUnknown(m)
}

var xxx_messageInfo_EventMorseAccountRecovered proto.InternalMessageInfo

func (m *EventMorseAccountRecovered) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventMorseAccountRecovered) GetRecoveredBalance() string {
	if m != nil {
		return m.RecoveredBalance
	}
	return ""
}

func (m *EventMorseAccountRecovered) GetShannonDestAddress() string {
	if m != nil {
		return m.ShannonDestAddress
	}
	return ""
}

func (m *EventMorseAccountRecovered) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EventImportMorseClaimableAccounts)(nil), "pocket.migration.EventImportMorseClaimableAccounts")
	proto.RegisterType((*EventMorseAccountClaimed)(nil), "pocket.migration.EventMorseAccountClaimed")
	proto.RegisterType((*EventMorseApplicationClaimed)(nil), "pocket.migration.EventMorseApplicationClaimed")
	proto.RegisterType((*EventMorseSupplierClaimed)(nil), "pocket.migration.EventMorseSupplierClaimed")
	proto.RegisterType((*EventMorseAccountRecovered)(nil), "pocket.migration.EventMorseAccountRecovered")
}

func init() { proto.RegisterFile("pocket/migration/event.proto", fileDescriptor_58efe7e8c8e55703) }

var fileDescriptor_58efe7e8c8e55703 = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0x8e, 0x62, 0x27, 0x4b, 0x99, 0xa0, 0x51, 0x34, 0x37, 0x55, 0x32, 0x4f, 0xca, 0x8c, 0x1d,
	0x72, 0xa9, 0x3c, 0xa4, 0xd7, 0x5d, 0xac, 0xa5, 0x40, 0x67, 0xa0, 0x1f, 0xa0, 0xbb, 0xc3, 0x76,
	0x11, 0x68, 0x89, 0xb0, 0x04, 0x5b, 0xa4, 0x46, 0xd2, 0xe9, 0xfa, 0x2f, 0xf6, 0x13, 0xf6, 0x23,
	0xfa, 0x23, 0x06, 0xec, 0x52, 0x6c, 0x97, 0x9e, 0x84, 0xc1, 0xb9, 0xe9, 0xb8, 0x5f, 0x30, 0x88,
	0xa4, 0x64, 0xd5, 0x1f, 0x58, 0x07, 0xe4, 0xd2, 0x9b, 0xf8, 0x3c, 0x2f, 0x1f, 0xf2, 0x7d, 0xde,
	0x97, 0x2f, 0x04, 0xba, 0x19, 0x0d, 0xa7, 0x58, 0xf4, 0xd3, 0x64, 0xc2, 0x90, 0x48, 0x28, 0xe9,
	0xe3, 0x1b, 0x4c, 0x84, 0x97, 0x31, 0x2a, 0xa8, 0x65, 0x2a, 0xd6, 0xab, 0xd9, 0xf3, 0xb3, 0x90,
	0xf2, 0x94, 0xf2, 0x40, 0xf2, 0x7d, 0xb5, 0x50, 0xc1, 0xe7, 0x9d, 0x09, 0x9d, 0x50, 0x85, 0x97,
	0x5f, 0x1a, 0xfd, 0x42, 0x1f, 0xc0, 0x63, 0xc4, 0x70, 0xd4, 0xe7, 0x98, 0xdd, 0x24, 0x21, 0xd6,
	0xe4, 0xd7, 0x6b, 0xa7, 0xa7, 0x94, 0x71, 0x1c, 0x50, 0x12, 0xc6, 0x28, 0x21, 0x3a, 0xca, 0xd1,
	0x51, 0x28, 0xcb, 0x66, 0x49, 0xa8, 0xe2, 0xc4, 0x9b, 0x0c, 0x57, 0x07, 0x77, 0x57, 0x8e, 0x98,
	0x97, 0x71, 0x98, 0x29, 0xb6, 0xf7, 0x8f, 0x01, 0xbe, 0x7a, 0x52, 0xe6, 0xf4, 0x7d, 0x9a, 0x51,
	0x26, 0x9e, 0x95, 0x07, 0x7c, 0x37, 0x43, 0x49, 0x8a, 0xc6, 0x33, 0x3c, 0x08, 0x43, 0x3a, 0x27,
	0x82, 0x5b, 0x03, 0x70, 0x12, 0x32, 0x8c, 0x04, 0x8e, 0x02, 0x24, 0x82, 0x18, 0x27, 0x93, 0x58,
	0xd8, 0xc6, 0x85, 0x71, 0xd9, 0xf2, 0x1f, 0x14, 0xb9, 0xbb, 0x4e, 0xc2, 0x63, 0x0d, 0x0d, 0xc4,
	0x53, 0x09, 0x58, 0x3f, 0x00, 0x5b, 0xdd, 0x1e, 0x29, 0xd1, 0x80, 0x0b, 0x24, 0x70, 0x10, 0x23,
	0x1e, 0xdb, 0xbb, 0x17, 0xc6, 0xe5, 0x91, 0xdf, 0x2d, 0x72, 0x77, 0x6b, 0x0c, 0x7c, 0x20, 0x19,
	0x7d, 0xa3, 0x51, 0x89, 0x3f, 0x45, 0x3c, 0xb6, 0x1e, 0x83, 0x23, 0x32, 0x4f, 0xab, 0x0d, 0xdc,
	0x6e, 0x5d, 0x18, 0x97, 0x6d, 0xdf, 0x2c, 0x72, 0xf7, 0x03, 0x1c, 0x1e, 0x92, 0x79, 0x5a, 0xa5,
	0xd3, 0xfb, 0x63, 0x17, 0xd8, 0x32, 0xe9, 0x67, 0x0d, 0x4d, 0x99, 0x35, 0x8e, 0xac, 0x6b, 0x60,
	0x71, 0xcc, 0x79, 0x42, 0x49, 0x80, 0x49, 0xf4, 0x61, 0xb2, 0xa7, 0x45, 0xee, 0x6e, 0x60, 0xa1,
	0xa9, 0xb1, 0x27, 0x24, 0xd2, 0xe9, 0x8e, 0x41, 0x87, 0xc7, 0x88, 0x10, 0x4a, 0x82, 0x08, 0x73,
	0x11, 0xa0, 0x28, 0x62, 0x98, 0xab, 0xfb, 0xdd, 0xf3, 0xbf, 0x29, 0x72, 0x77, 0x23, 0xff, 0xe7,
	0xdb, 0x47, 0x1d, 0xdd, 0x36, 0x03, 0x85, 0x8c, 0x04, 0x4b, 0xc8, 0x04, 0x5a, 0x3a, 0xfa, 0x1a,
	0x73, 0xa1, 0x99, 0xb2, 0x2a, 0xca, 0x2e, 0xce, 0xc2, 0xfa, 0x80, 0xb6, 0x3c, 0x40, 0x56, 0x65,
	0x8d, 0x84, 0xc7, 0x12, 0x1a, 0xb1, 0xb0, 0x92, 0xf8, 0x16, 0x1c, 0x87, 0x2a, 0xef, 0x60, 0x8c,
	0x66, 0x88, 0x84, 0xd8, 0xde, 0x93, 0x02, 0x9f, 0x17, 0xb9, 0xbb, 0x4a, 0xc1, 0xfb, 0x1a, 0xf0,
	0xd5, 0x7a, 0xd8, 0x3e, 0xd8, 0x35, 0x5b, 0xbd, 0xdf, 0x5a, 0xa0, 0xdb, 0x70, 0x73, 0xd9, 0x86,
	0x77, 0xeb, 0xe8, 0xc6, 0x6c, 0x5b, 0xff, 0x2b, 0x5b, 0x08, 0x0e, 0x1b, 0xaf, 0x44, 0x66, 0x7a,
	0x78, 0xe5, 0x7a, 0xfa, 0x19, 0x37, 0x28, 0xaf, 0x91, 0x85, 0x7f, 0x5c, 0xe4, 0x6e, 0x73, 0x1f,
	0x6c, 0x2e, 0x36, 0x39, 0xb8, 0xff, 0xd1, 0x0e, 0x5a, 0x3f, 0x82, 0xb3, 0x2a, 0xa4, 0x21, 0x5a,
	0xf6, 0xfd, 0x14, 0xdb, 0x9f, 0x49, 0x9d, 0x2f, 0x8b, 0xdc, 0xdd, 0x1e, 0x04, 0x1f, 0x6a, 0xaa,
	0x71, 0xe3, 0x51, 0x49, 0xa8, 0xe2, 0x0c, 0xdb, 0x07, 0x6d, 0x73, 0xaf, 0xf7, 0x76, 0x0f, 0x9c,
	0x2d, 0x4b, 0x34, 0xd2, 0x23, 0xe0, 0x6e, 0xeb, 0xb3, 0xc1, 0x88, 0x7b, 0x1f, 0x6f, 0xc4, 0x35,
	0xb0, 0x54, 0x01, 0x09, 0x8d, 0x70, 0x5d, 0xde, 0x03, 0x29, 0x20, 0xef, 0xb0, 0xce, 0x42, 0x53,
	0x62, 0xcf, 0x69, 0x84, 0xab, 0x02, 0x0f, 0x41, 0x47, 0x8f, 0xc8, 0xb9, 0xc8, 0xe6, 0xcb, 0x57,
	0xa7, 0x2a, 0x62, 0x97, 0xaf, 0x6e, 0x13, 0x0f, 0x95, 0xfa, 0x0b, 0x09, 0x56, 0x5a, 0x3f, 0x83,
	0x13, 0x79, 0xc7, 0x80, 0x27, 0x13, 0x82, 0x59, 0x50, 0xce, 0x54, 0x59, 0x92, 0xfb, 0x57, 0x9e,
	0xb7, 0x3a, 0xf9, 0xbd, 0x75, 0x63, 0x47, 0x72, 0xdb, 0xab, 0x37, 0x19, 0xd6, 0x33, 0x72, 0x55,
	0x0c, 0x2a, 0x53, 0x96, 0x71, 0xd6, 0x4b, 0x70, 0x5a, 0xf9, 0x54, 0x8d, 0x69, 0xdd, 0x0a, 0x40,
	0x26, 0x70, 0x5e, 0xe4, 0xee, 0x96, 0x08, 0xd8, 0xd1, 0x78, 0x75, 0x07, 0xd9, 0x04, 0xd6, 0x2b,
	0x70, 0x56, 0xc7, 0xd1, 0x0c, 0x33, 0x24, 0x28, 0xab, 0x5d, 0x39, 0x54, 0xae, 0x6c, 0x9d, 0x39,
	0x0f, 0xab, 0xad, 0x2f, 0xf4, 0xce, 0xca, 0x9a, 0xe7, 0xe0, 0x74, 0xa9, 0xfa, 0xba, 0xcc, 0xa7,
	0x92, 0x3c, 0xfa, 0x0f, 0xc9, 0x4e, 0x2d, 0x59, 0x6e, 0xd3, 0x5c, 0xdd, 0xaa, 0x2d, 0xb3, 0xad,
	0x1a, 0x76, 0xd8, 0x3e, 0xd8, 0x33, 0xf7, 0x7b, 0x7f, 0xed, 0x82, 0xf3, 0xb5, 0x39, 0x0d, 0x71,
	0x48, 0x6f, 0x30, 0xbb, 0xb3, 0xbe, 0xf5, 0xc1, 0x09, 0xab, 0x24, 0x57, 0x86, 0xa0, 0xac, 0xdb,
	0x1a, 0x09, 0xcd, 0x1a, 0xaa, 0xba, 0xf7, 0xd3, 0x98, 0xf6, 0xca, 0x67, 0xff, 0xe5, 0xef, 0x0b,
	0xc7, 0x78, 0xb7, 0x70, 0x8c, 0xf7, 0x0b, 0xc7, 0xf8, 0x7b, 0xe1, 0x18, 0xbf, 0xde, 0x3a, 0x3b,
	0xef, 0x6e, 0x9d, 0x9d, 0xf7, 0xb7, 0xce, 0xce, 0x4f, 0x57, 0x93, 0x44, 0xc4, 0xf3, 0xb1, 0x17,
	0xd2, 0xb4, 0x9f, 0xd1, 0xa9, 0x78, 0x44, 0xb0, 0x78, 0x4d, 0xd9, 0x54, 0x2e, 0x18, 0x9d, 0xcd,
	0xfa, 0xbf, 0x34, 0x7e, 0x48, 0xe4, 0x8f, 0xc6, 0x78, 0x5f, 0xfe, 0x4b, 0x3c, 0xfe, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x87, 0xff, 0xc4, 0x5e, 0x2f, 0x09, 0x00, 0x00,
}

func (m *EventImportMorseClaimableAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventImportMorseClaimableAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventImportMorseClaimableAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumAccounts != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumAccounts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MorseAccountStateHash) > 0 {
		i -= len(m.MorseAccountStateHash)
		copy(dAtA[i:], m.MorseAccountStateHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseAccountStateHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAtHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CreatedAtHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMorseAccountClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMorseAccountClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMorseAccountClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedBalance) > 0 {
		i -= len(m.ClaimedBalance)
		copy(dAtA[i:], m.ClaimedBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedBalance)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShannonDestAddress) > 0 {
		i -= len(m.ShannonDestAddress)
		copy(dAtA[i:], m.ShannonDestAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ShannonDestAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMorseApplicationClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMorseApplicationClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMorseApplicationClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedApplicationStake) > 0 {
		i -= len(m.ClaimedApplicationStake)
		copy(dAtA[i:], m.ClaimedApplicationStake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedApplicationStake)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClaimedBalance) > 0 {
		i -= len(m.ClaimedBalance)
		copy(dAtA[i:], m.ClaimedBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedBalance)))
		i--
		dAtA[i] = 0x32
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMorseSupplierClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMorseSupplierClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMorseSupplierClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierOwnerAddress) > 0 {
		i -= len(m.SupplierOwnerAddress)
		copy(dAtA[i:], m.SupplierOwnerAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOwnerAddress)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SupplierOperatorAddress) > 0 {
		i -= len(m.SupplierOperatorAddress)
		copy(dAtA[i:], m.SupplierOperatorAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOperatorAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ClaimedSupplierStake) > 0 {
		i -= len(m.ClaimedSupplierStake)
		copy(dAtA[i:], m.ClaimedSupplierStake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedSupplierStake)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ClaimedBalance) > 0 {
		i -= len(m.ClaimedBalance)
		copy(dAtA[i:], m.ClaimedBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedBalance)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MorseNodeAddress) > 0 {
		i -= len(m.MorseNodeAddress)
		copy(dAtA[i:], m.MorseNodeAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseNodeAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.ClaimSignerType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClaimSignerType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MorseOutputAddress) > 0 {
		i -= len(m.MorseOutputAddress)
		copy(dAtA[i:], m.MorseOutputAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseOutputAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMorseAccountRecovered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMorseAccountRecovered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMorseAccountRecovered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoveredBalance) > 0 {
		i -= len(m.RecoveredBalance)
		copy(dAtA[i:], m.RecoveredBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RecoveredBalance)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShannonDestAddress) > 0 {
		i -= len(m.ShannonDestAddress)
		copy(dAtA[i:], m.ShannonDestAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ShannonDestAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventImportMorseClaimableAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAtHeight != 0 {
		n += 1 + sovEvent(uint64(m.CreatedAtHeight))
	}
	l = len(m.MorseAccountStateHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumAccounts != 0 {
		n += 1 + sovEvent(uint64(m.NumAccounts))
	}
	return n
}

func (m *EventMorseAccountClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.ShannonDestAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimedBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventMorseApplicationClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimedBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimedApplicationStake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventMorseSupplierClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.MorseOutputAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ClaimSignerType != 0 {
		n += 1 + sovEvent(uint64(m.ClaimSignerType))
	}
	l = len(m.MorseNodeAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimedBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimedSupplierStake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOwnerAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventMorseAccountRecovered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.ShannonDestAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RecoveredBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventImportMorseClaimableAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventImportMorseClaimableAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventImportMorseClaimableAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtHeight", wireType)
			}
			m.CreatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseAccountStateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseAccountStateHash = append(m.MorseAccountStateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MorseAccountStateHash == nil {
				m.MorseAccountStateHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAccounts", wireType)
			}
			m.NumAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAccounts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMorseAccountClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMorseAccountClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMorseAccountClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMorseApplicationClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMorseApplicationClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMorseApplicationClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &types.Application{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedApplicationStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedApplicationStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMorseSupplierClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMorseSupplierClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMorseSupplierClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseOutputAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseOutputAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimSignerType", wireType)
			}
			m.ClaimSignerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimSignerType |= MorseSupplierClaimSignerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseNodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseNodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedSupplierStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedSupplierStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMorseAccountRecovered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMorseAccountRecovered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMorseAccountRecovered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveredBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveredBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
