// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/pokt-network/poktroll/x/shared/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventUploadMorseState is emitted when the MorseAccountState is created on-chain.
type EventCreateMorseAccountState struct {
	// The height (on Shannon) at which the MorseAccountState was created on-chain.
	CreatedAtHeight int64 `protobuf:"varint,1,opt,name=created_at_height,json=createdAtHeight,proto3" json:"created_at_height"`
	// The sha256 has of the MorseAccountState.
	MorseAccountStateHash []byte `protobuf:"bytes,2,opt,name=morse_account_state_hash,json=morseAccountStateHash,proto3" json:"morse_account_state_hash"`
	// The number of accounts (EOAs) which were collected from the Morse state export, which may be claimed.
	// NOTE: Application and supplier actor stakes are consolidated into their corresponding account balances.
	NumAccounts uint64 `protobuf:"varint,3,opt,name=num_accounts,json=numAccounts,proto3" json:"num_accounts"`
}

func (m *EventCreateMorseAccountState) Reset()         { *m = EventCreateMorseAccountState{} }
func (m *EventCreateMorseAccountState) String() string { return proto.CompactTextString(m) }
func (*EventCreateMorseAccountState) ProtoMessage()    {}
func (*EventCreateMorseAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5b0bc9ed37905e1, []int{0}
}
func (m *EventCreateMorseAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateMorseAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventCreateMorseAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateMorseAccountState.Merge(m, src)
}
func (m *EventCreateMorseAccountState) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateMorseAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateMorseAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateMorseAccountState proto.InternalMessageInfo

func (m *EventCreateMorseAccountState) GetCreatedAtHeight() int64 {
	if m != nil {
		return m.CreatedAtHeight
	}
	return 0
}

func (m *EventCreateMorseAccountState) GetMorseAccountStateHash() []byte {
	if m != nil {
		return m.MorseAccountStateHash
	}
	return nil
}

func (m *EventCreateMorseAccountState) GetNumAccounts() uint64 {
	if m != nil {
		return m.NumAccounts
	}
	return 0
}

func init() {
	proto.RegisterType((*EventCreateMorseAccountState)(nil), "poktroll.migration.EventCreateMorseAccountState")
}

func init() { proto.RegisterFile("poktroll/migration/event.proto", fileDescriptor_d5b0bc9ed37905e1) }

var fileDescriptor_d5b0bc9ed37905e1 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x6a, 0x22, 0x41,
	0x14, 0x85, 0xad, 0x71, 0x98, 0x45, 0x8f, 0x30, 0x33, 0xcd, 0x08, 0x3d, 0xe2, 0x94, 0x92, 0x45,
	0x70, 0x13, 0x0b, 0xe3, 0x13, 0xd8, 0x21, 0xe0, 0x26, 0x10, 0x0c, 0xd9, 0x64, 0xd3, 0x54, 0x97,
	0x45, 0x57, 0xa3, 0x5d, 0x57, 0xaa, 0x6e, 0x9b, 0xe4, 0x2d, 0xf2, 0x58, 0x59, 0xba, 0x74, 0x25,
	0xa1, 0xdd, 0x09, 0x79, 0x87, 0xd0, 0x3f, 0x4a, 0x7e, 0x77, 0xdd, 0xe7, 0x3b, 0xf7, 0xd4, 0xe1,
	0x38, 0x74, 0x01, 0x33, 0x34, 0x30, 0x9f, 0xb3, 0x24, 0x8e, 0x0c, 0xc7, 0x18, 0x34, 0x93, 0x4b,
	0xa9, 0xb1, 0xbf, 0x30, 0x80, 0xe0, 0xba, 0x7b, 0xde, 0x3f, 0xf0, 0xd6, 0x3f, 0x01, 0x36, 0x01,
	0x1b, 0x14, 0x0e, 0x56, 0xfe, 0x94, 0xf6, 0xd6, 0xdf, 0x08, 0x22, 0x28, 0xf5, 0xfc, 0xab, 0x52,
	0x69, 0xe9, 0x61, 0x21, 0xb7, 0x92, 0x2d, 0x07, 0xa1, 0x44, 0x3e, 0x60, 0x02, 0x62, 0x5d, 0xf1,
	0xff, 0x87, 0x12, 0x56, 0x71, 0x23, 0xa7, 0xcc, 0x4a, 0xb3, 0x8c, 0x85, 0xac, 0xf0, 0xf1, 0x27,
	0x1d, 0x13, 0x30, 0x56, 0x06, 0xa0, 0x85, 0xe2, 0xfb, 0x98, 0xa3, 0x67, 0xe2, 0xb4, 0xcf, 0xf3,
	0xee, 0x67, 0x46, 0x72, 0x94, 0x17, 0xb9, 0x65, 0x24, 0x04, 0xa4, 0x1a, 0xaf, 0x90, 0xa3, 0x74,
	0x47, 0xce, 0x1f, 0x51, 0xa0, 0x69, 0xc0, 0x31, 0x50, 0x32, 0x8e, 0x14, 0x7a, 0xa4, 0x4b, 0x7a,
	0x75, 0xbf, 0xb9, 0xdb, 0x74, 0x3e, 0xc2, 0xc9, 0xaf, 0x4a, 0x1a, 0xe1, 0xb8, 0x10, 0xdc, 0x6b,
	0xc7, 0x2b, 0x9f, 0xe6, 0x65, 0x70, 0x60, 0xf3, 0xe4, 0x40, 0x71, 0xab, 0xbc, 0x6f, 0x5d, 0xd2,
	0x6b, 0xf8, 0xed, 0xdd, 0xa6, 0xf3, 0xa5, 0x67, 0xd2, 0x4c, 0xde, 0xb7, 0x1a, 0x73, 0xab, 0xdc,
	0xa1, 0xd3, 0xd0, 0x69, 0xb2, 0x3f, 0xb0, 0x5e, 0xbd, 0x4b, 0x7a, 0xdf, 0xfd, 0xdf, 0xbb, 0x4d,
	0xe7, 0x8d, 0x3e, 0xf9, 0xa9, 0xd3, 0xa4, 0x3a, 0xb6, 0xfe, 0xe5, 0x63, 0x46, 0xc9, 0x2a, 0xa3,
	0x64, 0x9d, 0x51, 0xf2, 0x94, 0x51, 0xf2, 0xb0, 0xa5, 0xb5, 0xd5, 0x96, 0xd6, 0xd6, 0x5b, 0x5a,
	0xbb, 0x39, 0x8d, 0x62, 0x54, 0x69, 0xd8, 0x17, 0x90, 0xb0, 0x7c, 0xc0, 0x13, 0x2d, 0xf1, 0x16,
	0xcc, 0x8c, 0x1d, 0xd6, 0xbc, 0x7b, 0xb5, 0x27, 0xde, 0x2f, 0xa4, 0x0d, 0x7f, 0x14, 0x43, 0x0e,
	0x5f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xca, 0xdd, 0x3d, 0xd8, 0x16, 0x02, 0x00, 0x00,
}

func (m *EventCreateMorseAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateMorseAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateMorseAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumAccounts != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumAccounts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MorseAccountStateHash) > 0 {
		i -= len(m.MorseAccountStateHash)
		copy(dAtA[i:], m.MorseAccountStateHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MorseAccountStateHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAtHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CreatedAtHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateMorseAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAtHeight != 0 {
		n += 1 + sovEvent(uint64(m.CreatedAtHeight))
	}
	l = len(m.MorseAccountStateHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumAccounts != 0 {
		n += 1 + sovEvent(uint64(m.NumAccounts))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateMorseAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateMorseAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateMorseAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtHeight", wireType)
			}
			m.CreatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseAccountStateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseAccountStateHash = append(m.MorseAccountStateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MorseAccountStateHash == nil {
				m.MorseAccountStateHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAccounts", wireType)
			}
			m.NumAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAccounts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
