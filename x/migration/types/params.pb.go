// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/migration/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// waive_morse_claim_gas_fees is a feature flag used to enable/disable the waiving of gas fees for txs that:
	// - Contain exactly one secp256k1 signer
	// - Contain at least one Morse account/actor claim messages
	// - Do not contain any other messages other than Morse account/actor claim messages
	WaiveMorseClaimGasFees bool `protobuf:"varint,1,opt,name=waive_morse_claim_gas_fees,json=waiveMorseClaimGasFees,proto3" json:"waive_morse_claim_gas_fees" yaml:"waive_morse_claim_gas_fees"`
	// allow_morse_account_import_overwrite is a feature flag which is used to enable/disable
	// the re-importing of Morse claimable accounts by the authority.
	// Such a re-import will:
	// - Ignore (i.e. leave) ALL claimed destination Shannon accounts/actors
	// - Delete ALL existing onchain MorseClaimableAccounts
	// - Import the new set of MorseClaimableAccounts from the provided MsgImportMorseClaimableAccounts
	// This is useful for testing purposes, but should be disabled in production.
	AllowMorseAccountImportOverwrite bool `protobuf:"varint,2,opt,name=allow_morse_account_import_overwrite,json=allowMorseAccountImportOverwrite,proto3" json:"allow_morse_account_import_overwrite" yaml:"allow_morse_account_import_overwrite"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_df24630ca1567ad4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetWaiveMorseClaimGasFees() bool {
	if m != nil {
		return m.WaiveMorseClaimGasFees
	}
	return false
}

func (m *Params) GetAllowMorseAccountImportOverwrite() bool {
	if m != nil {
		return m.AllowMorseAccountImportOverwrite
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "pocket.migration.Params")
}

func init() { proto.RegisterFile("pocket/migration/params.proto", fileDescriptor_df24630ca1567ad4) }

var fileDescriptor_df24630ca1567ad4 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0xc8, 0x4f, 0xce,
	0x4e, 0x2d, 0xd1, 0xcf, 0xcd, 0x4c, 0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x48, 0x2c,
	0x4a, 0xcc, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0x48, 0xeb, 0xc1, 0xa5,
	0xa5, 0x04, 0x13, 0x73, 0x33, 0xf3, 0xf2, 0xf5, 0xc1, 0x24, 0x44, 0x91, 0x94, 0x48, 0x7a, 0x7e,
	0x7a, 0x3e, 0x98, 0xa9, 0x0f, 0x62, 0x41, 0x44, 0x95, 0xae, 0x33, 0x71, 0xb1, 0x05, 0x80, 0xcd,
	0x12, 0xaa, 0xe7, 0x92, 0x2a, 0x4f, 0xcc, 0x2c, 0x4b, 0x8d, 0xcf, 0xcd, 0x2f, 0x2a, 0x4e, 0x8d,
	0x4f, 0xce, 0x49, 0xcc, 0xcc, 0x8d, 0x4f, 0x4f, 0x2c, 0x8e, 0x4f, 0x4b, 0x4d, 0x2d, 0x96, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x70, 0x72, 0x7e, 0x75, 0x4f, 0x1e, 0x8f, 0xaa, 0x4f, 0xf7, 0xe4, 0x15,
	0x2b, 0x13, 0x73, 0x73, 0xac, 0x94, 0x70, 0xab, 0x51, 0x0a, 0x12, 0x03, 0x4b, 0xfa, 0x82, 0xe4,
	0x9c, 0x41, 0x52, 0xee, 0x89, 0xc5, 0x6e, 0xa9, 0xa9, 0xc5, 0x42, 0xcb, 0x19, 0xb9, 0x54, 0x12,
	0x73, 0x72, 0xf2, 0xcb, 0xa1, 0xfa, 0x12, 0x93, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0xe2, 0x33, 0x73,
	0x0b, 0xf2, 0x8b, 0x4a, 0xe2, 0xf3, 0xcb, 0x52, 0x8b, 0xca, 0x8b, 0x32, 0x4b, 0x52, 0x25, 0x98,
	0xc0, 0x6e, 0x09, 0x7f, 0x75, 0x4f, 0x9e, 0x28, 0xf5, 0x9f, 0xee, 0xc9, 0x6b, 0x43, 0x5c, 0x45,
	0x8c, 0x6a, 0xa5, 0x20, 0x05, 0xb0, 0x32, 0xb0, 0xfb, 0x1c, 0x21, 0x8a, 0x3c, 0xc1, 0x6a, 0xfc,
	0x61, 0x4a, 0xac, 0x94, 0x5e, 0x2c, 0x90, 0x67, 0xec, 0x7a, 0xbe, 0x41, 0x4b, 0x12, 0x1a, 0x31,
	0x15, 0x48, 0x51, 0x03, 0x09, 0x4e, 0xa7, 0x80, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96,
	0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x28, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39,
	0x3f, 0x57, 0xbf, 0x20, 0x3f, 0xbb, 0x44, 0x37, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x1b, 0xcc,
	0x29, 0xca, 0xcf, 0xc9, 0x41, 0x31, 0xb2, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x65,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xef, 0xca, 0x6f, 0x0e, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WaiveMorseClaimGasFees != that1.WaiveMorseClaimGasFees {
		return false
	}
	if this.AllowMorseAccountImportOverwrite != that1.AllowMorseAccountImportOverwrite {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowMorseAccountImportOverwrite {
		i--
		if m.AllowMorseAccountImportOverwrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.WaiveMorseClaimGasFees {
		i--
		if m.WaiveMorseClaimGasFees {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaiveMorseClaimGasFees {
		n += 2
	}
	if m.AllowMorseAccountImportOverwrite {
		n += 2
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiveMorseClaimGasFees", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaiveMorseClaimGasFees = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMorseAccountImportOverwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMorseAccountImportOverwrite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
