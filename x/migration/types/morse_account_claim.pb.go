// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/migration/morse_account_claim.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MorseAccountClaim struct {
	MorseSrcAddress    string `protobuf:"bytes,1,opt,name=morseSrcAddress,proto3" json:"morseSrcAddress,omitempty"`
	MorseSignature     string `protobuf:"bytes,2,opt,name=morseSignature,proto3" json:"morseSignature,omitempty"`
	ShannonDestAddress string `protobuf:"bytes,3,opt,name=shannonDestAddress,proto3" json:"shannonDestAddress,omitempty"`
}

func (m *MorseAccountClaim) Reset()         { *m = MorseAccountClaim{} }
func (m *MorseAccountClaim) String() string { return proto.CompactTextString(m) }
func (*MorseAccountClaim) ProtoMessage()    {}
func (*MorseAccountClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_5680cdbdbf6fe8f5, []int{0}
}
func (m *MorseAccountClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MorseAccountClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MorseAccountClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MorseAccountClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseAccountClaim.Merge(m, src)
}
func (m *MorseAccountClaim) XXX_Size() int {
	return m.Size()
}
func (m *MorseAccountClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseAccountClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MorseAccountClaim proto.InternalMessageInfo

func (m *MorseAccountClaim) GetMorseSrcAddress() string {
	if m != nil {
		return m.MorseSrcAddress
	}
	return ""
}

func (m *MorseAccountClaim) GetMorseSignature() string {
	if m != nil {
		return m.MorseSignature
	}
	return ""
}

func (m *MorseAccountClaim) GetShannonDestAddress() string {
	if m != nil {
		return m.ShannonDestAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*MorseAccountClaim)(nil), "poktroll.migration.MorseAccountClaim")
}

func init() {
	proto.RegisterFile("poktroll/migration/morse_account_claim.proto", fileDescriptor_5680cdbdbf6fe8f5)
}

var fileDescriptor_5680cdbdbf6fe8f5 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x29, 0xc8, 0xcf, 0x2e,
	0x29, 0xca, 0xcf, 0xc9, 0xd1, 0xcf, 0xcd, 0x4c, 0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0xcf,
	0xcd, 0x2f, 0x2a, 0x4e, 0x8d, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x89, 0x4f, 0xce, 0x49,
	0xcc, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x82, 0xa9, 0xd6, 0x83, 0xab, 0x56,
	0x9a, 0xca, 0xc8, 0x25, 0xe8, 0x0b, 0xd2, 0xe1, 0x08, 0xd1, 0xe0, 0x0c, 0x52, 0x2f, 0xa4, 0xc1,
	0xc5, 0x0f, 0x36, 0x26, 0xb8, 0x28, 0xd9, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x33, 0x08, 0x5d, 0x58, 0x48, 0x8d, 0x8b, 0x0f, 0x22, 0x94, 0x99, 0x9e, 0x97,
	0x58, 0x52, 0x5a, 0x94, 0x2a, 0xc1, 0x04, 0x56, 0x88, 0x26, 0x2a, 0xa4, 0xc7, 0x25, 0x54, 0x9c,
	0x91, 0x98, 0x97, 0x97, 0x9f, 0xe7, 0x92, 0x5a, 0x5c, 0x02, 0x33, 0x94, 0x19, 0xac, 0x16, 0x8b,
	0x8c, 0x93, 0xcf, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38,
	0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x19, 0xa5, 0x67,
	0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x83, 0x3c, 0xa4, 0x9b, 0x97, 0x5a, 0x52,
	0x9e, 0x5f, 0x94, 0xad, 0x0f, 0x0f, 0x8b, 0x0a, 0xa4, 0xd0, 0x28, 0xa9, 0x2c, 0x48, 0x2d, 0x4e,
	0x62, 0x03, 0x07, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x85, 0x51, 0xc9, 0x27, 0x30, 0x01,
	0x00, 0x00,
}

func (m *MorseAccountClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MorseAccountClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MorseAccountClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShannonDestAddress) > 0 {
		i -= len(m.ShannonDestAddress)
		copy(dAtA[i:], m.ShannonDestAddress)
		i = encodeVarintMorseAccountClaim(dAtA, i, uint64(len(m.ShannonDestAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MorseSignature) > 0 {
		i -= len(m.MorseSignature)
		copy(dAtA[i:], m.MorseSignature)
		i = encodeVarintMorseAccountClaim(dAtA, i, uint64(len(m.MorseSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MorseSrcAddress) > 0 {
		i -= len(m.MorseSrcAddress)
		copy(dAtA[i:], m.MorseSrcAddress)
		i = encodeVarintMorseAccountClaim(dAtA, i, uint64(len(m.MorseSrcAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMorseAccountClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovMorseAccountClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MorseAccountClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MorseSrcAddress)
	if l > 0 {
		n += 1 + l + sovMorseAccountClaim(uint64(l))
	}
	l = len(m.MorseSignature)
	if l > 0 {
		n += 1 + l + sovMorseAccountClaim(uint64(l))
	}
	l = len(m.ShannonDestAddress)
	if l > 0 {
		n += 1 + l + sovMorseAccountClaim(uint64(l))
	}
	return n
}

func sovMorseAccountClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMorseAccountClaim(x uint64) (n int) {
	return sovMorseAccountClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MorseAccountClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMorseAccountClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MorseAccountClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MorseAccountClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseAccountClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MorseSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseAccountClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MorseSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShannonDestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMorseAccountClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShannonDestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMorseAccountClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMorseAccountClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMorseAccountClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMorseAccountClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseAccountClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMorseAccountClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMorseAccountClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMorseAccountClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMorseAccountClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMorseAccountClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMorseAccountClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMorseAccountClaim = fmt.Errorf("proto: unexpected end of group")
)
