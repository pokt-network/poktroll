package cmd

import (
	"bytes"
	"encoding/base64"
	"os"

	cmtjson "github.com/cometbft/cometbft/libs/json"
	cosmosclient "github.com/cosmos/cosmos-sdk/client"
	cosmosflags "github.com/cosmos/cosmos-sdk/client/flags"
	cosmostypes "github.com/cosmos/cosmos-sdk/types"
	"github.com/cosmos/cosmos-sdk/x/authz"
	"github.com/spf13/cobra"

	"github.com/pokt-network/poktroll/cmd/flags"
	"github.com/pokt-network/poktroll/cmd/logger"
	migrationtypes "github.com/pokt-network/poktroll/x/migration/types"
)

func ImportMorseAccountsCmd() *cobra.Command {
	importMorseAcctsCmd := &cobra.Command{
		Use:   "import-morse-accounts [msg-import-morse-accounts-path]",
		Short: "Import the Morse accounts contained within the given MsgImportMorseClaimableAccount JSON file",
		Long: `Import the Morse accounts contained within the given MsgImportMorseClaimableAccoun" JSON file.

The Morse account state JSON can be generated by transforming the "Morse state export".
This will construct, sign, and broadcast a tx containing a MsgImportMorseClaimableAccounts message.

For more help information, see:
	$ pocket util export-genesis-for-reset -h
	$ pocketd tx migration collect-morse-accounts

For more documentation, refer to: https://dev.poktroll.com/operate/morse_migration/roadmap`,
		Example: `
	pocketd tx migration import-morse-accounts $HOME/morse-snapshot/msg_morse_import_accounts_166819_2025-04-29.json --from=pnf --grpc-addr=localhost:9090 --home ./localnet/pocketd
	pocketd tx migration import-morse-accounts $HOME/morse-snapshot/msg_morse_import_accounts_166819_2025-04-29.json --from=pnf --grpc-addr=https://shannon-testnet-grove-grpc.beta.poktroll.com`,
		Args:    cobra.ExactArgs(1),
		RunE:    runImportMorseAccounts,
		PreRunE: logger.PreRunESetup,
	}

	// Add Cosmos SDK standard flags to the command
	cosmosflags.AddTxFlagsToCmd(importMorseAcctsCmd)

	// DEV_NOTE: This is required by the TxClient.
	// Despite this being a "tx" command, the TxClient still "queries" for its own TxResult events.
	// We're intentionally omitting a default so the user is forced to specify it correctly due to the importance of the command.
	importMorseAcctsCmd.Flags().String(cosmosflags.FlagGRPC, flags.OmittedDefaultFlagValue, "Register the default Cosmos node grpc flag, which is needed to initialize the Cosmos query context with grpc correctly. It can be used to override the `QueryNodeGRPCURL` field in the config file if specified.")
	importMorseAcctsCmd.Flags().Bool(cosmosflags.FlagGRPCInsecure, true, "Used to initialize the Cosmos query context with grpc security options. It can be used to override the `QueryNodeGRPCInsecure` field in the config file if specified.")

	importMorseAcctsCmd.Flags().String(flags.FlagLogLevel, flags.DefaultLogLevel, flags.FlagLogLevelUsage)
	importMorseAcctsCmd.Flags().String(flags.FlagLogOutput, flags.DefaultLogOutput, flags.FlagLogOutputUsage)

	return importMorseAcctsCmd
}

// runImportMorseAccounts performs the following sequence:
// - Load the Morse account state from the given morse-account-state-json-path arg.
// - Construct a MsgImportMorseClaimableAccounts from the morse-account-state and authority (i.e. the signer).
// - Sign and broadcast the MsgImportMorseClaimableAccounts using the key associated with the Shannon address/name specified by the `--from` flag.
// - Wait (i.e. block) until the tx is committed onchain for either a synchronous or asynchronous error.
func runImportMorseAccounts(cmd *cobra.Command, args []string) error {
	ctx := cmd.Context()

	// Ensure the MsgImportMorseClaimableAccounts message JSON file exists.
	msgImportMorseClaimableAccountsJSONPath := args[0]
	if _, err := os.Stat(msgImportMorseClaimableAccountsJSONPath); err != nil {
		return err
	}

	// Read and deserialize it the MsrImportMorseClaimableAccounts message JSON file.
	msgImportMorseClaimableAccountsJSONBz, err := os.ReadFile(msgImportMorseClaimableAccountsJSONPath)
	if err != nil {
		return err
	}

	// Deserialize the MsgImportMorseAccountState message.
	msgImportMorseClaimableAccounts := new(migrationtypes.MsgImportMorseClaimableAccounts)
	err = cmtjson.Unmarshal(msgImportMorseClaimableAccountsJSONBz, msgImportMorseClaimableAccounts)
	if err != nil {
		return err
	}

	// Ensure the morse account state hash matches the expected morse account state hash.
	expectedMorseAccountStateHash := msgImportMorseClaimableAccounts.GetMorseAccountStateHash()
	actualMorseAccountStateHash, err := msgImportMorseClaimableAccounts.GetMorseAccountState().GetHash()
	if err != nil {
		return err
	}

	// DEV_NOTE: This check is not strictly necessary but it is prudent to add.
	// It is an additional sanity check to ensure that the morse account state is valid.
	if !bytes.Equal(expectedMorseAccountStateHash, actualMorseAccountStateHash) {
		actualMorseAccountStateHashBase64 := base64.StdEncoding.EncodeToString(actualMorseAccountStateHash)
		expectedMorseAccountStateHashBase64 := base64.StdEncoding.EncodeToString(expectedMorseAccountStateHash)
		return ErrInvalidMorseAccountState.Wrapf(
			"expected morse account state hash (%s) doesn't match actual morse account state hash (%s)",
			expectedMorseAccountStateHashBase64, actualMorseAccountStateHashBase64,
		)
	}

	// Conventionally derive a cosmos-sdk client context from the cobra command.
	clientCtx, err := cosmosclient.GetClientTxContext(cmd)
	if err != nil {
		return err
	}

	// Package the MsgImportMorseAccountState message into a MsgAuthzExec message.
	//
	// MsgImportMorseAccountState is an authority-gated message.
	// By default, the governance module address is the configured onchain authority.
	// In order to facilitate authorization of externally owned accounts (e.g. the foundation),
	// the authz module is used.
	//
	// DEV_NOTE: This exec message requires a corresponding authz authorization to
	// be present onchain.
	//
	// See: https://docs.cosmos.network/v0.50/build/modules/authz#authorization-and-grant.
	msgAuthzExec := authz.NewMsgExec(
		clientCtx.FromAddress,
		[]cosmostypes.Msg{msgImportMorseClaimableAccounts},
	)

	// Initialize the tx client.
	txClient, err := flags.GetTxClientFromFlags(ctx, cmd)
	if err != nil {
		return err
	}

	// Sign and broadcast the claim Morse account message.
	_, eitherErr := txClient.SignAndBroadcast(ctx, &msgAuthzExec)
	err, errCh := eitherErr.SyncOrAsyncError()
	if err != nil {
		return err
	}

	// Wait (i.e. block) for an async error, timeout, or the errCh to close on success.
	return <-errCh
}
