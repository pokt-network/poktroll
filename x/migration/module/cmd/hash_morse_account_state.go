package cmd

import (
	"encoding/base64"
	"os"

	cmtjson "github.com/cometbft/cometbft/libs/json"
	"github.com/spf13/cobra"

	"github.com/pokt-network/poktroll/cmd/flags"
	"github.com/pokt-network/poktroll/cmd/logger"
	migrationtypes "github.com/pokt-network/poktroll/x/migration/types"
)

var (
	flagQuiet      = "quiet"
	flagQuietShort = "q"
	flagQuietUsage = "When enabled, only prints the hash."

	quiet bool
)

func HashMorseAccountsCmd() *cobra.Command {
	hashMorseAcctsCmd := &cobra.Command{
		Use:   "hash-morse-accounts [morse-account-state-json-path]",
		Short: "Hash the morse account state JSON file",
		Long: `Hash the morse account state JSON file.

The morse account state JSON can be generated by transforming the "Morse state export".
This command will generate the canonical hash of the Morse account state, which MUST be provided in the MsgImportMorseClaimableAccounts message.
The canonical hash is expected to be transported in human-readable form as a base64-encoded string.
The canonical hash is generated by taking the sha256 hash of the protobuf-encoded MorseAccountState which is loaded from the morse-account-state-json-path.
`,
		Example: `
pocketd tx migration hash-morse-accounts ./tools/scripts/morse_account_state.json --from=pnf --grpc-addr=localhost:9090 --home ./localnet/pocketd
pocketd tx migration hash-morse-accounts ./tools/scripts/morse_account_state.json --from=pnf --grpc-addr=https://shannon-testnet-grove-grpc.beta.poktroll.com`,
		Args:    cobra.ExactArgs(1),
		PreRunE: logger.PreRunESetup,
		RunE:    runHashMorseAccounts,
	}

	hashMorseAcctsCmd.Flags().String(flags.FlagLogLevel, flags.DefaultLogLevel, flags.FlagLogLevelUsage)
	hashMorseAcctsCmd.Flags().String(flags.FlagLogOutput, flags.DefaultLogOutput, flags.FlagLogOutputUsage)
	hashMorseAcctsCmd.Flags().String(flags.FlagPassphrase, flags.OmittedDefaultFlagValue, flags.FlagPassphraseUsage)
	hashMorseAcctsCmd.Flags().BoolVarP(&quiet, flagQuiet, flagQuietShort, false, flagQuietUsage)

	return hashMorseAcctsCmd
}

func runHashMorseAccounts(_ *cobra.Command, args []string) error {
	morseAccountsStateJSONPath := args[0]

	// Load the morse account state from the given morse-account-state-json-path arg.
	morseAccountStateBz, err := os.ReadFile(morseAccountsStateJSONPath)
	if err != nil {
		return err
	}

	// Unmarshal the Morse account state.
	morseAccountState := new(migrationtypes.MorseAccountState)
	if err = cmtjson.Unmarshal(morseAccountStateBz, morseAccountState); err != nil {
		return err
	}

	morseAccountStateHash, err := morseAccountState.GetHash()
	if err != nil {
		return err
	}

	morseAccountStateHashBase64 := base64.StdEncoding.EncodeToString(morseAccountStateHash)

	switch quiet {
	case true:
		logger.Logger.Info().Msgf("%s", morseAccountStateHashBase64)
	case false:
		logger.Logger.Info().Msgf("morse account state JSON path: %s", morseAccountsStateJSONPath)
		logger.Logger.Info().Msgf("morse account state hash(base64): %s", morseAccountStateHashBase64)
	}
	return nil
}
