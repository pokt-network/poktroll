// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/service/params.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// The amount of uPOKT required to add a new service.
	// This will be deducted from the signer's account balance,
	// and transferred to the pocket network foundation.
	AddServiceFee *types.Coin `protobuf:"bytes,1,opt,name=add_service_fee,json=addServiceFee,proto3" json:"add_service_fee" yaml:"add_service_fee"`
	// target_num_relays is the target for the EMA of the number of relays per session.
	// Per service, onchain relay mining difficulty will be adjusted to maintain this target.
	TargetNumRelays uint64 `protobuf:"varint,2,opt,name=target_num_relays,json=targetNumRelays,proto3" json:"target_num_relays" yaml:"target_num_relays"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb052db7e9dc89f5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAddServiceFee() *types.Coin {
	if m != nil {
		return m.AddServiceFee
	}
	return nil
}

func (m *Params) GetTargetNumRelays() uint64 {
	if m != nil {
		return m.TargetNumRelays
	}
	return 0
}

// ParamsUpdate defines the parameters update along with the block height at which
// the update is effective.
// This mechanism enables governance to schedule parameter changes that take effect
// at a specified future block height, providing transparency and allowing network
// participants time to prepare for the changes.
type ParamsUpdate struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// activation_height specifies the block height at which these parameters will become effective.
	// Once the blockchain reaches this height, the parameters will automatically activate.
	ActivationHeight int64 `protobuf:"varint,2,opt,name=activation_height,json=activationHeight,proto3" json:"activation_height"`
	// deactivation_height specifies the block height at which these parameters will no longer be effective.
	// - For currently active parameters, this value is set to 0, indicating no scheduled deactivation.
	// - For scheduled future updates, this will be set when another parameter update is scheduled to replace this one.
	DeactivationHeight int64 `protobuf:"varint,3,opt,name=deactivation_height,json=deactivationHeight,proto3" json:"deactivation_height"`
}

func (m *ParamsUpdate) Reset()         { *m = ParamsUpdate{} }
func (m *ParamsUpdate) String() string { return proto.CompactTextString(m) }
func (*ParamsUpdate) ProtoMessage()    {}
func (*ParamsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb052db7e9dc89f5, []int{1}
}
func (m *ParamsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ParamsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsUpdate.Merge(m, src)
}
func (m *ParamsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ParamsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsUpdate proto.InternalMessageInfo

func (m *ParamsUpdate) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *ParamsUpdate) GetActivationHeight() int64 {
	if m != nil {
		return m.ActivationHeight
	}
	return 0
}

func (m *ParamsUpdate) GetDeactivationHeight() int64 {
	if m != nil {
		return m.DeactivationHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "pocket.service.Params")
	proto.RegisterType((*ParamsUpdate)(nil), "pocket.service.ParamsUpdate")
}

func init() { proto.RegisterFile("pocket/service/params.proto", fileDescriptor_bb052db7e9dc89f5) }

var fileDescriptor_bb052db7e9dc89f5 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x73, 0x14, 0x65, 0x38, 0xfe, 0x94, 0xb8, 0xd0, 0x86, 0x22, 0xdd, 0x45, 0x9e, 0xaa,
	0x4a, 0xbd, 0x23, 0xb0, 0x75, 0x74, 0x25, 0xd4, 0xa9, 0x42, 0x46, 0x2c, 0x48, 0xc8, 0xba, 0xd8,
	0x2f, 0xce, 0x29, 0xb1, 0xcf, 0xb2, 0x2f, 0x81, 0x7c, 0x05, 0x26, 0x3e, 0x02, 0x23, 0x63, 0x3f,
	0x46, 0xc7, 0x8e, 0x9d, 0x2c, 0x48, 0x86, 0x22, 0x8f, 0x5d, 0x59, 0x50, 0xee, 0x4e, 0x50, 0x62,
	0x16, 0xeb, 0xbd, 0xe7, 0xf7, 0xfa, 0x39, 0x3d, 0x8f, 0x0e, 0x3f, 0x2b, 0x54, 0x3c, 0x01, 0xcd,
	0x2b, 0x28, 0xe7, 0x32, 0x06, 0x5e, 0x88, 0x52, 0x64, 0x15, 0x2b, 0x4a, 0xa5, 0x95, 0xf7, 0xd0,
	0x42, 0xe6, 0xe0, 0x7e, 0x4f, 0x64, 0x32, 0x57, 0xdc, 0x7c, 0xed, 0xca, 0xfe, 0xe3, 0x54, 0xa5,
	0xca, 0x8c, 0x7c, 0x3d, 0x39, 0x95, 0xc4, 0xaa, 0xca, 0x54, 0xc5, 0x47, 0xa2, 0x02, 0x3e, 0x1f,
	0x8e, 0x40, 0x8b, 0x21, 0x8f, 0x95, 0xcc, 0x2d, 0xf7, 0x7f, 0x21, 0xdc, 0x7d, 0x6d, 0x6e, 0xf2,
	0x0a, 0xbc, 0x2d, 0x92, 0x24, 0x72, 0x57, 0x44, 0x1f, 0x00, 0xfa, 0x68, 0x80, 0x0e, 0xee, 0xbd,
	0x78, 0xca, 0xac, 0x09, 0x5b, 0x9b, 0x30, 0x67, 0xc2, 0x4e, 0x94, 0xcc, 0x83, 0xa3, 0xa6, 0xa6,
	0x9b, 0x7f, 0xdd, 0xd4, 0x74, 0x77, 0x21, 0xb2, 0xe9, 0xb1, 0xbf, 0x01, 0xfc, 0xf0, 0x81, 0x48,
	0x92, 0x37, 0x56, 0x78, 0x05, 0xe0, 0xbd, 0xc7, 0x3d, 0x2d, 0xca, 0x14, 0x74, 0x94, 0xcf, 0xb2,
	0xa8, 0x84, 0xa9, 0x58, 0x54, 0xfd, 0x3b, 0x03, 0x74, 0x70, 0x37, 0x18, 0x36, 0x35, 0x6d, 0xc3,
	0x9b, 0x9a, 0xf6, 0xad, 0x75, 0x0b, 0xf9, 0xe1, 0xb6, 0xd5, 0xce, 0x66, 0x59, 0x68, 0x94, 0xe3,
	0xc1, 0xcf, 0xaf, 0x14, 0x7d, 0xbe, 0x3e, 0x3f, 0xdc, 0x73, 0xd5, 0x7e, 0xfa, 0x53, 0xae, 0x8d,
	0xec, 0xff, 0x40, 0xf8, 0xbe, 0x1d, 0xdf, 0x16, 0x89, 0xd0, 0xe0, 0x9d, 0xe0, 0xae, 0xed, 0xdd,
	0x45, 0xdf, 0x65, 0xff, 0x16, 0xcf, 0xec, 0x76, 0xb0, 0x73, 0x51, 0xd3, 0x4e, 0x53, 0x53, 0xb7,
	0xfd, 0xed, 0xfa, 0xfc, 0x10, 0x85, 0xee, 0xe0, 0x05, 0xb8, 0x27, 0x62, 0x2d, 0xe7, 0x42, 0x4b,
	0x95, 0x47, 0x63, 0x90, 0xe9, 0x58, 0x9b, 0x58, 0x5b, 0xc1, 0x93, 0x75, 0xac, 0x16, 0x0c, 0x1f,
	0xfd, 0x95, 0x4e, 0x8d, 0xe2, 0x9d, 0xe2, 0x9d, 0x04, 0xda, 0x2e, 0x5b, 0xc6, 0x65, 0xaf, 0xa9,
	0xe9, 0xff, 0x70, 0xe8, 0xdd, 0x16, 0xad, 0x53, 0x70, 0x76, 0xb1, 0x24, 0xe8, 0x72, 0x49, 0xd0,
	0xd5, 0x92, 0xa0, 0xef, 0x4b, 0x82, 0xbe, 0xac, 0x48, 0xe7, 0x72, 0x45, 0x3a, 0x57, 0x2b, 0xd2,
	0x79, 0xf7, 0x3c, 0x95, 0x7a, 0x3c, 0x1b, 0xb1, 0x58, 0x65, 0xbc, 0x50, 0x13, 0x7d, 0x94, 0x83,
	0xfe, 0xa8, 0xca, 0x89, 0x39, 0x94, 0x6a, 0x3a, 0xbd, 0x55, 0x9a, 0x5e, 0x14, 0x50, 0x8d, 0xba,
	0xe6, 0xe1, 0xbc, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x49, 0x6d, 0x7c, 0xca, 0xb0, 0x02, 0x00,
	0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddServiceFee.Equal(that1.AddServiceFee) {
		return false
	}
	if this.TargetNumRelays != that1.TargetNumRelays {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetNumRelays != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TargetNumRelays))
		i--
		dAtA[i] = 0x10
	}
	if m.AddServiceFee != nil {
		{
			size, err := m.AddServiceFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParamsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeactivationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DeactivationHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ActivationHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddServiceFee != nil {
		l = m.AddServiceFee.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.TargetNumRelays != 0 {
		n += 1 + sovParams(uint64(m.TargetNumRelays))
	}
	return n
}

func (m *ParamsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.ActivationHeight != 0 {
		n += 1 + sovParams(uint64(m.ActivationHeight))
	}
	if m.DeactivationHeight != 0 {
		n += 1 + sovParams(uint64(m.DeactivationHeight))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddServiceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddServiceFee == nil {
				m.AddServiceFee = &types.Coin{}
			}
			if err := m.AddServiceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNumRelays", wireType)
			}
			m.TargetNumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationHeight", wireType)
			}
			m.ActivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivationHeight", wireType)
			}
			m.DeactivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeactivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
