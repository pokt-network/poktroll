// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/service/relay.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/session/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Relay message
//
// - Contains both the RelayRequest (signed by the Application) and RelayResponse (signed by the Supplier).
// - The serialized tuple is stored in SMST leaves as values during the Claim/Proof lifecycle.
type Relay struct {
	Req *RelayRequest  `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Res *RelayResponse `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *Relay) Reset()         { *m = Relay{} }
func (m *Relay) String() string { return proto.CompactTextString(m) }
func (*Relay) ProtoMessage()    {}
func (*Relay) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7fe7b34438003f, []int{0}
}
func (m *Relay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Relay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relay.Merge(m, src)
}
func (m *Relay) XXX_Size() int {
	return m.Size()
}
func (m *Relay) XXX_DiscardUnknown() {
	xxx_messageInfo_Relay.DiscardUnknown(m)
}

var xxx_messageInfo_Relay proto.InternalMessageInfo

func (m *Relay) GetReq() *RelayRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *Relay) GetRes() *RelayResponse {
	if m != nil {
		return m.Res
	}
	return nil
}

// RelayRequestMetadata
//
// Contains metadata for a RelayRequest.
type RelayRequestMetadata struct {
	// Session header associated with the relay.
	SessionHeader *types.SessionHeader `protobuf:"bytes,1,opt,name=session_header,json=sessionHeader,proto3" json:"session_header,omitempty"`
	// Signature for the request:
	// - Serialized ring signature, created by either the application itself or a delegated gateway.
	// - Always uses the application's ring.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// TODO_MAINNET: Ensure this address is checked/verified onchain if needed.
	// See: https://github.com/pokt-network/poktroll/pull/567#discussion_r1628722168
	//
	// Supplier operator address:
	// - The Bech32 address of the supplier operator the relay is sent to.
	// - Used by the RelayMiner to route to the correct supplier.
	SupplierOperatorAddress string `protobuf:"bytes,3,opt,name=supplier_operator_address,json=supplierOperatorAddress,proto3" json:"supplier_operator_address,omitempty"`
}

func (m *RelayRequestMetadata) Reset()         { *m = RelayRequestMetadata{} }
func (m *RelayRequestMetadata) String() string { return proto.CompactTextString(m) }
func (*RelayRequestMetadata) ProtoMessage()    {}
func (*RelayRequestMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7fe7b34438003f, []int{1}
}
func (m *RelayRequestMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayRequestMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RelayRequestMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayRequestMetadata.Merge(m, src)
}
func (m *RelayRequestMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RelayRequestMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayRequestMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RelayRequestMetadata proto.InternalMessageInfo

func (m *RelayRequestMetadata) GetSessionHeader() *types.SessionHeader {
	if m != nil {
		return m.SessionHeader
	}
	return nil
}

func (m *RelayRequestMetadata) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *RelayRequestMetadata) GetSupplierOperatorAddress() string {
	if m != nil {
		return m.SupplierOperatorAddress
	}
	return ""
}

// RelayRequest
//
// Holds the request details for a relay.
type RelayRequest struct {
	Meta RelayRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// Serialized request payload:
	// - Passed directly to the service.
	// - Can be any supported format: JSON-RPC, REST, gRPC, etc.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RelayRequest) Reset()         { *m = RelayRequest{} }
func (m *RelayRequest) String() string { return proto.CompactTextString(m) }
func (*RelayRequest) ProtoMessage()    {}
func (*RelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7fe7b34438003f, []int{2}
}
func (m *RelayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayRequest.Merge(m, src)
}
func (m *RelayRequest) XXX_Size() int {
	return m.Size()
}
func (m *RelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelayRequest proto.InternalMessageInfo

func (m *RelayRequest) GetMeta() RelayRequestMetadata {
	if m != nil {
		return m.Meta
	}
	return RelayRequestMetadata{}
}

func (m *RelayRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// RelayResponse
//
// Contains the response details for a RelayRequest.
type RelayResponse struct {
	Meta RelayResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// Serialized response payload:
	// - Passed directly from the service.
	// - Can be any supported format: JSON-RPC, REST, gRPC, etc.
	// - Used when communicating between applications, gatewways, and relayminers
	// - Omitted when inserting relays into the SMST, and therefore in onchain proofs,
	//   in order to minimize onchain proof size.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// SHA256 hash of the response payload.
	// This field is used for proof verification without requiring the full payload.
	// The hash ensures response integrity while reducing on-chain storage requirements.
	PayloadHash []byte `protobuf:"bytes,4,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	// Error returned by the RelayMiner, if applicable.
	// - If no error occurred, this field is empty.
	RelayMinerError *RelayMinerError `protobuf:"bytes,3,opt,name=relay_miner_error,json=relayMinerError,proto3" json:"relay_miner_error,omitempty"`
}

func (m *RelayResponse) Reset()         { *m = RelayResponse{} }
func (m *RelayResponse) String() string { return proto.CompactTextString(m) }
func (*RelayResponse) ProtoMessage()    {}
func (*RelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7fe7b34438003f, []int{3}
}
func (m *RelayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayResponse.Merge(m, src)
}
func (m *RelayResponse) XXX_Size() int {
	return m.Size()
}
func (m *RelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RelayResponse proto.InternalMessageInfo

func (m *RelayResponse) GetMeta() RelayResponseMetadata {
	if m != nil {
		return m.Meta
	}
	return RelayResponseMetadata{}
}

func (m *RelayResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *RelayResponse) GetPayloadHash() []byte {
	if m != nil {
		return m.PayloadHash
	}
	return nil
}

func (m *RelayResponse) GetRelayMinerError() *RelayMinerError {
	if m != nil {
		return m.RelayMinerError
	}
	return nil
}

// RelayResponseMetadata
//
// Contains metadata for a RelayResponse.
type RelayResponseMetadata struct {
	// Session header associated with the relay.
	SessionHeader *types.SessionHeader `protobuf:"bytes,1,opt,name=session_header,json=sessionHeader,proto3" json:"session_header,omitempty"`
	// Signature of the supplier's operator on the response.
	SupplierOperatorSignature []byte `protobuf:"bytes,2,opt,name=supplier_operator_signature,json=supplierOperatorSignature,proto3" json:"supplier_operator_signature,omitempty"`
}

func (m *RelayResponseMetadata) Reset()         { *m = RelayResponseMetadata{} }
func (m *RelayResponseMetadata) String() string { return proto.CompactTextString(m) }
func (*RelayResponseMetadata) ProtoMessage()    {}
func (*RelayResponseMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7fe7b34438003f, []int{4}
}
func (m *RelayResponseMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayResponseMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RelayResponseMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayResponseMetadata.Merge(m, src)
}
func (m *RelayResponseMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RelayResponseMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayResponseMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RelayResponseMetadata proto.InternalMessageInfo

func (m *RelayResponseMetadata) GetSessionHeader() *types.SessionHeader {
	if m != nil {
		return m.SessionHeader
	}
	return nil
}

func (m *RelayResponseMetadata) GetSupplierOperatorSignature() []byte {
	if m != nil {
		return m.SupplierOperatorSignature
	}
	return nil
}

// RelayMinerError
//
// Contains error details returned by the RelayMiner.
type RelayMinerError struct {
	// Registered codespace for the error (groups errors by source/module, e.g. `relayer_proxy`).
	// See: https://github.com/pokt-network/poktroll/blob/main/pkg/relayer/proxy/errors.go#L8
	Codespace string `protobuf:"bytes,1,opt,name=codespace,proto3" json:"codespace,omitempty"`
	// Specific registered error code (e.g. `1` for `ErrRelayerProxyInvalidSession`)
	// See: https://github.com/pokt-network/poktroll/blob/main/pkg/relayer/proxy/errors.go#L9
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// Human-readable, concise error description.
	// Example `invalid session in relayer request` for `ErrRelayerProxyInvalidSession`.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Detailed error message (may include additional context).
	// Example: ErrRelayerProxyInvalidSession.Wrapf("application %q has %d service configs", ...)
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RelayMinerError) Reset()         { *m = RelayMinerError{} }
func (m *RelayMinerError) String() string { return proto.CompactTextString(m) }
func (*RelayMinerError) ProtoMessage()    {}
func (*RelayMinerError) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7fe7b34438003f, []int{5}
}
func (m *RelayMinerError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayMinerError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RelayMinerError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayMinerError.Merge(m, src)
}
func (m *RelayMinerError) XXX_Size() int {
	return m.Size()
}
func (m *RelayMinerError) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayMinerError.DiscardUnknown(m)
}

var xxx_messageInfo_RelayMinerError proto.InternalMessageInfo

func (m *RelayMinerError) GetCodespace() string {
	if m != nil {
		return m.Codespace
	}
	return ""
}

func (m *RelayMinerError) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RelayMinerError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RelayMinerError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Relay)(nil), "pocket.service.Relay")
	proto.RegisterType((*RelayRequestMetadata)(nil), "pocket.service.RelayRequestMetadata")
	proto.RegisterType((*RelayRequest)(nil), "pocket.service.RelayRequest")
	proto.RegisterType((*RelayResponse)(nil), "pocket.service.RelayResponse")
	proto.RegisterType((*RelayResponseMetadata)(nil), "pocket.service.RelayResponseMetadata")
	proto.RegisterType((*RelayMinerError)(nil), "pocket.service.RelayMinerError")
}

func init() { proto.RegisterFile("pocket/service/relay.proto", fileDescriptor_3c7fe7b34438003f) }

var fileDescriptor_3c7fe7b34438003f = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x69, 0x00, 0x65, 0xd3, 0x1f, 0xb1, 0x2a, 0xc2, 0x09, 0xc5, 0x0d, 0x16, 0x48, 0xbd,
	0xd4, 0x46, 0xe5, 0x5e, 0x44, 0x04, 0x52, 0x25, 0x54, 0x90, 0x36, 0x9c, 0xb8, 0x58, 0x5b, 0x7b,
	0x64, 0x5b, 0x49, 0xbc, 0xdb, 0x9d, 0x0d, 0x90, 0x13, 0xaf, 0xc0, 0x0b, 0xf0, 0x16, 0x3c, 0x44,
	0x8f, 0x11, 0xa7, 0x8a, 0x03, 0x42, 0xc9, 0x8b, 0x20, 0xaf, 0x37, 0xe4, 0x87, 0x52, 0x09, 0x89,
	0x53, 0x76, 0xe6, 0xfb, 0x66, 0xe6, 0x9b, 0x1f, 0x87, 0xb4, 0xa5, 0x88, 0xfb, 0xa0, 0x43, 0x04,
	0xf5, 0x3e, 0x8f, 0x21, 0x54, 0x30, 0xe0, 0xe3, 0x40, 0x2a, 0xa1, 0x05, 0xdd, 0xae, 0xb0, 0xc0,
	0x62, 0xed, 0x56, 0x2c, 0x70, 0x28, 0x30, 0x32, 0x68, 0x58, 0x19, 0x15, 0xb5, 0xbd, 0x9b, 0x8a,
	0x54, 0x54, 0xfe, 0xf2, 0x65, 0xbd, 0x8b, 0xe4, 0x88, 0xb9, 0x28, 0x42, 0x3d, 0x96, 0x60, 0x23,
	0xfc, 0x8c, 0xdc, 0x64, 0x65, 0x2d, 0x1a, 0x90, 0x0d, 0x05, 0xe7, 0xae, 0xd3, 0x71, 0x0e, 0x9a,
	0x47, 0x7b, 0xc1, 0x6a, 0xcd, 0xc0, 0x70, 0x18, 0x9c, 0x8f, 0x00, 0x35, 0x2b, 0x89, 0x34, 0x2c,
	0xf9, 0xe8, 0xde, 0x30, 0xfc, 0x07, 0x7f, 0xe1, 0xa3, 0x14, 0x05, 0x42, 0x19, 0x80, 0xfe, 0xc4,
	0x21, 0xbb, 0xcb, 0x69, 0x4e, 0x41, 0xf3, 0x84, 0x6b, 0x4e, 0x5f, 0x90, 0x6d, 0xab, 0x2c, 0xca,
	0x80, 0x27, 0xa0, 0xac, 0x88, 0xa5, 0xa4, 0x06, 0x0d, 0x7a, 0xd5, 0xef, 0x89, 0x21, 0xb1, 0x2d,
	0x5c, 0x36, 0xe9, 0x1e, 0x69, 0x60, 0x9e, 0x16, 0x5c, 0x8f, 0x14, 0x18, 0x55, 0x9b, 0x6c, 0xe1,
	0xa0, 0x6f, 0x49, 0x0b, 0x47, 0x52, 0x0e, 0x72, 0x50, 0x91, 0x90, 0xa0, 0xb8, 0x16, 0x2a, 0xe2,
	0x49, 0xa2, 0x00, 0xd1, 0xdd, 0xe8, 0x38, 0x07, 0x8d, 0xae, 0xfb, 0xed, 0xeb, 0xe1, 0xae, 0x9d,
	0xe6, 0xf3, 0x0a, 0xe9, 0x69, 0x95, 0x17, 0x29, 0xbb, 0x37, 0x0f, 0x7d, 0x63, 0x23, 0x2d, 0xec,
	0x67, 0x64, 0x73, 0xb9, 0x23, 0x7a, 0x4c, 0xea, 0x43, 0xd0, 0xdc, 0xea, 0x7f, 0x74, 0xdd, 0x10,
	0xe7, 0xdd, 0x77, 0xeb, 0x17, 0x3f, 0xf6, 0x6b, 0xcc, 0xc4, 0x51, 0x97, 0xdc, 0x96, 0x7c, 0x3c,
	0x10, 0x3c, 0xb1, 0x1d, 0xcc, 0x4d, 0xff, 0xbb, 0x43, 0xb6, 0x56, 0x66, 0x4a, 0x9f, 0xad, 0xd4,
	0x7a, 0x7c, 0xed, 0x02, 0xfe, 0xad, 0x18, 0x7d, 0x48, 0x36, 0xed, 0x33, 0xca, 0x38, 0x66, 0x6e,
	0xdd, 0xc0, 0x4d, 0xeb, 0x3b, 0xe1, 0x98, 0xd1, 0x57, 0xe4, 0x8e, 0x39, 0xd1, 0x68, 0x98, 0x17,
	0xa0, 0x22, 0x50, 0x4a, 0x28, 0x33, 0xc7, 0xe6, 0xd1, 0xfe, 0x95, 0x52, 0x4e, 0x4b, 0xde, 0xcb,
	0x92, 0xc6, 0x76, 0xd4, 0xaa, 0xc3, 0xff, 0xe2, 0x90, 0xbb, 0x57, 0xea, 0xfd, 0x4f, 0xa7, 0x71,
	0x4c, 0xee, 0xff, 0xb9, 0xfc, 0xf5, 0x63, 0x69, 0xad, 0x2f, 0xb9, 0x37, 0x27, 0xf8, 0x9f, 0xc8,
	0xce, 0x5a, 0x0f, 0xe5, 0xb5, 0xc5, 0x22, 0x01, 0x94, 0x3c, 0x06, 0xa3, 0xa9, 0xc1, 0x16, 0x0e,
	0x4a, 0x49, 0xbd, 0x34, 0x4c, 0xe6, 0x2d, 0x66, 0xde, 0xb4, 0x43, 0x9a, 0x09, 0x60, 0xac, 0x72,
	0xa9, 0x73, 0x51, 0x54, 0x37, 0xc7, 0x96, 0x5d, 0xe5, 0x42, 0x86, 0x80, 0xc8, 0x53, 0x30, 0x13,
	0x6f, 0xb0, 0xb9, 0xd9, 0x7d, 0x7d, 0x31, 0xf5, 0x9c, 0xc9, 0xd4, 0x73, 0x2e, 0xa7, 0x9e, 0xf3,
	0x73, 0xea, 0x39, 0x9f, 0x67, 0x5e, 0x6d, 0x32, 0xf3, 0x6a, 0x97, 0x33, 0xaf, 0xf6, 0xee, 0x49,
	0x9a, 0xeb, 0x6c, 0x74, 0x16, 0xc4, 0x62, 0x18, 0x4a, 0xd1, 0xd7, 0x87, 0x05, 0xe8, 0x0f, 0x42,
	0xf5, 0x8d, 0xa1, 0xc4, 0x60, 0x10, 0x7e, 0xfc, 0xfd, 0xbf, 0x62, 0x3e, 0xfd, 0xb3, 0x5b, 0xe6,
	0xdb, 0x7f, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x88, 0xfd, 0xef, 0x76, 0x04, 0x00, 0x00,
}

func (m *Relay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayRequestMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayRequestMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayRequestMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierOperatorAddress) > 0 {
		i -= len(m.SupplierOperatorAddress)
		copy(dAtA[i:], m.SupplierOperatorAddress)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.SupplierOperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionHeader != nil {
		{
			size, err := m.SessionHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RelayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayloadHash) > 0 {
		i -= len(m.PayloadHash)
		copy(dAtA[i:], m.PayloadHash)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.PayloadHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.RelayMinerError != nil {
		{
			size, err := m.RelayMinerError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RelayResponseMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayResponseMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayResponseMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierOperatorSignature) > 0 {
		i -= len(m.SupplierOperatorSignature)
		copy(dAtA[i:], m.SupplierOperatorSignature)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.SupplierOperatorSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionHeader != nil {
		{
			size, err := m.SessionHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayMinerError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayMinerError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayMinerError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Codespace) > 0 {
		i -= len(m.Codespace)
		copy(dAtA[i:], m.Codespace)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Codespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelay(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Relay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayRequestMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionHeader != nil {
		l = m.SessionHeader.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.SupplierOperatorAddress)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meta.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meta.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.RelayMinerError != nil {
		l = m.RelayMinerError.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.PayloadHash)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayResponseMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionHeader != nil {
		l = m.SessionHeader.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.SupplierOperatorSignature)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayMinerError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Codespace)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovRelay(uint64(m.Code))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func sovRelay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelay(x uint64) (n int) {
	return sovRelay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Relay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &RelayRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &RelayResponse{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayRequestMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayRequestMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayRequestMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionHeader == nil {
				m.SessionHeader = &types.SessionHeader{}
			}
			if err := m.SessionHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayMinerError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayMinerError == nil {
				m.RelayMinerError = &RelayMinerError{}
			}
			if err := m.RelayMinerError.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = append(m.PayloadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PayloadHash == nil {
				m.PayloadHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayResponseMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayResponseMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayResponseMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionHeader == nil {
				m.SessionHeader = &types.SessionHeader{}
			}
			if err := m.SessionHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorSignature = append(m.SupplierOperatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SupplierOperatorSignature == nil {
				m.SupplierOperatorSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayMinerError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayMinerError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayMinerError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelay = fmt.Errorf("proto: unexpected end of group")
)
