// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/service/relay.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/session/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Relay contains both the RelayRequest (signed by the Application) and the RelayResponse (signed by the Supplier).
// The serialized tuple is inserted into the SMST leaves as values in the Claim/Proof lifecycle.
type Relay struct {
	Req *RelayRequest  `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Res *RelayResponse `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *Relay) Reset()         { *m = Relay{} }
func (m *Relay) String() string { return proto.CompactTextString(m) }
func (*Relay) ProtoMessage()    {}
func (*Relay) Descriptor() ([]byte, []int) {
	return fileDescriptor_38cf3e40553b40a1, []int{0}
}
func (m *Relay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relay.Merge(m, src)
}
func (m *Relay) XXX_Size() int {
	return m.Size()
}
func (m *Relay) XXX_DiscardUnknown() {
	xxx_messageInfo_Relay.DiscardUnknown(m)
}

var xxx_messageInfo_Relay proto.InternalMessageInfo

func (m *Relay) GetReq() *RelayRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *Relay) GetRes() *RelayResponse {
	if m != nil {
		return m.Res
	}
	return nil
}

// RelayRequestMetadata contains the metadata for a RelayRequest.
type RelayRequestMetadata struct {
	SessionHeader *types.SessionHeader `protobuf:"bytes,1,opt,name=session_header,json=sessionHeader,proto3" json:"session_header,omitempty"`
	// The request signature is a serialized ring signature that may have been
	// by either the application itself or one of the gateways that the
	// application has delegated to. The signature is made using the ring of the
	// application in both cases.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RelayRequestMetadata) Reset()         { *m = RelayRequestMetadata{} }
func (m *RelayRequestMetadata) String() string { return proto.CompactTextString(m) }
func (*RelayRequestMetadata) ProtoMessage()    {}
func (*RelayRequestMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_38cf3e40553b40a1, []int{1}
}
func (m *RelayRequestMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayRequestMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayRequestMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayRequestMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayRequestMetadata.Merge(m, src)
}
func (m *RelayRequestMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RelayRequestMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayRequestMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RelayRequestMetadata proto.InternalMessageInfo

func (m *RelayRequestMetadata) GetSessionHeader() *types.SessionHeader {
	if m != nil {
		return m.SessionHeader
	}
	return nil
}

func (m *RelayRequestMetadata) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// RelayRequest holds the request details for a relay.
type RelayRequest struct {
	Meta RelayRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// payload is the serialized payload for the request.
	// The payload is passed directly to the service and as such can be any
	// format that the service supports: JSON-RPC, REST, gRPC, etc.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RelayRequest) Reset()         { *m = RelayRequest{} }
func (m *RelayRequest) String() string { return proto.CompactTextString(m) }
func (*RelayRequest) ProtoMessage()    {}
func (*RelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38cf3e40553b40a1, []int{2}
}
func (m *RelayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayRequest.Merge(m, src)
}
func (m *RelayRequest) XXX_Size() int {
	return m.Size()
}
func (m *RelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelayRequest proto.InternalMessageInfo

func (m *RelayRequest) GetMeta() RelayRequestMetadata {
	if m != nil {
		return m.Meta
	}
	return RelayRequestMetadata{}
}

func (m *RelayRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// RelayResponse contains the response details for a RelayRequest.
type RelayResponse struct {
	Meta RelayResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// payload is the serialized payload for the response.
	// The payload is passed directly from the service and as such can be any
	// format the the service responds with: JSON-RPC, REST, gRPC, etc.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RelayResponse) Reset()         { *m = RelayResponse{} }
func (m *RelayResponse) String() string { return proto.CompactTextString(m) }
func (*RelayResponse) ProtoMessage()    {}
func (*RelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_38cf3e40553b40a1, []int{3}
}
func (m *RelayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayResponse.Merge(m, src)
}
func (m *RelayResponse) XXX_Size() int {
	return m.Size()
}
func (m *RelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RelayResponse proto.InternalMessageInfo

func (m *RelayResponse) GetMeta() RelayResponseMetadata {
	if m != nil {
		return m.Meta
	}
	return RelayResponseMetadata{}
}

func (m *RelayResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// RelayResponseMetadata contains the metadata for a RelayResponse.
type RelayResponseMetadata struct {
	SessionHeader     *types.SessionHeader `protobuf:"bytes,1,opt,name=session_header,json=sessionHeader,proto3" json:"session_header,omitempty"`
	SupplierSignature []byte               `protobuf:"bytes,2,opt,name=supplier_signature,json=supplierSignature,proto3" json:"supplier_signature,omitempty"`
}

func (m *RelayResponseMetadata) Reset()         { *m = RelayResponseMetadata{} }
func (m *RelayResponseMetadata) String() string { return proto.CompactTextString(m) }
func (*RelayResponseMetadata) ProtoMessage()    {}
func (*RelayResponseMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_38cf3e40553b40a1, []int{4}
}
func (m *RelayResponseMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayResponseMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayResponseMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayResponseMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayResponseMetadata.Merge(m, src)
}
func (m *RelayResponseMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RelayResponseMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayResponseMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RelayResponseMetadata proto.InternalMessageInfo

func (m *RelayResponseMetadata) GetSessionHeader() *types.SessionHeader {
	if m != nil {
		return m.SessionHeader
	}
	return nil
}

func (m *RelayResponseMetadata) GetSupplierSignature() []byte {
	if m != nil {
		return m.SupplierSignature
	}
	return nil
}

func init() {
	proto.RegisterType((*Relay)(nil), "poktroll.service.Relay")
	proto.RegisterType((*RelayRequestMetadata)(nil), "poktroll.service.RelayRequestMetadata")
	proto.RegisterType((*RelayRequest)(nil), "poktroll.service.RelayRequest")
	proto.RegisterType((*RelayResponse)(nil), "poktroll.service.RelayResponse")
	proto.RegisterType((*RelayResponseMetadata)(nil), "poktroll.service.RelayResponseMetadata")
}

func init() { proto.RegisterFile("poktroll/service/relay.proto", fileDescriptor_38cf3e40553b40a1) }

var fileDescriptor_38cf3e40553b40a1 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcf, 0x4e, 0xe2, 0x40,
	0x18, 0x6f, 0x77, 0xd9, 0xdd, 0xec, 0x08, 0x46, 0x27, 0x98, 0x10, 0x42, 0x06, 0xd3, 0x83, 0x7a,
	0xa1, 0x45, 0x7d, 0x01, 0xe5, 0x60, 0x8c, 0x89, 0x97, 0x72, 0xf3, 0x42, 0x06, 0xf8, 0x52, 0x2a,
	0xa5, 0x33, 0xcc, 0x4c, 0x55, 0x12, 0x9f, 0xc1, 0xf8, 0x58, 0x1c, 0x39, 0x7a, 0x32, 0x06, 0x5e,
	0xc4, 0x74, 0xda, 0x62, 0x21, 0xfe, 0x89, 0x89, 0xa7, 0xe9, 0xf4, 0xf7, 0x77, 0xbe, 0x7c, 0xa8,
	0xc6, 0xd9, 0x50, 0x09, 0x16, 0x04, 0x8e, 0x04, 0x71, 0xe3, 0xf7, 0xc0, 0x11, 0x10, 0xd0, 0x89,
	0xcd, 0x05, 0x53, 0x0c, 0x6f, 0x65, 0xa8, 0x9d, 0xa2, 0xd5, 0xb2, 0xc7, 0x3c, 0xa6, 0x41, 0x27,
	0xfe, 0x4a, 0x78, 0x55, 0x92, 0x73, 0x91, 0xd2, 0x67, 0x61, 0x76, 0x26, 0xb8, 0x15, 0xa0, 0x3f,
	0x6e, 0x6c, 0x8b, 0x9b, 0xe8, 0xb7, 0x80, 0x71, 0xc5, 0xdc, 0x35, 0x0f, 0x36, 0x8e, 0x88, 0xbd,
	0x6e, 0x6f, 0x6b, 0x96, 0x0b, 0xe3, 0x08, 0xa4, 0x72, 0x63, 0x2a, 0x3e, 0x8c, 0x15, 0xb2, 0xf2,
	0x4b, 0x2b, 0xea, 0x1f, 0x2a, 0x24, 0x67, 0xa1, 0x84, 0x58, 0x22, 0xad, 0x7b, 0x54, 0xce, 0xfb,
	0x5c, 0x82, 0xa2, 0x7d, 0xaa, 0x28, 0x3e, 0x43, 0x9b, 0x69, 0xad, 0xce, 0x00, 0x68, 0x1f, 0x44,
	0xda, 0x63, 0xc5, 0x35, 0xa9, 0xdd, 0x4e, 0xce, 0x73, 0x4d, 0x73, 0x4b, 0x32, 0x7f, 0xc5, 0x35,
	0xf4, 0x5f, 0xfa, 0x5e, 0x48, 0x55, 0x24, 0x40, 0x17, 0x2b, 0xba, 0x6f, 0x3f, 0xac, 0x6b, 0x54,
	0xcc, 0xa7, 0xe3, 0x13, 0x54, 0x18, 0x81, 0xa2, 0x69, 0xd6, 0xde, 0xe7, 0x6f, 0xce, 0xba, 0xb6,
	0x0a, 0xd3, 0xe7, 0xba, 0xe1, 0x6a, 0x25, 0xae, 0xa0, 0x7f, 0x9c, 0x4e, 0x02, 0x46, 0xfb, 0x69,
	0x5a, 0x76, 0xb5, 0x02, 0x54, 0x5a, 0x79, 0x3f, 0x3e, 0x5d, 0x09, 0xdb, 0xff, 0x62, 0x5c, 0xdf,
	0x4c, 0x7b, 0x30, 0xd1, 0xce, 0xbb, 0xfa, 0x1f, 0x9b, 0x6c, 0x03, 0x61, 0x19, 0x71, 0x1e, 0xf8,
	0x20, 0x3a, 0xeb, 0x23, 0xde, 0xce, 0x90, 0x76, 0x06, 0xb4, 0x2e, 0xa6, 0x73, 0x62, 0xce, 0xe6,
	0xc4, 0x7c, 0x99, 0x13, 0xf3, 0x71, 0x41, 0x8c, 0xd9, 0x82, 0x18, 0x4f, 0x0b, 0x62, 0x5c, 0x35,
	0x3d, 0x5f, 0x0d, 0xa2, 0xae, 0xdd, 0x63, 0x23, 0x27, 0xae, 0xd0, 0x08, 0x41, 0xdd, 0x32, 0x31,
	0x74, 0x96, 0x8b, 0x7a, 0xb7, 0x5c, 0x78, 0x35, 0xe1, 0x20, 0xbb, 0x7f, 0xf5, 0xa6, 0x1e, 0xbf,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x85, 0x32, 0xe8, 0xd9, 0x11, 0x03, 0x00, 0x00,
}

func (m *Relay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayRequestMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayRequestMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayRequestMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionHeader != nil {
		{
			size, err := m.SessionHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RelayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RelayResponseMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayResponseMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayResponseMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierSignature) > 0 {
		i -= len(m.SupplierSignature)
		copy(dAtA[i:], m.SupplierSignature)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.SupplierSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionHeader != nil {
		{
			size, err := m.SessionHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelay(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Relay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayRequestMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionHeader != nil {
		l = m.SessionHeader.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meta.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meta.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayResponseMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionHeader != nil {
		l = m.SessionHeader.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.SupplierSignature)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func sovRelay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelay(x uint64) (n int) {
	return sovRelay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Relay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &RelayRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &RelayResponse{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayRequestMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayRequestMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayRequestMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionHeader == nil {
				m.SessionHeader = &types.SessionHeader{}
			}
			if err := m.SessionHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayResponseMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayResponseMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayResponseMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionHeader == nil {
				m.SessionHeader = &types.SessionHeader{}
			}
			if err := m.SessionHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierSignature = append(m.SupplierSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SupplierSignature == nil {
				m.SupplierSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelay = fmt.Errorf("proto: unexpected end of group")
)
