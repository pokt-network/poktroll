// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/tokenomics/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/proof/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO_CONSIDERATION: Consider prefixing these enums with CLAIM_EXPIRATION_REASON_
type ClaimExpirationReason int32

const (
	// Default value, means may be valid
	ClaimExpirationReason_EXPIRATION_REASON_UNSPECIFIED ClaimExpirationReason = 0
	// A proof was required but not submitted
	ClaimExpirationReason_PROOF_MISSING ClaimExpirationReason = 1
	// A proof was submitted but was invalid
	ClaimExpirationReason_PROOF_INVALID ClaimExpirationReason = 2
)

var ClaimExpirationReason_name = map[int32]string{
	0: "EXPIRATION_REASON_UNSPECIFIED",
	1: "PROOF_MISSING",
	2: "PROOF_INVALID",
}

var ClaimExpirationReason_value = map[string]int32{
	"EXPIRATION_REASON_UNSPECIFIED": 0,
	"PROOF_MISSING":                 1,
	"PROOF_INVALID":                 2,
}

func (x ClaimExpirationReason) String() string {
	return proto.EnumName(ClaimExpirationReason_name, int32(x))
}

func (ClaimExpirationReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{0}
}

// EventClaimExpired is emitted during settlement when a claim expires.
// This is likely the result of a claim requiring an onchain proof not being submitted.
// The claim cannot be settled, leading to that work never being rewarded.
type EventClaimExpired struct {
	// The claim that expired
	Claim *types.Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	// The reason why the claim expired, leading to a Supplier being penalized (i.e. burn).
	ExpirationReason ClaimExpirationReason `protobuf:"varint,2,opt,name=expiration_reason,json=expirationReason,proto3,enum=pocket.tokenomics.ClaimExpirationReason" json:"expiration_reason"`
	// Number of relays claimed to be in the session tree.
	NumRelays uint64 `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	// Number of compute units claimed in the session tree.
	// It is a function of the number of relays in the session tree and onchain parameters.
	NumClaimedComputeUnits uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	// Number of total estimated compute units of work done.
	// It is a function of the number of claimed compute units and the relay difficulty multiplier.
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	// The amount of uPOKT claimed for the work done.
	// It is a function of the number of estimated compute units and the compute units to token multiplier.
	ClaimedUpokt string `protobuf:"bytes,7,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt"`
}

func (m *EventClaimExpired) Reset()         { *m = EventClaimExpired{} }
func (m *EventClaimExpired) String() string { return proto.CompactTextString(m) }
func (*EventClaimExpired) ProtoMessage()    {}
func (*EventClaimExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{0}
}
func (m *EventClaimExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimExpired.Merge(m, src)
}
func (m *EventClaimExpired) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimExpired.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimExpired proto.InternalMessageInfo

func (m *EventClaimExpired) GetClaim() *types.Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventClaimExpired) GetExpirationReason() ClaimExpirationReason {
	if m != nil {
		return m.ExpirationReason
	}
	return ClaimExpirationReason_EXPIRATION_REASON_UNSPECIFIED
}

func (m *EventClaimExpired) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventClaimExpired) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventClaimExpired) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventClaimExpired) GetClaimedUpokt() string {
	if m != nil {
		return m.ClaimedUpokt
	}
	return ""
}

// EventClaimSettled is emitted during settlement whenever a claim is successfully settled.
// It may or may not require a proof depending on various on-chain parameters and other factors.
type EventClaimSettled struct {
	// Whether a proof was required for the claim to be settled.
	ProofRequirement types.ProofRequirementReason `protobuf:"varint,2,opt,name=proof_requirement,json=proofRequirement,proto3,enum=pocket.proof.ProofRequirementReason" json:"proof_requirement"`
	// Number of relays claimed to be in the session tree.
	NumRelays uint64 `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	// Number of compute units claimed in the session tree.
	// It is a function of the number of relays in the session tree and onchain parameters.
	NumClaimedComputeUnits uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	// Number of estimated compute units claimed in the session tree.
	// It is a function of the number of claimed compute units and the relay difficulty multiplier for the particular service.
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	// The uPOKT coin claimed to be rewarded for the work done as a function of
	// the number of estimated compute units and the compute units to token multiplier.
	ClaimedUpokt string `protobuf:"bytes,8,opt,name=claimed_upokt,json=claimedUpokt,proto3" json:"claimed_upokt"`
	// The Service ID to which the claim corresponds.
	ServiceId string `protobuf:"bytes,9,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The address of the application which participated in the claimed session.
	ApplicationAddress string `protobuf:"bytes,10,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
	// The end block height of the session to which the claim corresponds.
	SessionEndBlockHeight int64 `protobuf:"varint,11,opt,name=session_end_block_height,json=sessionEndBlockHeight,proto3" json:"session_end_block_height,omitempty"`
	// The validation status of the claim.
	// DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
	// enum to minimize onchain disk utilization. This is necessary because event
	// data is not always protobuf-encoded in the various places and formats that it
	// appears in onchain leveldb databases.
	// Enum values:
	//   PENDING_VALIDATION = 0;
	//   VALIDATED = 1;
	//   INVALID = 2;
	ClaimProofStatusInt int32 `protobuf:"varint,12,opt,name=claim_proof_status_int,json=claimProofStatusInt,proto3" json:"claim_proof_status_int,omitempty"`
}

func (m *EventClaimSettled) Reset()         { *m = EventClaimSettled{} }
func (m *EventClaimSettled) String() string { return proto.CompactTextString(m) }
func (*EventClaimSettled) ProtoMessage()    {}
func (*EventClaimSettled) Descriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{1}
}
func (m *EventClaimSettled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimSettled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimSettled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimSettled.Merge(m, src)
}
func (m *EventClaimSettled) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimSettled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimSettled.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimSettled proto.InternalMessageInfo

func (m *EventClaimSettled) GetProofRequirement() types.ProofRequirementReason {
	if m != nil {
		return m.ProofRequirement
	}
	return types.ProofRequirementReason_NOT_REQUIRED
}

func (m *EventClaimSettled) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventClaimSettled) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventClaimSettled) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventClaimSettled) GetClaimedUpokt() string {
	if m != nil {
		return m.ClaimedUpokt
	}
	return ""
}

func (m *EventClaimSettled) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *EventClaimSettled) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

func (m *EventClaimSettled) GetSessionEndBlockHeight() int64 {
	if m != nil {
		return m.SessionEndBlockHeight
	}
	return 0
}

func (m *EventClaimSettled) GetClaimProofStatusInt() int32 {
	if m != nil {
		return m.ClaimProofStatusInt
	}
	return 0
}

// EventApplicationOverserviced is emitted when an Application's stake cannot cover the Supplier's claim.
// This means the following will ALWAYS be strictly true:  effective_burn < expected_burn
// - Number of tokens burnt from app stake < Number of tokens burnt from supplier stake
type EventApplicationOverserviced struct {
	// The application address consuming onchain services
	ApplicationAddr string `protobuf:"bytes,1,opt,name=application_addr,json=applicationAddr,proto3" json:"application_addr,omitempty"`
	// The supplier operator address providing onchain services
	SupplierOperatorAddr string `protobuf:"bytes,2,opt,name=supplier_operator_addr,json=supplierOperatorAddr,proto3" json:"supplier_operator_addr,omitempty"`
	// Expected number of tokens to be burnt from the application's stake.
	// A function of the actual amount of work claimed to be done.
	ExpectedBurn string `protobuf:"bytes,5,opt,name=expected_burn,json=expectedBurn,proto3" json:"expected_burn,omitempty"`
	// Actual number of tokens burnt from the application's stake.
	// A function of the amount that could be covered (less than) relative to the amount of work claimed to be done.
	EffectiveBurn string `protobuf:"bytes,6,opt,name=effective_burn,json=effectiveBurn,proto3" json:"effective_burn,omitempty"`
}

func (m *EventApplicationOverserviced) Reset()         { *m = EventApplicationOverserviced{} }
func (m *EventApplicationOverserviced) String() string { return proto.CompactTextString(m) }
func (*EventApplicationOverserviced) ProtoMessage()    {}
func (*EventApplicationOverserviced) Descriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{2}
}
func (m *EventApplicationOverserviced) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationOverserviced) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationOverserviced) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationOverserviced.Merge(m, src)
}
func (m *EventApplicationOverserviced) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationOverserviced) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationOverserviced.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationOverserviced proto.InternalMessageInfo

func (m *EventApplicationOverserviced) GetApplicationAddr() string {
	if m != nil {
		return m.ApplicationAddr
	}
	return ""
}

func (m *EventApplicationOverserviced) GetSupplierOperatorAddr() string {
	if m != nil {
		return m.SupplierOperatorAddr
	}
	return ""
}

func (m *EventApplicationOverserviced) GetExpectedBurn() string {
	if m != nil {
		return m.ExpectedBurn
	}
	return ""
}

func (m *EventApplicationOverserviced) GetEffectiveBurn() string {
	if m != nil {
		return m.EffectiveBurn
	}
	return ""
}

// EventSupplierSlashed is emitted when a supplier is slashed.enum
// This can happen for in cases such as missing or invalid proofs for submitted claims.
type EventSupplierSlashed struct {
	// The claim the supplier is being slashed for.
	Claim *types.Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	// Amount slashed from the supplier's stake.
	// A function of the claim size, supplier stake, and various onchain parameters.
	ProofMissingPenalty string `protobuf:"bytes,3,opt,name=proof_missing_penalty,json=proofMissingPenalty,proto3" json:"proof_missing_penalty,omitempty"`
}

func (m *EventSupplierSlashed) Reset()         { *m = EventSupplierSlashed{} }
func (m *EventSupplierSlashed) String() string { return proto.CompactTextString(m) }
func (*EventSupplierSlashed) ProtoMessage()    {}
func (*EventSupplierSlashed) Descriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{3}
}
func (m *EventSupplierSlashed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSupplierSlashed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventSupplierSlashed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSupplierSlashed.Merge(m, src)
}
func (m *EventSupplierSlashed) XXX_Size() int {
	return m.Size()
}
func (m *EventSupplierSlashed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSupplierSlashed.DiscardUnknown(m)
}

var xxx_messageInfo_EventSupplierSlashed proto.InternalMessageInfo

func (m *EventSupplierSlashed) GetClaim() *types.Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventSupplierSlashed) GetProofMissingPenalty() string {
	if m != nil {
		return m.ProofMissingPenalty
	}
	return ""
}

// EventClaimDiscarded is emitted when a claim is discarded due to unexpected situations.
// It is used to prevent chain halts in favor of some missing claims.
type EventClaimDiscarded struct {
	// The claim that was discarded.
	Claim *types.Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	// The error that caused the claim to be discarded.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventClaimDiscarded) Reset()         { *m = EventClaimDiscarded{} }
func (m *EventClaimDiscarded) String() string { return proto.CompactTextString(m) }
func (*EventClaimDiscarded) ProtoMessage()    {}
func (*EventClaimDiscarded) Descriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{4}
}
func (m *EventClaimDiscarded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimDiscarded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimDiscarded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimDiscarded.Merge(m, src)
}
func (m *EventClaimDiscarded) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimDiscarded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimDiscarded.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimDiscarded proto.InternalMessageInfo

func (m *EventClaimDiscarded) GetClaim() *types.Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventClaimDiscarded) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// EventApplicationReimbursementRequest is emitted when an application requests a reimbursement from the DAO.
// It is intended to prevent self dealing attacks when global inflation is enabled.
// TODO_DISTANT_FUTURE: Remove this once global inflation is disabled in perpetuity.
type EventApplicationReimbursementRequest struct {
	// The application address consuming onchain services requesting reimbursement.
	ApplicationAddr string `protobuf:"bytes,1,opt,name=application_addr,json=applicationAddr,proto3" json:"application_addr,omitempty"`
	// The supplier operator address providing onchain services
	SupplierOperatorAddr string `protobuf:"bytes,2,opt,name=supplier_operator_addr,json=supplierOperatorAddr,proto3" json:"supplier_operator_addr,omitempty"`
	// The supplier owner address providing onchain services
	SupplierOwnerAddr string `protobuf:"bytes,3,opt,name=supplier_owner_addr,json=supplierOwnerAddr,proto3" json:"supplier_owner_addr,omitempty"`
	// The service ID associated with the session where a claim was submitted.
	ServiceId string `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The session ID associated with the session where a claim was submitted.
	SessionId string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The amount of uPOKT to be reimbursed to the application.
	Amount string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventApplicationReimbursementRequest) Reset()         { *m = EventApplicationReimbursementRequest{} }
func (m *EventApplicationReimbursementRequest) String() string { return proto.CompactTextString(m) }
func (*EventApplicationReimbursementRequest) ProtoMessage()    {}
func (*EventApplicationReimbursementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_146818b9f891ddf6, []int{5}
}
func (m *EventApplicationReimbursementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationReimbursementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationReimbursementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationReimbursementRequest.Merge(m, src)
}
func (m *EventApplicationReimbursementRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationReimbursementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationReimbursementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationReimbursementRequest proto.InternalMessageInfo

func (m *EventApplicationReimbursementRequest) GetApplicationAddr() string {
	if m != nil {
		return m.ApplicationAddr
	}
	return ""
}

func (m *EventApplicationReimbursementRequest) GetSupplierOperatorAddr() string {
	if m != nil {
		return m.SupplierOperatorAddr
	}
	return ""
}

func (m *EventApplicationReimbursementRequest) GetSupplierOwnerAddr() string {
	if m != nil {
		return m.SupplierOwnerAddr
	}
	return ""
}

func (m *EventApplicationReimbursementRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *EventApplicationReimbursementRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *EventApplicationReimbursementRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterEnum("pocket.tokenomics.ClaimExpirationReason", ClaimExpirationReason_name, ClaimExpirationReason_value)
	proto.RegisterType((*EventClaimExpired)(nil), "pocket.tokenomics.EventClaimExpired")
	proto.RegisterType((*EventClaimSettled)(nil), "pocket.tokenomics.EventClaimSettled")
	proto.RegisterType((*EventApplicationOverserviced)(nil), "pocket.tokenomics.EventApplicationOverserviced")
	proto.RegisterType((*EventSupplierSlashed)(nil), "pocket.tokenomics.EventSupplierSlashed")
	proto.RegisterType((*EventClaimDiscarded)(nil), "pocket.tokenomics.EventClaimDiscarded")
	proto.RegisterType((*EventApplicationReimbursementRequest)(nil), "pocket.tokenomics.EventApplicationReimbursementRequest")
}

func init() { proto.RegisterFile("pocket/tokenomics/event.proto", fileDescriptor_146818b9f891ddf6) }

var fileDescriptor_146818b9f891ddf6 = []byte{
	// 944 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x55, 0xdf, 0x6e, 0xe2, 0xc6,
	0x17, 0x8e, 0x89, 0x49, 0x60, 0x36, 0xc9, 0xcf, 0x98, 0x24, 0xf2, 0xee, 0xaf, 0x01, 0x4a, 0xb7,
	0x12, 0xad, 0x14, 0x90, 0x92, 0x55, 0x7b, 0x0d, 0x09, 0xdb, 0x1a, 0x75, 0x81, 0x0e, 0xcd, 0x6a,
	0xd5, 0x8b, 0xba, 0xc6, 0x9e, 0xc0, 0x08, 0x7b, 0xc6, 0x3b, 0x33, 0xce, 0x26, 0xea, 0x0b, 0xf4,
	0xb2, 0x52, 0x5f, 0xa5, 0x0f, 0xd1, 0xcb, 0x55, 0x6f, 0xba, 0x57, 0xa8, 0x4a, 0xee, 0x78, 0x8a,
	0xca, 0x33, 0x66, 0x21, 0xb0, 0xfd, 0x77, 0xd1, 0xab, 0xde, 0x80, 0xcf, 0xf9, 0xbe, 0x73, 0x66,
	0x8e, 0xbf, 0x73, 0x8e, 0xc1, 0x51, 0x44, 0xbd, 0x09, 0x12, 0x0d, 0x41, 0x27, 0x88, 0xd0, 0x10,
	0x7b, 0xbc, 0x81, 0xae, 0x10, 0x11, 0xf5, 0x88, 0x51, 0x41, 0xcd, 0x82, 0x82, 0xeb, 0x0b, 0xf8,
	0xd1, 0x43, 0x8f, 0xf2, 0x90, 0x72, 0x47, 0x12, 0x1a, 0xca, 0x50, 0xec, 0x47, 0xfb, 0x23, 0x3a,
	0xa2, 0xca, 0x9f, 0x3c, 0xa5, 0x5e, 0x2b, 0x3d, 0x22, 0x62, 0x94, 0x5e, 0x36, 0xc4, 0x4d, 0x84,
	0xe6, 0xfc, 0x77, 0x1c, 0xbe, 0x04, 0x57, 0xa7, 0x9b, 0xa0, 0xd0, 0x4e, 0x2e, 0x73, 0x16, 0xb8,
	0x38, 0x6c, 0x5f, 0x47, 0x98, 0x21, 0xdf, 0x7c, 0x02, 0xb2, 0x5e, 0x62, 0x5b, 0x5a, 0x45, 0xab,
	0x3d, 0x38, 0x29, 0xd6, 0xd3, 0x2b, 0xca, 0xf4, 0x75, 0x49, 0x6d, 0xe5, 0x67, 0xd3, 0xb2, 0x62,
	0x41, 0xf5, 0x67, 0x06, 0xa0, 0x80, 0x92, 0x04, 0xae, 0xc0, 0x94, 0x38, 0x0c, 0xb9, 0x9c, 0x12,
	0x2b, 0x53, 0xd1, 0x6a, 0x7b, 0x27, 0xb5, 0xfa, 0x5a, 0x91, 0xf5, 0xc5, 0x89, 0x32, 0x00, 0x4a,
	0x7e, 0xeb, 0x60, 0x36, 0x2d, 0xaf, 0xa7, 0x81, 0x06, 0x5a, 0x21, 0x9a, 0xc7, 0x00, 0x90, 0x38,
	0x74, 0x18, 0x0a, 0xdc, 0x1b, 0x6e, 0x6d, 0x56, 0xb4, 0x9a, 0xde, 0xda, 0x9b, 0x4d, 0xcb, 0x4b,
	0x5e, 0x98, 0x27, 0x71, 0x08, 0xe5, 0xa3, 0xf9, 0x02, 0x3c, 0x4c, 0x00, 0x79, 0x53, 0xe4, 0x3b,
	0x1e, 0x0d, 0xa3, 0x58, 0x20, 0x27, 0x26, 0x58, 0x70, 0x4b, 0x97, 0xd1, 0x47, 0xb3, 0x69, 0xf9,
	0x8f, 0x49, 0xf0, 0x90, 0xc4, 0xe1, 0x99, 0x42, 0xce, 0x14, 0x70, 0x91, 0xf8, 0xcd, 0x6f, 0xc0,
	0xff, 0x93, 0x20, 0xc4, 0x05, 0x0e, 0x5d, 0xb1, 0x96, 0x3b, 0x2b, 0x73, 0x97, 0x67, 0xd3, 0xf2,
	0x9f, 0xd1, 0xa0, 0x45, 0xe2, 0xb0, 0x3d, 0xc7, 0xee, 0xe5, 0xff, 0x04, 0xec, 0xce, 0x2f, 0x14,
	0x47, 0x74, 0x22, 0xac, 0xed, 0x8a, 0x56, 0xcb, 0xb7, 0x0a, 0xb3, 0x69, 0xf9, 0x3e, 0x00, 0x77,
	0x52, 0xf3, 0x22, 0xb1, 0x3a, 0x7a, 0x6e, 0xcb, 0xd8, 0xae, 0x7e, 0x9f, 0x5d, 0x16, 0x78, 0x80,
	0x84, 0x08, 0x90, 0x6f, 0x8e, 0x41, 0x41, 0x6a, 0xe9, 0x30, 0xf4, 0x32, 0xc6, 0x0c, 0x85, 0x88,
	0x88, 0x54, 0xaa, 0xc7, 0xf7, 0xc5, 0xee, 0x27, 0xbf, 0x70, 0xc1, 0x5a, 0x96, 0x69, 0x2d, 0x05,
	0x34, 0xa2, 0x15, 0xfa, 0x7f, 0x58, 0xa6, 0xdc, 0xdf, 0x92, 0xc9, 0x3c, 0x02, 0x80, 0x23, 0x76,
	0x85, 0x3d, 0xe4, 0x60, 0xdf, 0xca, 0x27, 0x41, 0x30, 0x9f, 0x7a, 0x6c, 0xdf, 0xb4, 0x41, 0xd1,
	0x8d, 0xa2, 0x00, 0x7b, 0x6a, 0x1c, 0x5c, 0xdf, 0x67, 0x88, 0x73, 0x0b, 0xc8, 0xe4, 0xd6, 0x2f,
	0x3f, 0x1d, 0xef, 0xa7, 0xeb, 0xa1, 0xa9, 0x90, 0x81, 0x60, 0x98, 0x8c, 0xa0, 0xb9, 0x14, 0x94,
	0x22, 0xe6, 0xa7, 0xc0, 0xe2, 0x88, 0xf3, 0x24, 0x0d, 0x22, 0xbe, 0x33, 0x0c, 0xa8, 0x37, 0x71,
	0xc6, 0x08, 0x8f, 0xc6, 0xc2, 0x7a, 0x50, 0xd1, 0x6a, 0x9b, 0xf0, 0x20, 0xc5, 0xdb, 0xc4, 0x6f,
	0x25, 0xe8, 0xe7, 0x12, 0x34, 0x4f, 0xc1, 0xa1, 0xbc, 0xb2, 0xa3, 0x04, 0xe7, 0xc2, 0x15, 0x31,
	0x77, 0x30, 0x11, 0xd6, 0x4e, 0x45, 0xab, 0x65, 0x61, 0x51, 0xa2, 0xb2, 0x53, 0x06, 0x12, 0xb3,
	0x49, 0xd2, 0x7e, 0x9a, 0x91, 0x51, 0x4d, 0xd8, 0xd1, 0x73, 0xdb, 0x46, 0xae, 0xfa, 0xab, 0x06,
	0xde, 0x93, 0xad, 0xd8, 0x5c, 0xdc, 0xad, 0x77, 0x85, 0x58, 0x5a, 0xac, 0x6f, 0x7e, 0x04, 0x8c,
	0xd5, 0x5a, 0xe5, 0x06, 0xca, 0xc3, 0xff, 0xad, 0x94, 0x63, 0x3e, 0x01, 0x87, 0x3c, 0x4e, 0x7c,
	0x88, 0x39, 0x34, 0x42, 0xcc, 0x15, 0x94, 0xa9, 0x80, 0x8c, 0x0c, 0xd8, 0x9f, 0xa3, 0xbd, 0x14,
	0x94, 0x51, 0x1f, 0x80, 0x5d, 0x74, 0x1d, 0x21, 0x2f, 0xd1, 0x75, 0x18, 0x33, 0x22, 0x55, 0xcf,
	0xc3, 0x9d, 0xb9, 0xb3, 0x15, 0x33, 0x62, 0x7e, 0x08, 0xf6, 0xd0, 0xe5, 0x25, 0xf2, 0x04, 0xbe,
	0x42, 0x8a, 0xb5, 0x25, 0x59, 0xbb, 0x6f, 0xbd, 0x09, 0xad, 0xa3, 0xe7, 0x36, 0x0d, 0xbd, 0xa3,
	0xe7, 0x74, 0x23, 0x5b, 0xfd, 0x0e, 0xec, 0xcb, 0xc2, 0x06, 0xe9, 0xa1, 0x83, 0xc0, 0xe5, 0x63,
	0x59, 0xd0, 0x5f, 0xee, 0xd1, 0xf9, 0xf2, 0x3c, 0x01, 0x07, 0xea, 0xed, 0x86, 0x98, 0x73, 0x4c,
	0x46, 0x4e, 0x84, 0x88, 0x1b, 0x88, 0x1b, 0x39, 0x32, 0x79, 0x58, 0x94, 0xe0, 0x33, 0x85, 0xf5,
	0x15, 0xd4, 0xd1, 0x73, 0x19, 0x63, 0xb3, 0xfa, 0x1c, 0x14, 0x17, 0x03, 0x7e, 0x8e, 0xb9, 0xe7,
	0x32, 0xff, 0x9f, 0x9d, 0xbd, 0x0f, 0xb2, 0x88, 0x31, 0x3a, 0x7f, 0x77, 0xca, 0xa8, 0xfe, 0x98,
	0x01, 0x8f, 0x57, 0xe5, 0x82, 0x08, 0x87, 0xc3, 0x98, 0xf1, 0x74, 0x15, 0xbc, 0x8c, 0x11, 0x17,
	0xff, 0xbe, 0x6c, 0x75, 0x50, 0x5c, 0x44, 0xbd, 0x22, 0x28, 0x0d, 0x51, 0x6f, 0xa6, 0xf0, 0x36,
	0x24, 0x41, 0x24, 0xff, 0xfe, 0x48, 0xe9, 0xab, 0x23, 0x25, 0x61, 0x35, 0x07, 0xd8, 0x4f, 0x5b,
	0x20, 0x9f, 0x7a, 0x6c, 0xdf, 0x3c, 0x04, 0x5b, 0x6e, 0x48, 0x63, 0x92, 0x2e, 0x5a, 0x98, 0x5a,
	0xaa, 0x95, 0x3f, 0xfe, 0x16, 0x1c, 0xbc, 0xf3, 0xc3, 0x65, 0xbe, 0x0f, 0x8e, 0xda, 0x2f, 0xfa,
	0x36, 0x6c, 0x7e, 0x65, 0xf7, 0xba, 0x0e, 0x6c, 0x37, 0x07, 0xbd, 0xae, 0x73, 0xd1, 0x1d, 0xf4,
	0xdb, 0x67, 0xf6, 0x53, 0xbb, 0x7d, 0x6e, 0x6c, 0x98, 0x05, 0xb0, 0xdb, 0x87, 0xbd, 0xde, 0x53,
	0xe7, 0x99, 0x3d, 0x18, 0xd8, 0xdd, 0xcf, 0x0c, 0x6d, 0xe1, 0xb2, 0xbb, 0xcf, 0x9b, 0x5f, 0xd8,
	0xe7, 0x46, 0xa6, 0xf5, 0xe5, 0xcf, 0xb7, 0x25, 0xed, 0xf5, 0x6d, 0x49, 0x7b, 0x73, 0x5b, 0xd2,
	0x7e, 0xbb, 0x2d, 0x69, 0x3f, 0xdc, 0x95, 0x36, 0x5e, 0xdf, 0x95, 0x36, 0xde, 0xdc, 0x95, 0x36,
	0xbe, 0x3e, 0x1d, 0x61, 0x31, 0x8e, 0x87, 0x75, 0x8f, 0x86, 0x8d, 0x64, 0x7f, 0x1c, 0x13, 0x24,
	0x5e, 0x51, 0x36, 0x91, 0x06, 0xa3, 0x41, 0xd0, 0xb8, 0x5e, 0xfb, 0xd6, 0x0f, 0xb7, 0xe4, 0xc7,
	0xfe, 0xf4, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xa2, 0x7f, 0xfa, 0x8a, 0x08, 0x00, 0x00,
}

func (m *EventClaimExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedUpokt) > 0 {
		i -= len(m.ClaimedUpokt)
		copy(dAtA[i:], m.ClaimedUpokt)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedUpokt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x18
	}
	if m.ExpirationReason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ExpirationReason))
		i--
		dAtA[i] = 0x10
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventClaimSettled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimSettled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimSettled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimProofStatusInt != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClaimProofStatusInt))
		i--
		dAtA[i] = 0x60
	}
	if m.SessionEndBlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndBlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ClaimedUpokt) > 0 {
		i -= len(m.ClaimedUpokt)
		copy(dAtA[i:], m.ClaimedUpokt)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimedUpokt)))
		i--
		dAtA[i] = 0x42
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x18
	}
	if m.ProofRequirement != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProofRequirement))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EventApplicationOverserviced) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationOverserviced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationOverserviced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EffectiveBurn) > 0 {
		i -= len(m.EffectiveBurn)
		copy(dAtA[i:], m.EffectiveBurn)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EffectiveBurn)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExpectedBurn) > 0 {
		i -= len(m.ExpectedBurn)
		copy(dAtA[i:], m.ExpectedBurn)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ExpectedBurn)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SupplierOperatorAddr) > 0 {
		i -= len(m.SupplierOperatorAddr)
		copy(dAtA[i:], m.SupplierOperatorAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationAddr) > 0 {
		i -= len(m.ApplicationAddr)
		copy(dAtA[i:], m.ApplicationAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSupplierSlashed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSupplierSlashed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSupplierSlashed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofMissingPenalty) > 0 {
		i -= len(m.ProofMissingPenalty)
		copy(dAtA[i:], m.ProofMissingPenalty)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProofMissingPenalty)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventClaimDiscarded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimDiscarded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimDiscarded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventApplicationReimbursementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationReimbursementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationReimbursementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SupplierOwnerAddr) > 0 {
		i -= len(m.SupplierOwnerAddr)
		copy(dAtA[i:], m.SupplierOwnerAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOwnerAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SupplierOperatorAddr) > 0 {
		i -= len(m.SupplierOperatorAddr)
		copy(dAtA[i:], m.SupplierOperatorAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationAddr) > 0 {
		i -= len(m.ApplicationAddr)
		copy(dAtA[i:], m.ApplicationAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventClaimExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ExpirationReason != 0 {
		n += 1 + sovEvent(uint64(m.ExpirationReason))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	l = len(m.ClaimedUpokt)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventClaimSettled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProofRequirement != 0 {
		n += 1 + sovEvent(uint64(m.ProofRequirement))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	l = len(m.ClaimedUpokt)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SessionEndBlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndBlockHeight))
	}
	if m.ClaimProofStatusInt != 0 {
		n += 1 + sovEvent(uint64(m.ClaimProofStatusInt))
	}
	return n
}

func (m *EventApplicationOverserviced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOperatorAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ExpectedBurn)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.EffectiveBurn)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventSupplierSlashed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProofMissingPenalty)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventClaimDiscarded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventApplicationReimbursementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOperatorAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOwnerAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventClaimExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationReason", wireType)
			}
			m.ExpirationReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationReason |= ClaimExpirationReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedUpokt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaimSettled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimSettled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimSettled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofRequirement", wireType)
			}
			m.ProofRequirement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofRequirement |= types.ProofRequirementReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedUpokt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedUpokt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndBlockHeight", wireType)
			}
			m.SessionEndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimProofStatusInt", wireType)
			}
			m.ClaimProofStatusInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimProofStatusInt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplicationOverserviced) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationOverserviced: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationOverserviced: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedBurn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedBurn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBurn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveBurn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSupplierSlashed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSupplierSlashed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSupplierSlashed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofMissingPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofMissingPenalty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaimDiscarded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimDiscarded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimDiscarded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplicationReimbursementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationReimbursementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationReimbursementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOwnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOwnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
