// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/tokenomics/event.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/proof/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimExpirationReason int32

const (
	ClaimExpirationReason_EXPIRATION_REASON_UNSPECIFIED ClaimExpirationReason = 0
	ClaimExpirationReason_PROOF_MISSING                 ClaimExpirationReason = 1
	ClaimExpirationReason_PROOF_INVALID                 ClaimExpirationReason = 2
)

var ClaimExpirationReason_name = map[int32]string{
	0: "EXPIRATION_REASON_UNSPECIFIED",
	1: "PROOF_MISSING",
	2: "PROOF_INVALID",
}

var ClaimExpirationReason_value = map[string]int32{
	"EXPIRATION_REASON_UNSPECIFIED": 0,
	"PROOF_MISSING":                 1,
	"PROOF_INVALID":                 2,
}

func (x ClaimExpirationReason) String() string {
	return proto.EnumName(ClaimExpirationReason_name, int32(x))
}

func (ClaimExpirationReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a78874bbf91a58c7, []int{0}
}

// EventClaimExpired is an event emitted during settlement whenever a claim requiring
// an on-chain proof doesn't have one. The claim cannot be settled, leading to that work
// never being rewarded.
type EventClaimExpired struct {
	Claim *types.Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	// The reason why the claim expired, leading to a Supplier being penalized (i.e. burn).
	ExpirationReason ClaimExpirationReason `protobuf:"varint,2,opt,name=expiration_reason,json=expirationReason,proto3,enum=poktroll.tokenomics.ClaimExpirationReason" json:"expiration_reason"`
	//Number of relays claimed to be in the session tree.
	NumRelays uint64 `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	// Number of compute units claimed as a function of the number of relays
	// and the compute units per relay for the particular service.
	NumClaimedComputeUnits uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	// Number of estimated compute units claimed as a function of the number of claimed
	// compute units and the relay difficulty multiplier for the particular service.
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	// The amount of uPOKT claimed to be rewarded for the work done as a function of
	// the number of estimated compute units and the compute uints to token multiplier.
	ClaimedAmountUpokt *types1.Coin `protobuf:"bytes,6,opt,name=claimed_amount_upokt,json=claimedAmountUpokt,proto3" json:"claimed_amount_upokt"`
}

func (m *EventClaimExpired) Reset()         { *m = EventClaimExpired{} }
func (m *EventClaimExpired) String() string { return proto.CompactTextString(m) }
func (*EventClaimExpired) ProtoMessage()    {}
func (*EventClaimExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78874bbf91a58c7, []int{0}
}
func (m *EventClaimExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimExpired.Merge(m, src)
}
func (m *EventClaimExpired) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimExpired.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimExpired proto.InternalMessageInfo

func (m *EventClaimExpired) GetClaim() *types.Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventClaimExpired) GetExpirationReason() ClaimExpirationReason {
	if m != nil {
		return m.ExpirationReason
	}
	return ClaimExpirationReason_EXPIRATION_REASON_UNSPECIFIED
}

func (m *EventClaimExpired) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventClaimExpired) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventClaimExpired) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventClaimExpired) GetClaimedAmountUpokt() *types1.Coin {
	if m != nil {
		return m.ClaimedAmountUpokt
	}
	return nil
}

// EventClaimSettled is an event emitted whenever a claim is settled.
// The proof_required determines whether the claim requires a proof that has been submitted or not
type EventClaimSettled struct {
	Claim *types.Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	// The reason why the claim was settled, leading to a Supplier being rewarded (i.e. mint).
	ProofRequirement types.ProofRequirementReason `protobuf:"varint,2,opt,name=proof_requirement,json=proofRequirement,proto3,enum=poktroll.proof.ProofRequirementReason" json:"proof_requirement"`
	// Number of relays claimed to be in the session tree.
	NumRelays uint64 `protobuf:"varint,3,opt,name=num_relays,json=numRelays,proto3" json:"num_relays"`
	// Number of compute units claimed as a function of the number of relays
	// and the compute units per relay for the particular service.
	NumClaimedComputeUnits uint64 `protobuf:"varint,4,opt,name=num_claimed_compute_units,json=numClaimedComputeUnits,proto3" json:"num_claimed_compute_units"`
	// Number of estimated compute units claimed as a function of the number of claimed
	// compute units and the relay difficulty multiplier for the particular service.
	NumEstimatedComputeUnits uint64 `protobuf:"varint,5,opt,name=num_estimated_compute_units,json=numEstimatedComputeUnits,proto3" json:"num_estimated_compute_units"`
	// The amount of uPOKT claimed to be rewarded for the work done as a function of
	// the number of estimated compute units and the compute uints to token multiplier.
	ClaimedAmountUpokt *types1.Coin `protobuf:"bytes,6,opt,name=claimed_amount_upokt,json=claimedAmountUpokt,proto3" json:"claimed_amount_upokt"`
}

func (m *EventClaimSettled) Reset()         { *m = EventClaimSettled{} }
func (m *EventClaimSettled) String() string { return proto.CompactTextString(m) }
func (*EventClaimSettled) ProtoMessage()    {}
func (*EventClaimSettled) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78874bbf91a58c7, []int{1}
}
func (m *EventClaimSettled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimSettled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventClaimSettled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimSettled.Merge(m, src)
}
func (m *EventClaimSettled) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimSettled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimSettled.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimSettled proto.InternalMessageInfo

func (m *EventClaimSettled) GetClaim() *types.Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *EventClaimSettled) GetProofRequirement() types.ProofRequirementReason {
	if m != nil {
		return m.ProofRequirement
	}
	return types.ProofRequirementReason_NOT_REQUIRED
}

func (m *EventClaimSettled) GetNumRelays() uint64 {
	if m != nil {
		return m.NumRelays
	}
	return 0
}

func (m *EventClaimSettled) GetNumClaimedComputeUnits() uint64 {
	if m != nil {
		return m.NumClaimedComputeUnits
	}
	return 0
}

func (m *EventClaimSettled) GetNumEstimatedComputeUnits() uint64 {
	if m != nil {
		return m.NumEstimatedComputeUnits
	}
	return 0
}

func (m *EventClaimSettled) GetClaimedAmountUpokt() *types1.Coin {
	if m != nil {
		return m.ClaimedAmountUpokt
	}
	return nil
}

// EventApplicationOverserviced is emitted when an application has less stake than
// what a supplier is claiming (i.e. amount available for burning is insufficient).
// This means the following will ALWAYS be strictly true: effective_burn < expected_burn.
type EventApplicationOverserviced struct {
	ApplicationAddr      string `protobuf:"bytes,1,opt,name=application_addr,json=applicationAddr,proto3" json:"application_addr,omitempty"`
	SupplierOperatorAddr string `protobuf:"bytes,2,opt,name=supplier_operator_addr,json=supplierOperatorAddr,proto3" json:"supplier_operator_addr,omitempty"`
	// Expected burn is the amount the supplier is claiming for work done
	// to service the application during the session.
	// This is usually the amount in the Claim submitted.
	ExpectedBurn *types1.Coin `protobuf:"bytes,3,opt,name=expected_burn,json=expectedBurn,proto3" json:"expected_burn,omitempty"`
	// Effective burn is the amount that is actually being paid to the supplier
	// for the work done. It is less than the expected burn (claim amount) and
	// is a function of the relay mining algorithm.
	// E.g. The application's stake divided by the number of suppliers in a session.
	EffectiveBurn *types1.Coin `protobuf:"bytes,4,opt,name=effective_burn,json=effectiveBurn,proto3" json:"effective_burn,omitempty"`
}

func (m *EventApplicationOverserviced) Reset()         { *m = EventApplicationOverserviced{} }
func (m *EventApplicationOverserviced) String() string { return proto.CompactTextString(m) }
func (*EventApplicationOverserviced) ProtoMessage()    {}
func (*EventApplicationOverserviced) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78874bbf91a58c7, []int{2}
}
func (m *EventApplicationOverserviced) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationOverserviced) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationOverserviced) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationOverserviced.Merge(m, src)
}
func (m *EventApplicationOverserviced) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationOverserviced) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationOverserviced.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationOverserviced proto.InternalMessageInfo

func (m *EventApplicationOverserviced) GetApplicationAddr() string {
	if m != nil {
		return m.ApplicationAddr
	}
	return ""
}

func (m *EventApplicationOverserviced) GetSupplierOperatorAddr() string {
	if m != nil {
		return m.SupplierOperatorAddr
	}
	return ""
}

func (m *EventApplicationOverserviced) GetExpectedBurn() *types1.Coin {
	if m != nil {
		return m.ExpectedBurn
	}
	return nil
}

func (m *EventApplicationOverserviced) GetEffectiveBurn() *types1.Coin {
	if m != nil {
		return m.EffectiveBurn
	}
	return nil
}

// EventSupplierSlashed is emitted when a supplier is slashed for not providing,
// or provided invalid required proofs for claims.
type EventSupplierSlashed struct {
	SupplierOperatorAddr string `protobuf:"bytes,1,opt,name=supplier_operator_addr,json=supplierOperatorAddr,proto3" json:"supplier_operator_addr,omitempty"`
	// Number of expired claims (due to missing or invalid proof) that led to slashing.
	NumExpiredClaims uint64 `protobuf:"varint,2,opt,name=num_expired_claims,json=numExpiredClaims,proto3" json:"num_expired_claims,omitempty"`
	// Amount slashed from the supplier's stake due to the expired claims.
	// This is a function of the number of expired claims and proof missing penalty.
	SlashingAmount *types1.Coin `protobuf:"bytes,3,opt,name=slashing_amount,json=slashingAmount,proto3" json:"slashing_amount,omitempty"`
}

func (m *EventSupplierSlashed) Reset()         { *m = EventSupplierSlashed{} }
func (m *EventSupplierSlashed) String() string { return proto.CompactTextString(m) }
func (*EventSupplierSlashed) ProtoMessage()    {}
func (*EventSupplierSlashed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78874bbf91a58c7, []int{3}
}
func (m *EventSupplierSlashed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSupplierSlashed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventSupplierSlashed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSupplierSlashed.Merge(m, src)
}
func (m *EventSupplierSlashed) XXX_Size() int {
	return m.Size()
}
func (m *EventSupplierSlashed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSupplierSlashed.DiscardUnknown(m)
}

var xxx_messageInfo_EventSupplierSlashed proto.InternalMessageInfo

func (m *EventSupplierSlashed) GetSupplierOperatorAddr() string {
	if m != nil {
		return m.SupplierOperatorAddr
	}
	return ""
}

func (m *EventSupplierSlashed) GetNumExpiredClaims() uint64 {
	if m != nil {
		return m.NumExpiredClaims
	}
	return 0
}

func (m *EventSupplierSlashed) GetSlashingAmount() *types1.Coin {
	if m != nil {
		return m.SlashingAmount
	}
	return nil
}

func init() {
	proto.RegisterEnum("poktroll.tokenomics.ClaimExpirationReason", ClaimExpirationReason_name, ClaimExpirationReason_value)
	proto.RegisterType((*EventClaimExpired)(nil), "poktroll.tokenomics.EventClaimExpired")
	proto.RegisterType((*EventClaimSettled)(nil), "poktroll.tokenomics.EventClaimSettled")
	proto.RegisterType((*EventApplicationOverserviced)(nil), "poktroll.tokenomics.EventApplicationOverserviced")
	proto.RegisterType((*EventSupplierSlashed)(nil), "poktroll.tokenomics.EventSupplierSlashed")
}

func init() { proto.RegisterFile("poktroll/tokenomics/event.proto", fileDescriptor_a78874bbf91a58c7) }

var fileDescriptor_a78874bbf91a58c7 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x53, 0xdb, 0x46,
	0x14, 0xb7, 0x5c, 0xc3, 0x0c, 0xdb, 0x62, 0x6c, 0xd5, 0x30, 0x86, 0x16, 0x89, 0x72, 0xe8, 0x50,
	0xa6, 0x48, 0x03, 0x74, 0x7a, 0xec, 0xd4, 0x36, 0xa6, 0xa3, 0x99, 0xc6, 0x76, 0xd6, 0x21, 0xc3,
	0xe4, 0x10, 0x45, 0x96, 0x1e, 0x46, 0xc1, 0xda, 0x55, 0x56, 0x2b, 0x07, 0x8e, 0x39, 0xe5, 0x90,
	0x4b, 0xfe, 0xa2, 0x9c, 0x73, 0xe4, 0xc8, 0xc9, 0x93, 0x31, 0x37, 0xff, 0x15, 0x99, 0x5d, 0xf9,
	0x8b, 0x8f, 0x98, 0x43, 0x72, 0xcc, 0xc5, 0x96, 0xdf, 0xef, 0x63, 0x77, 0xdf, 0xfb, 0x59, 0x8b,
	0xf4, 0x90, 0x9e, 0x71, 0x46, 0x3b, 0x1d, 0x93, 0xd3, 0x33, 0x20, 0x34, 0xf0, 0xdd, 0xc8, 0x84,
	0x2e, 0x10, 0x6e, 0x84, 0x8c, 0x72, 0xaa, 0xfe, 0x3c, 0x22, 0x18, 0x13, 0xc2, 0x9a, 0xe6, 0xd2,
	0x28, 0xa0, 0x91, 0xd9, 0x72, 0x22, 0x30, 0xbb, 0xbb, 0x2d, 0xe0, 0xce, 0xae, 0xe9, 0x52, 0x9f,
	0x24, 0xa2, 0xb5, 0x42, 0x9b, 0xb6, 0xa9, 0x7c, 0x34, 0xc5, 0xd3, 0xb0, 0xba, 0x36, 0x5e, 0x2b,
	0x64, 0x94, 0x9e, 0x98, 0xfc, 0x22, 0x84, 0x28, 0xc1, 0x36, 0xdf, 0x65, 0x50, 0xbe, 0x2a, 0x96,
	0xad, 0x74, 0x1c, 0x3f, 0xa8, 0x9e, 0x87, 0x3e, 0x03, 0x4f, 0xfd, 0x1b, 0xcd, 0xb9, 0xe2, 0x77,
	0x51, 0xd9, 0x50, 0xb6, 0x7e, 0xdc, 0x5b, 0x36, 0xc6, 0x9b, 0x91, 0x0e, 0x86, 0x24, 0x97, 0x17,
	0x06, 0x3d, 0x3d, 0xe1, 0xe1, 0xe4, 0x4b, 0x25, 0x28, 0x0f, 0xc2, 0xc2, 0xe1, 0x3e, 0x25, 0x36,
	0x03, 0x27, 0xa2, 0xa4, 0x98, 0xde, 0x50, 0xb6, 0xb2, 0x7b, 0xdb, 0xc6, 0x3d, 0x07, 0x32, 0x26,
	0xab, 0x4a, 0x09, 0x96, 0x8a, 0xf2, 0xf2, 0xa0, 0xa7, 0xdf, 0x35, 0xc2, 0x39, 0xb8, 0x45, 0x54,
	0x77, 0x10, 0x22, 0x71, 0x60, 0x33, 0xe8, 0x38, 0x17, 0x51, 0xf1, 0x87, 0x0d, 0x65, 0x2b, 0x53,
	0xce, 0x0e, 0x7a, 0xfa, 0x54, 0x15, 0x2f, 0x90, 0x38, 0xc0, 0xf2, 0x51, 0x3d, 0x46, 0xab, 0x02,
	0x90, 0x7b, 0x05, 0xcf, 0x76, 0x69, 0x10, 0xc6, 0x1c, 0xec, 0x98, 0xf8, 0x3c, 0x2a, 0x66, 0xa4,
	0x7a, 0x7d, 0xd0, 0xd3, 0xbf, 0x4c, 0xc2, 0x2b, 0x24, 0x0e, 0x2a, 0x09, 0x52, 0x49, 0x80, 0x23,
	0x51, 0x57, 0x9f, 0xa3, 0x5f, 0x84, 0x08, 0x22, 0xee, 0x07, 0x0e, 0xbf, 0xe3, 0x3d, 0x27, 0xbd,
	0xf5, 0x41, 0x4f, 0x9f, 0x45, 0xc3, 0x45, 0x12, 0x07, 0xd5, 0x11, 0x76, 0xc3, 0x1f, 0x50, 0x61,
	0xb4, 0x21, 0x27, 0xa0, 0x31, 0xe1, 0x76, 0x2c, 0xda, 0x59, 0x9c, 0x97, 0xf3, 0x59, 0x35, 0x92,
	0x5c, 0x18, 0x22, 0x17, 0xc6, 0x30, 0x17, 0x46, 0x85, 0xfa, 0xa4, 0x5c, 0x1c, 0xf4, 0xf4, 0x7b,
	0xa5, 0x58, 0x1d, 0x56, 0x4b, 0xb2, 0x78, 0x24, 0x6a, 0x9b, 0x6f, 0x6f, 0xa4, 0xa1, 0x09, 0x9c,
	0x77, 0xbe, 0x22, 0x0d, 0x2f, 0x51, 0x5e, 0x12, 0x6c, 0x06, 0xaf, 0x62, 0x9f, 0x41, 0x00, 0x84,
	0x0f, 0xd3, 0xf0, 0xfb, 0x6d, 0x8f, 0x86, 0xf8, 0xc4, 0x13, 0xde, 0x74, 0x12, 0xee, 0x98, 0xe0,
	0x5c, 0x78, 0x8b, 0xfe, 0x3d, 0x09, 0xdf, 0x38, 0x09, 0x6f, 0xd2, 0xe8, 0x57, 0x99, 0x84, 0x52,
	0x18, 0x76, 0x7c, 0x57, 0xfe, 0xe9, 0xea, 0x5d, 0x60, 0x11, 0xb0, 0xae, 0xef, 0x82, 0xa7, 0xfe,
	0x81, 0x72, 0xce, 0x04, 0xb2, 0x1d, 0xcf, 0x63, 0x32, 0x1f, 0x0b, 0x78, 0x69, 0xaa, 0x5e, 0xf2,
	0x3c, 0xa6, 0xfe, 0x85, 0x56, 0xa2, 0x58, 0xd4, 0x80, 0xd9, 0x34, 0x04, 0xe6, 0x70, 0xca, 0x12,
	0x41, 0x5a, 0x0a, 0x0a, 0x23, 0xb4, 0x3e, 0x04, 0xa5, 0xea, 0x1f, 0xb4, 0x08, 0xe7, 0x21, 0xb8,
	0xa2, 0x39, 0xad, 0x98, 0x11, 0x39, 0xd4, 0x59, 0x27, 0xc4, 0x3f, 0x8d, 0xf8, 0xe5, 0x98, 0x11,
	0xf5, 0x5f, 0x94, 0x85, 0x93, 0x13, 0x70, 0xb9, 0xdf, 0x85, 0xc4, 0x20, 0xf3, 0x90, 0xc1, 0xe2,
	0x58, 0x20, 0x1c, 0x36, 0x3f, 0x28, 0xa8, 0x20, 0x7b, 0xd0, 0x1c, 0xee, 0xaf, 0xd9, 0x71, 0xa2,
	0x53, 0xf0, 0x66, 0x1c, 0x48, 0x99, 0x71, 0xa0, 0x3f, 0x91, 0x2a, 0x47, 0x9e, 0xbc, 0x63, 0x93,
	0x58, 0x45, 0xb2, 0x05, 0x19, 0x9c, 0x13, 0xf3, 0x4e, 0x00, 0x19, 0xaa, 0x48, 0x2d, 0xa3, 0xa5,
	0x48, 0x2c, 0xe7, 0x93, 0xf6, 0x70, 0x5a, 0x0f, 0x37, 0x20, 0x3b, 0x52, 0x24, 0x93, 0xdc, 0x7e,
	0x81, 0x96, 0xef, 0x7d, 0xc1, 0xaa, 0xbf, 0xa1, 0xf5, 0xea, 0x71, 0xc3, 0xc2, 0xa5, 0x27, 0x56,
	0xbd, 0x66, 0xe3, 0x6a, 0xa9, 0x59, 0xaf, 0xd9, 0x47, 0xb5, 0x66, 0xa3, 0x5a, 0xb1, 0x0e, 0xad,
	0xea, 0x41, 0x2e, 0xa5, 0xe6, 0xd1, 0x62, 0x03, 0xd7, 0xeb, 0x87, 0xf6, 0x23, 0xab, 0xd9, 0xb4,
	0x6a, 0xff, 0xe5, 0x94, 0x49, 0xc9, 0xaa, 0x3d, 0x2d, 0xfd, 0x6f, 0x1d, 0xe4, 0xd2, 0xe5, 0xc7,
	0x1f, 0xfb, 0x9a, 0x72, 0xd9, 0xd7, 0x94, 0xab, 0xbe, 0xa6, 0x7c, 0xea, 0x6b, 0xca, 0xfb, 0x6b,
	0x2d, 0x75, 0x79, 0xad, 0xa5, 0xae, 0xae, 0xb5, 0xd4, 0xb3, 0xfd, 0xb6, 0xcf, 0x4f, 0xe3, 0x96,
	0xe1, 0xd2, 0xc0, 0x14, 0xa9, 0xda, 0x21, 0xc0, 0x5f, 0x53, 0x76, 0x66, 0x8e, 0x2f, 0xa4, 0xf3,
	0xe9, 0xeb, 0x4f, 0xde, 0x4b, 0xad, 0x79, 0x79, 0x31, 0xed, 0x7f, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x3e, 0x16, 0x9d, 0x3a, 0x22, 0x07, 0x00, 0x00,
}

func (m *EventClaimExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimedAmountUpokt != nil {
		{
			size, err := m.ClaimedAmountUpokt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x18
	}
	if m.ExpirationReason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ExpirationReason))
		i--
		dAtA[i] = 0x10
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventClaimSettled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimSettled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimSettled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimedAmountUpokt != nil {
		{
			size, err := m.ClaimedAmountUpokt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NumEstimatedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumEstimatedComputeUnits))
		i--
		dAtA[i] = 0x28
	}
	if m.NumClaimedComputeUnits != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumClaimedComputeUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumRelays != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumRelays))
		i--
		dAtA[i] = 0x18
	}
	if m.ProofRequirement != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProofRequirement))
		i--
		dAtA[i] = 0x10
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventApplicationOverserviced) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationOverserviced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationOverserviced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EffectiveBurn != nil {
		{
			size, err := m.EffectiveBurn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExpectedBurn != nil {
		{
			size, err := m.ExpectedBurn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SupplierOperatorAddr) > 0 {
		i -= len(m.SupplierOperatorAddr)
		copy(dAtA[i:], m.SupplierOperatorAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationAddr) > 0 {
		i -= len(m.ApplicationAddr)
		copy(dAtA[i:], m.ApplicationAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSupplierSlashed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSupplierSlashed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSupplierSlashed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlashingAmount != nil {
		{
			size, err := m.SlashingAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NumExpiredClaims != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NumExpiredClaims))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SupplierOperatorAddr) > 0 {
		i -= len(m.SupplierOperatorAddr)
		copy(dAtA[i:], m.SupplierOperatorAddr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SupplierOperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventClaimExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ExpirationReason != 0 {
		n += 1 + sovEvent(uint64(m.ExpirationReason))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	if m.ClaimedAmountUpokt != nil {
		l = m.ClaimedAmountUpokt.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventClaimSettled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ProofRequirement != 0 {
		n += 1 + sovEvent(uint64(m.ProofRequirement))
	}
	if m.NumRelays != 0 {
		n += 1 + sovEvent(uint64(m.NumRelays))
	}
	if m.NumClaimedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumClaimedComputeUnits))
	}
	if m.NumEstimatedComputeUnits != 0 {
		n += 1 + sovEvent(uint64(m.NumEstimatedComputeUnits))
	}
	if m.ClaimedAmountUpokt != nil {
		l = m.ClaimedAmountUpokt.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventApplicationOverserviced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SupplierOperatorAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ExpectedBurn != nil {
		l = m.ExpectedBurn.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.EffectiveBurn != nil {
		l = m.EffectiveBurn.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventSupplierSlashed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SupplierOperatorAddr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NumExpiredClaims != 0 {
		n += 1 + sovEvent(uint64(m.NumExpiredClaims))
	}
	if m.SlashingAmount != nil {
		l = m.SlashingAmount.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventClaimExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationReason", wireType)
			}
			m.ExpirationReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationReason |= ClaimExpirationReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmountUpokt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimedAmountUpokt == nil {
				m.ClaimedAmountUpokt = &types1.Coin{}
			}
			if err := m.ClaimedAmountUpokt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaimSettled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimSettled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimSettled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofRequirement", wireType)
			}
			m.ProofRequirement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofRequirement |= types.ProofRequirementReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelays", wireType)
			}
			m.NumRelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClaimedComputeUnits", wireType)
			}
			m.NumClaimedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClaimedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEstimatedComputeUnits", wireType)
			}
			m.NumEstimatedComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEstimatedComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmountUpokt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimedAmountUpokt == nil {
				m.ClaimedAmountUpokt = &types1.Coin{}
			}
			if err := m.ClaimedAmountUpokt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplicationOverserviced) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationOverserviced: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationOverserviced: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedBurn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpectedBurn == nil {
				m.ExpectedBurn = &types1.Coin{}
			}
			if err := m.ExpectedBurn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBurn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveBurn == nil {
				m.EffectiveBurn = &types1.Coin{}
			}
			if err := m.EffectiveBurn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSupplierSlashed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSupplierSlashed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSupplierSlashed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierOperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierOperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumExpiredClaims", wireType)
			}
			m.NumExpiredClaims = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumExpiredClaims |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlashingAmount == nil {
				m.SlashingAmount = &types1.Coin{}
			}
			if err := m.SlashingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
