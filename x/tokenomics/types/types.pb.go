// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/tokenomics/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/proof/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SettlementOpReason is a distinct, tlm-specific causal reason for a given operation.
type SettlementOpReason int32

const (
	// UNSPECIFIED is the default value for SettlementOpReason, it is used as a field
	// type for objects which need to distinguish whether a SettlementOpReason has been specified it or not.
	SettlementOpReason_UNSPECIFIED SettlementOpReason = 0
	// Value transfer (credit/debit)
	SettlementOpReason_TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT    SettlementOpReason = 1
	SettlementOpReason_TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN SettlementOpReason = 2
	// Inflation
	SettlementOpReason_TLM_GLOBAL_MINT_INFLATION SettlementOpReason = 3
	// Reward distribution
	SettlementOpReason_TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION SettlementOpReason = 4
	SettlementOpReason_TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION                             SettlementOpReason = 5
	SettlementOpReason_TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION                        SettlementOpReason = 6
	SettlementOpReason_TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION            SettlementOpReason = 7
	SettlementOpReason_TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION                    SettlementOpReason = 8
	SettlementOpReason_TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION                     SettlementOpReason = 9
	// Self-servicing mitigation
	SettlementOpReason_TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER SettlementOpReason = 10
	// Penalization
	SettlementOpReason_UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER SettlementOpReason = 11
	SettlementOpReason_UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN      SettlementOpReason = 12
	// Module accounting
	SettlementOpReason_TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER  SettlementOpReason = 13
	SettlementOpReason_TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER SettlementOpReason = 14
)

var SettlementOpReason_name = map[int32]string{
	0:  "UNSPECIFIED",
	1:  "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT",
	2:  "TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN",
	3:  "TLM_GLOBAL_MINT_INFLATION",
	4:  "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION",
	5:  "TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION",
	6:  "TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION",
	7:  "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION",
	8:  "TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION",
	9:  "TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION",
	10: "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER",
	11: "UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER",
	12: "UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN",
	13: "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER",
	14: "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER",
}

var SettlementOpReason_value = map[string]int32{
	"UNSPECIFIED": 0,
	"TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT":                      1,
	"TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN":                   2,
	"TLM_GLOBAL_MINT_INFLATION":                                           3,
	"TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION": 4,
	"TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION":                             5,
	"TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION":                        6,
	"TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION":            7,
	"TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION":                    8,
	"TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION":                     9,
	"TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER":           10,
	"UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER":                      11,
	"UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN":                           12,
	"TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER":         13,
	"TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER":        14,
}

func (x SettlementOpReason) String() string {
	return proto.EnumName(SettlementOpReason_name, int32(x))
}

func (SettlementOpReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e327d53f335a53d, []int{0}
}

// SettlementResult holds mint, burn, and transfer operations that result from a single claim settlement.
type ClaimSettlementResult struct {
	Claim              types.Claim         `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
	Mints              []MintBurnOp        `protobuf:"bytes,2,rep,name=mints,proto3" json:"mints"`
	Burns              []MintBurnOp        `protobuf:"bytes,3,rep,name=burns,proto3" json:"burns"`
	ModToModTransfers  []ModToModTransfer  `protobuf:"bytes,4,rep,name=mod_to_mod_transfers,json=modToModTransfers,proto3" json:"mod_to_mod_transfers"`
	ModToAcctTransfers []ModToAcctTransfer `protobuf:"bytes,5,rep,name=mod_to_acct_transfers,json=modToAcctTransfers,proto3" json:"mod_to_acct_transfers"`
}

func (m *ClaimSettlementResult) Reset()         { *m = ClaimSettlementResult{} }
func (m *ClaimSettlementResult) String() string { return proto.CompactTextString(m) }
func (*ClaimSettlementResult) ProtoMessage()    {}
func (*ClaimSettlementResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e327d53f335a53d, []int{0}
}
func (m *ClaimSettlementResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimSettlementResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClaimSettlementResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimSettlementResult.Merge(m, src)
}
func (m *ClaimSettlementResult) XXX_Size() int {
	return m.Size()
}
func (m *ClaimSettlementResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimSettlementResult.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimSettlementResult proto.InternalMessageInfo

func (m *ClaimSettlementResult) GetClaim() types.Claim {
	if m != nil {
		return m.Claim
	}
	return types.Claim{}
}

func (m *ClaimSettlementResult) GetMints() []MintBurnOp {
	if m != nil {
		return m.Mints
	}
	return nil
}

func (m *ClaimSettlementResult) GetBurns() []MintBurnOp {
	if m != nil {
		return m.Burns
	}
	return nil
}

func (m *ClaimSettlementResult) GetModToModTransfers() []ModToModTransfer {
	if m != nil {
		return m.ModToModTransfers
	}
	return nil
}

func (m *ClaimSettlementResult) GetModToAcctTransfers() []ModToAcctTransfer {
	if m != nil {
		return m.ModToAcctTransfers
	}
	return nil
}

// MintBurnOperation holds the parameters of a mint or burn operation.
type MintBurnOp struct {
	OpReason          SettlementOpReason `protobuf:"varint,1,opt,name=op_reason,json=opReason,proto3,enum=poktroll.tokenomics.SettlementOpReason" json:"op_reason"`
	DestinationModule string             `protobuf:"bytes,2,opt,name=DestinationModule,proto3" json:"destination_module"`
	Coin              types1.Coin        `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *MintBurnOp) Reset()         { *m = MintBurnOp{} }
func (m *MintBurnOp) String() string { return proto.CompactTextString(m) }
func (*MintBurnOp) ProtoMessage()    {}
func (*MintBurnOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e327d53f335a53d, []int{1}
}
func (m *MintBurnOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintBurnOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MintBurnOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintBurnOp.Merge(m, src)
}
func (m *MintBurnOp) XXX_Size() int {
	return m.Size()
}
func (m *MintBurnOp) XXX_DiscardUnknown() {
	xxx_messageInfo_MintBurnOp.DiscardUnknown(m)
}

var xxx_messageInfo_MintBurnOp proto.InternalMessageInfo

func (m *MintBurnOp) GetOpReason() SettlementOpReason {
	if m != nil {
		return m.OpReason
	}
	return SettlementOpReason_UNSPECIFIED
}

func (m *MintBurnOp) GetDestinationModule() string {
	if m != nil {
		return m.DestinationModule
	}
	return ""
}

func (m *MintBurnOp) GetCoin() types1.Coin {
	if m != nil {
		return m.Coin
	}
	return types1.Coin{}
}

// ModToAcctTransfer holds the parameters of a module to account transfer operation.
type ModToAcctTransfer struct {
	OpReason         SettlementOpReason `protobuf:"varint,1,opt,name=op_reason,json=opReason,proto3,enum=poktroll.tokenomics.SettlementOpReason" json:"op_reason"`
	SenderModule     string             `protobuf:"bytes,2,opt,name=SenderModule,proto3" json:"sender_module"`
	RecipientAddress string             `protobuf:"bytes,3,opt,name=RecipientAddress,proto3" json:"recipient_address"`
	Coin             types1.Coin        `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin"`
}

func (m *ModToAcctTransfer) Reset()         { *m = ModToAcctTransfer{} }
func (m *ModToAcctTransfer) String() string { return proto.CompactTextString(m) }
func (*ModToAcctTransfer) ProtoMessage()    {}
func (*ModToAcctTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e327d53f335a53d, []int{2}
}
func (m *ModToAcctTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModToAcctTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModToAcctTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModToAcctTransfer.Merge(m, src)
}
func (m *ModToAcctTransfer) XXX_Size() int {
	return m.Size()
}
func (m *ModToAcctTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_ModToAcctTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_ModToAcctTransfer proto.InternalMessageInfo

func (m *ModToAcctTransfer) GetOpReason() SettlementOpReason {
	if m != nil {
		return m.OpReason
	}
	return SettlementOpReason_UNSPECIFIED
}

func (m *ModToAcctTransfer) GetSenderModule() string {
	if m != nil {
		return m.SenderModule
	}
	return ""
}

func (m *ModToAcctTransfer) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *ModToAcctTransfer) GetCoin() types1.Coin {
	if m != nil {
		return m.Coin
	}
	return types1.Coin{}
}

// ModToModTransfer holds the parameters of a module to module transfer operation.
type ModToModTransfer struct {
	OpReason        SettlementOpReason `protobuf:"varint,1,opt,name=op_reason,json=opReason,proto3,enum=poktroll.tokenomics.SettlementOpReason" json:"op_reason"`
	SenderModule    string             `protobuf:"bytes,2,opt,name=SenderModule,proto3" json:"sender_module"`
	RecipientModule string             `protobuf:"bytes,3,opt,name=RecipientModule,proto3" json:"recipient_module"`
	Coin            types1.Coin        `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin"`
}

func (m *ModToModTransfer) Reset()         { *m = ModToModTransfer{} }
func (m *ModToModTransfer) String() string { return proto.CompactTextString(m) }
func (*ModToModTransfer) ProtoMessage()    {}
func (*ModToModTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e327d53f335a53d, []int{3}
}
func (m *ModToModTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModToModTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModToModTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModToModTransfer.Merge(m, src)
}
func (m *ModToModTransfer) XXX_Size() int {
	return m.Size()
}
func (m *ModToModTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_ModToModTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_ModToModTransfer proto.InternalMessageInfo

func (m *ModToModTransfer) GetOpReason() SettlementOpReason {
	if m != nil {
		return m.OpReason
	}
	return SettlementOpReason_UNSPECIFIED
}

func (m *ModToModTransfer) GetSenderModule() string {
	if m != nil {
		return m.SenderModule
	}
	return ""
}

func (m *ModToModTransfer) GetRecipientModule() string {
	if m != nil {
		return m.RecipientModule
	}
	return ""
}

func (m *ModToModTransfer) GetCoin() types1.Coin {
	if m != nil {
		return m.Coin
	}
	return types1.Coin{}
}

func init() {
	proto.RegisterEnum("poktroll.tokenomics.SettlementOpReason", SettlementOpReason_name, SettlementOpReason_value)
	proto.RegisterType((*ClaimSettlementResult)(nil), "poktroll.tokenomics.ClaimSettlementResult")
	proto.RegisterType((*MintBurnOp)(nil), "poktroll.tokenomics.MintBurnOp")
	proto.RegisterType((*ModToAcctTransfer)(nil), "poktroll.tokenomics.ModToAcctTransfer")
	proto.RegisterType((*ModToModTransfer)(nil), "poktroll.tokenomics.ModToModTransfer")
}

func init() { proto.RegisterFile("poktroll/tokenomics/types.proto", fileDescriptor_6e327d53f335a53d) }

var fileDescriptor_6e327d53f335a53d = []byte{
	// 907 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x18, 0x8d, 0x93, 0xb6, 0x6c, 0xa7, 0xed, 0x6e, 0x32, 0xb4, 0x28, 0xad, 0xd8, 0xb8, 0xaa, 0x04,
	0x5b, 0x7e, 0x6a, 0x6f, 0x5b, 0x56, 0x02, 0x76, 0xf9, 0xb1, 0x63, 0x77, 0x6b, 0xe1, 0xc4, 0xe9,
	0x38, 0x56, 0xb5, 0xdc, 0x58, 0x89, 0x33, 0x5b, 0xac, 0xc6, 0x9e, 0xc8, 0x33, 0x81, 0xe5, 0x2d,
	0xb8, 0xe7, 0x9a, 0x37, 0x40, 0xe2, 0x15, 0xf6, 0x8e, 0x15, 0x57, 0x7b, 0x15, 0xa1, 0x96, 0xab,
	0x3c, 0x05, 0xf2, 0xd8, 0x8d, 0xb3, 0x4e, 0x0a, 0x5b, 0x10, 0x12, 0x37, 0x9e, 0xce, 0x7c, 0xe7,
	0x9c, 0x6f, 0xbe, 0xd3, 0xa3, 0x68, 0x80, 0x38, 0x20, 0xe7, 0x2c, 0x22, 0xfd, 0xbe, 0xcc, 0xc8,
	0x39, 0x0e, 0x49, 0xe0, 0x7b, 0x54, 0x66, 0xdf, 0x0f, 0x30, 0x95, 0x06, 0x11, 0x61, 0x04, 0xbe,
	0x79, 0x05, 0x90, 0x32, 0xc0, 0x56, 0xcd, 0x23, 0x34, 0x20, 0x54, 0xee, 0x76, 0x28, 0x96, 0xbf,
	0xdd, 0xef, 0x62, 0xd6, 0xd9, 0x97, 0x3d, 0xe2, 0x87, 0x09, 0x69, 0x6b, 0x33, 0xa9, 0xbb, 0x7c,
	0x27, 0x27, 0x9b, 0xb4, 0xb4, 0x7e, 0x46, 0xce, 0x48, 0x72, 0x1e, 0xff, 0x95, 0x9e, 0x6e, 0x4d,
	0xae, 0x31, 0x88, 0x08, 0x79, 0x3a, 0x7d, 0x83, 0x9d, 0x5f, 0x4b, 0x60, 0xa3, 0xde, 0xef, 0xf8,
	0x81, 0x8d, 0x19, 0xeb, 0xe3, 0x00, 0x87, 0x0c, 0x61, 0x3a, 0xec, 0x33, 0xf8, 0x29, 0x58, 0xf4,
	0xe2, 0x42, 0x55, 0xd8, 0x16, 0x76, 0x57, 0x0e, 0x36, 0xa4, 0xc9, 0x5d, 0xb9, 0x8a, 0xc4, 0x59,
	0xea, 0xda, 0xf3, 0x91, 0x58, 0x18, 0x8f, 0xc4, 0x04, 0x8b, 0x92, 0x05, 0x6a, 0x60, 0x31, 0xf0,
	0x43, 0x46, 0xab, 0xc5, 0xed, 0xd2, 0xee, 0xca, 0x81, 0x28, 0xcd, 0x99, 0x53, 0x6a, 0xf8, 0x21,
	0x53, 0x87, 0x51, 0x68, 0x0d, 0x32, 0x15, 0xce, 0x42, 0xc9, 0x12, 0xab, 0x74, 0x87, 0x51, 0x48,
	0xab, 0xa5, 0x1b, 0xaa, 0x70, 0x16, 0x4a, 0x16, 0xc8, 0xc0, 0x7a, 0x40, 0x7a, 0x2e, 0x23, 0x2e,
	0x5f, 0xa2, 0x4e, 0x48, 0x9f, 0xe2, 0x88, 0x56, 0x17, 0xb8, 0xe8, 0x3b, 0xf3, 0x45, 0x49, 0xaf,
	0x4d, 0xe2, 0x4f, 0x8a, 0x56, 0xdf, 0x4e, 0xa5, 0xe7, 0x4a, 0xa1, 0x4a, 0x90, 0xc3, 0x53, 0xf8,
	0x0c, 0x6c, 0xa4, 0xd0, 0x8e, 0xe7, 0xb1, 0xa9, 0xb6, 0x8b, 0xbc, 0xed, 0xbb, 0xd7, 0xb7, 0x55,
	0x3c, 0x8f, 0x4d, 0xfa, 0xde, 0x4d, 0xfb, 0xce, 0x17, 0x43, 0x30, 0xc8, 0x33, 0xe8, 0xce, 0x1f,
	0x02, 0x00, 0x99, 0x29, 0xd0, 0x06, 0xcb, 0x64, 0xe0, 0x46, 0xb8, 0x43, 0x49, 0xc8, 0xff, 0x95,
	0xb7, 0x0f, 0xee, 0xcd, 0x6d, 0x9e, 0x05, 0xc0, 0x1a, 0x20, 0x0e, 0x57, 0xd7, 0xc6, 0x23, 0x31,
	0x63, 0xa3, 0x5b, 0x24, 0x2d, 0x40, 0x0d, 0x54, 0x34, 0x4c, 0x99, 0x1f, 0x76, 0x98, 0x4f, 0xc2,
	0x06, 0xe9, 0x0d, 0xfb, 0xb8, 0x5a, 0xdc, 0x16, 0x76, 0x97, 0xd5, 0xb7, 0xc6, 0x23, 0x11, 0xf6,
	0xb2, 0x62, 0x6c, 0xd5, 0xb0, 0x8f, 0xd1, 0x2c, 0x01, 0x3e, 0x04, 0x0b, 0x71, 0xac, 0xab, 0x25,
	0x1e, 0xb0, 0x4d, 0x29, 0x8d, 0x72, 0x9c, 0x7b, 0x29, 0xcd, 0xbd, 0x54, 0x27, 0x7e, 0xa8, 0xae,
	0xa6, 0x2e, 0x70, 0x38, 0xe2, 0xdf, 0x9d, 0x5f, 0x8a, 0xa0, 0x32, 0xe3, 0xd7, 0x7f, 0x33, 0xed,
	0x03, 0xb0, 0x6a, 0xe3, 0xb0, 0x87, 0xa3, 0x57, 0x06, 0xad, 0x8c, 0x47, 0xe2, 0x1a, 0xe5, 0xe7,
	0x57, 0x33, 0xbe, 0x02, 0x83, 0x4f, 0x40, 0x19, 0x61, 0xcf, 0x1f, 0xf8, 0x38, 0x64, 0x4a, 0xaf,
	0x17, 0x61, 0x4a, 0xf9, 0xa8, 0xcb, 0xea, 0xde, 0x78, 0x24, 0x56, 0xa2, 0xab, 0x9a, 0xdb, 0x49,
	0x8a, 0xbf, 0xfd, 0xbc, 0xb7, 0x9e, 0x5a, 0x90, 0xc2, 0x6d, 0x16, 0xf9, 0xe1, 0x19, 0x9a, 0x91,
	0x99, 0x38, 0xb7, 0xf0, 0x4f, 0x9c, 0xfb, 0xb1, 0x08, 0xca, 0xf9, 0x80, 0xff, 0xaf, 0x8c, 0xfb,
	0x1c, 0xdc, 0x99, 0x4c, 0x9c, 0x32, 0x13, 0xdf, 0xd6, 0xc7, 0x23, 0xb1, 0x9c, 0xf9, 0x96, 0x92,
	0xf3, 0xe0, 0x7f, 0xe5, 0xce, 0xfb, 0x3f, 0x2d, 0x01, 0x38, 0x3b, 0x23, 0xbc, 0x03, 0x56, 0x9c,
	0xa6, 0xdd, 0xd2, 0xeb, 0xc6, 0x91, 0xa1, 0x6b, 0xe5, 0x02, 0x3c, 0x00, 0x52, 0xdb, 0x6c, 0xb8,
	0x48, 0x37, 0x95, 0x27, 0xae, 0xea, 0xa0, 0xa6, 0xab, 0x9f, 0x38, 0x8a, 0x69, 0xbb, 0x0d, 0xa3,
	0xd9, 0x76, 0x6d, 0xa7, 0xd5, 0x32, 0x0d, 0x1d, 0xb9, 0x76, 0x5b, 0xf9, 0x4a, 0xe7, 0x67, 0x65,
	0x01, 0x3e, 0x00, 0xfb, 0x7f, 0xc1, 0x51, 0x62, 0x4a, 0x5d, 0x69, 0x1b, 0x56, 0x33, 0xa5, 0xc5,
	0x90, 0x72, 0x11, 0xde, 0x05, 0x9b, 0x31, 0xed, 0xb1, 0x69, 0xa9, 0x8a, 0x99, 0x60, 0x8d, 0xe6,
	0x91, 0xc9, 0x91, 0xe5, 0x12, 0x7c, 0x0c, 0xea, 0xaf, 0x75, 0x93, 0x63, 0x05, 0xe9, 0xc7, 0x96,
	0xa9, 0xe9, 0xc8, 0x45, 0xfa, 0xa9, 0x82, 0x34, 0x57, 0x33, 0xec, 0x36, 0x32, 0x54, 0x87, 0x0b,
	0x2d, 0xc0, 0x0f, 0xc0, 0xbd, 0x7c, 0x1f, 0x4d, 0xb1, 0xe6, 0x82, 0x17, 0xe1, 0x7d, 0xf0, 0x61,
	0x1e, 0xdc, 0x42, 0x56, 0xcb, 0xb2, 0xaf, 0x91, 0x5f, 0x82, 0x8f, 0xc0, 0xc7, 0x79, 0xc6, 0x6b,
	0x5f, 0xee, 0x0d, 0xf8, 0x11, 0xb8, 0x3f, 0xc3, 0xb6, 0x1c, 0x54, 0xd7, 0x5d, 0xeb, 0xb4, 0x79,
	0x0d, 0xeb, 0x16, 0x3c, 0x04, 0x72, 0x9e, 0x35, 0x6d, 0xf3, 0x3c, 0xd2, 0x32, 0xfc, 0x0c, 0x7c,
	0x92, 0x27, 0x21, 0xdd, 0x68, 0xa8, 0x0e, 0xb2, 0xf5, 0x86, 0xce, 0x77, 0x27, 0x8e, 0x6e, 0xb7,
	0x5d, 0xdd, 0xae, 0x23, 0xeb, 0x94, 0x9b, 0xd4, 0x46, 0x4a, 0xd3, 0x3e, 0xd2, 0x51, 0x19, 0xc4,
	0xc9, 0x98, 0x8a, 0x8a, 0x1b, 0x4b, 0x65, 0x73, 0x9a, 0x8a, 0x7d, 0xec, 0x36, 0x2c, 0xcd, 0x31,
	0xf5, 0x8c, 0xb3, 0x02, 0xf7, 0xc0, 0x7b, 0x7f, 0xc3, 0x99, 0x4a, 0xc4, 0x2a, 0xfc, 0x02, 0x3c,
	0xbc, 0x89, 0x95, 0xf9, 0x7e, 0x6b, 0xf0, 0x4b, 0xf0, 0xe8, 0x46, 0x23, 0xe6, 0x15, 0x6e, 0xab,
	0x27, 0xcf, 0x2f, 0x6a, 0xc2, 0x8b, 0x8b, 0x9a, 0xf0, 0xf2, 0xa2, 0x26, 0xfc, 0x7e, 0x51, 0x13,
	0x7e, 0xb8, 0xac, 0x15, 0x5e, 0x5c, 0xd6, 0x0a, 0x2f, 0x2f, 0x6b, 0x85, 0xaf, 0x0f, 0xcf, 0x7c,
	0xf6, 0xcd, 0xb0, 0x2b, 0x79, 0x24, 0x90, 0xe3, 0x5f, 0x91, 0xbd, 0x10, 0xb3, 0xef, 0x48, 0x74,
	0x2e, 0x4f, 0x9e, 0x22, 0xcf, 0x66, 0xde, 0x44, 0xdd, 0x25, 0xfe, 0x24, 0x39, 0xfc, 0x33, 0x00,
	0x00, 0xff, 0xff, 0x61, 0x74, 0xd8, 0x32, 0x37, 0x09, 0x00, 0x00,
}

func (m *ClaimSettlementResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimSettlementResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimSettlementResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModToAcctTransfers) > 0 {
		for iNdEx := len(m.ModToAcctTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModToAcctTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ModToModTransfers) > 0 {
		for iNdEx := len(m.ModToModTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModToModTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Burns) > 0 {
		for iNdEx := len(m.Burns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Burns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Mints) > 0 {
		for iNdEx := len(m.Mints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MintBurnOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintBurnOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintBurnOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestinationModule) > 0 {
		i -= len(m.DestinationModule)
		copy(dAtA[i:], m.DestinationModule)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationModule)))
		i--
		dAtA[i] = 0x12
	}
	if m.OpReason != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OpReason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModToAcctTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModToAcctTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModToAcctTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderModule) > 0 {
		i -= len(m.SenderModule)
		copy(dAtA[i:], m.SenderModule)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SenderModule)))
		i--
		dAtA[i] = 0x12
	}
	if m.OpReason != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OpReason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModToModTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModToModTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModToModTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RecipientModule) > 0 {
		i -= len(m.RecipientModule)
		copy(dAtA[i:], m.RecipientModule)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RecipientModule)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderModule) > 0 {
		i -= len(m.SenderModule)
		copy(dAtA[i:], m.SenderModule)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SenderModule)))
		i--
		dAtA[i] = 0x12
	}
	if m.OpReason != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OpReason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimSettlementResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Claim.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Mints) > 0 {
		for _, e := range m.Mints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Burns) > 0 {
		for _, e := range m.Burns {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ModToModTransfers) > 0 {
		for _, e := range m.ModToModTransfers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ModToAcctTransfers) > 0 {
		for _, e := range m.ModToAcctTransfers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MintBurnOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpReason != 0 {
		n += 1 + sovTypes(uint64(m.OpReason))
	}
	l = len(m.DestinationModule)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ModToAcctTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpReason != 0 {
		n += 1 + sovTypes(uint64(m.OpReason))
	}
	l = len(m.SenderModule)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ModToModTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpReason != 0 {
		n += 1 + sovTypes(uint64(m.OpReason))
	}
	l = len(m.SenderModule)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RecipientModule)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimSettlementResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimSettlementResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimSettlementResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mints = append(m.Mints, MintBurnOp{})
			if err := m.Mints[len(m.Mints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burns = append(m.Burns, MintBurnOp{})
			if err := m.Burns[len(m.Burns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModToModTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModToModTransfers = append(m.ModToModTransfers, ModToModTransfer{})
			if err := m.ModToModTransfers[len(m.ModToModTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModToAcctTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModToAcctTransfers = append(m.ModToAcctTransfers, ModToAcctTransfer{})
			if err := m.ModToAcctTransfers[len(m.ModToAcctTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintBurnOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintBurnOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintBurnOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpReason", wireType)
			}
			m.OpReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpReason |= SettlementOpReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModToAcctTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModToAcctTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModToAcctTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpReason", wireType)
			}
			m.OpReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpReason |= SettlementOpReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModToModTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModToModTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModToModTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpReason", wireType)
			}
			m.OpReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpReason |= SettlementOpReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
