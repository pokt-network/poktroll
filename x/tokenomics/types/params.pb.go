// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/tokenomics/params.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the tokenomics module.
type Params struct {
	// mint_allocation_dao is the percentage of the minted tokens which are sent
	// to the DAO reward address during claim settlement.
	MintAllocationDao float64 `protobuf:"fixed64,1,opt,name=mint_allocation_dao,json=mintAllocationDao,proto3" json:"mint_allocation_dao" yaml:"mint_allocation_dao"`
	// mint_allocation_proposer is the percentage of the minted tokens which are sent
	// to the block proposer account address during claim settlement.
	MintAllocationProposer float64 `protobuf:"fixed64,2,opt,name=mint_allocation_proposer,json=mintAllocationProposer,proto3" json:"mint_allocation_proposer" yaml:"mint_allocation_proposer"`
	// mint_allocation_supplier is the percentage of the minted tokens which are sent
	// to the block supplier account address during claim settlement.
	MintAllocationSupplier float64 `protobuf:"fixed64,3,opt,name=mint_allocation_supplier,json=mintAllocationSupplier,proto3" json:"mint_allocation_supplier" yaml:"mint_allocation_supplier"`
	// mint_allocation_source_owner is the percentage of the minted tokens which are sent
	// to the service source owner account address during claim settlement.
	MintAllocationSourceOwner float64 `protobuf:"fixed64,4,opt,name=mint_allocation_source_owner,json=mintAllocationSourceOwner,proto3" json:"mint_allocation_source_owner" yaml:"mint_allocation_source_owner"`
	// mint_allocation_application is the percentage of the minted tokens which are sent
	// to the application account address during claim settlement.
	MintAllocationApplication float64 `protobuf:"fixed64,5,opt,name=mint_allocation_application,json=mintAllocationApplication,proto3" json:"mint_allocation_application" yaml:"mint_allocation_application"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_df10a06914fc6eee, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintAllocationDao() float64 {
	if m != nil {
		return m.MintAllocationDao
	}
	return 0
}

func (m *Params) GetMintAllocationProposer() float64 {
	if m != nil {
		return m.MintAllocationProposer
	}
	return 0
}

func (m *Params) GetMintAllocationSupplier() float64 {
	if m != nil {
		return m.MintAllocationSupplier
	}
	return 0
}

func (m *Params) GetMintAllocationSourceOwner() float64 {
	if m != nil {
		return m.MintAllocationSourceOwner
	}
	return 0
}

func (m *Params) GetMintAllocationApplication() float64 {
	if m != nil {
		return m.MintAllocationApplication
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "poktroll.tokenomics.Params")
}

func init() { proto.RegisterFile("poktroll/tokenomics/params.proto", fileDescriptor_df10a06914fc6eee) }

var fileDescriptor_df10a06914fc6eee = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x8e, 0xda, 0x40,
	0x14, 0x86, 0x99, 0x24, 0x50, 0xb8, 0xc3, 0x44, 0x91, 0x43, 0x90, 0x07, 0x39, 0x8a, 0x14, 0x45,
	0x0a, 0x2e, 0x50, 0x1a, 0x9a, 0x08, 0x94, 0x28, 0x65, 0x08, 0xe9, 0xd2, 0xa0, 0xc1, 0x19, 0x11,
	0x0b, 0xdb, 0x6f, 0x34, 0x1e, 0x44, 0x38, 0x40, 0xa4, 0x68, 0xab, 0xbd, 0xc1, 0xee, 0x11, 0xf6,
	0x18, 0x5b, 0x52, 0x52, 0x8d, 0x56, 0xa6, 0xd8, 0x95, 0x4b, 0x9f, 0x60, 0xe5, 0x31, 0x06, 0x16,
	0x6c, 0x9a, 0xd1, 0xd3, 0xfb, 0xbf, 0x79, 0xff, 0x5f, 0xfc, 0x5a, 0x9b, 0xc1, 0x4c, 0x70, 0xf0,
	0x3c, 0x5b, 0xc0, 0x8c, 0x06, 0xe0, 0xbb, 0x4e, 0x68, 0x33, 0xc2, 0x89, 0x1f, 0x76, 0x18, 0x07,
	0x01, 0x7a, 0x23, 0x27, 0x3a, 0x7b, 0xa2, 0x59, 0x27, 0xbe, 0x1b, 0x80, 0xad, 0xde, 0x8c, 0x6b,
	0xbe, 0x9c, 0xc2, 0x14, 0xd4, 0x68, 0xa7, 0x53, 0xb6, 0xb5, 0xae, 0xaa, 0x5a, 0x6d, 0xa8, 0xce,
	0xe9, 0x54, 0x6b, 0xf8, 0x6e, 0x20, 0xc6, 0xc4, 0xf3, 0xc0, 0x21, 0xc2, 0x85, 0x60, 0xfc, 0x9b,
	0x80, 0x81, 0xda, 0xe8, 0x3d, 0x1a, 0x7c, 0x8a, 0x25, 0x2e, 0x92, 0x13, 0x89, 0x9b, 0x4b, 0xe2,
	0x7b, 0x3d, 0xab, 0x40, 0xb4, 0x46, 0xf5, 0x74, 0xdb, 0xdf, 0x2d, 0xbf, 0x10, 0xd0, 0x97, 0x9a,
	0x71, 0x8c, 0x32, 0x0e, 0x0c, 0x42, 0xca, 0x8d, 0x67, 0xca, 0xeb, 0x73, 0x2c, 0x71, 0x29, 0x93,
	0x48, 0x8c, 0x8b, 0x0d, 0x73, 0xc2, 0x1a, 0xbd, 0x7a, 0xea, 0x3a, 0xdc, 0x0a, 0x45, 0xd6, 0xe1,
	0x9c, 0x31, 0xcf, 0xa5, 0xdc, 0x78, 0x5e, 0x6e, 0x9d, 0x33, 0xe5, 0xd6, 0x39, 0x71, 0x62, 0xfd,
	0x73, 0x2b, 0xe8, 0xff, 0x91, 0xd6, 0x3a, 0xf9, 0x05, 0x73, 0xee, 0xd0, 0x31, 0x2c, 0x02, 0xca,
	0x8d, 0x17, 0xca, 0xff, 0x5b, 0x2c, 0xf1, 0x59, 0x2e, 0x91, 0xf8, 0x6d, 0x49, 0x86, 0x03, 0xca,
	0x1a, 0xbd, 0x3e, 0xca, 0xa1, 0xc4, 0xef, 0xa9, 0xa6, 0xff, 0x43, 0xda, 0x9b, 0xe3, 0xcf, 0x24,
	0x8d, 0x99, 0xcd, 0x46, 0x55, 0x25, 0xf9, 0x1a, 0x4b, 0x7c, 0x0e, 0x4b, 0x24, 0xb6, 0x8a, 0x83,
	0x1c, 0x40, 0x27, 0x39, 0xfa, 0x7b, 0xad, 0xf7, 0xee, 0xe1, 0x1a, 0xa3, 0x8b, 0xfb, 0x9b, 0x0f,
	0xad, 0x5d, 0xc7, 0xff, 0x1e, 0xb6, 0x3c, 0xab, 0xe5, 0xe0, 0xc7, 0x6d, 0x64, 0xa2, 0x55, 0x64,
	0xa2, 0x75, 0x64, 0xa2, 0xbb, 0xc8, 0x44, 0x97, 0x1b, 0xb3, 0xb2, 0xda, 0x98, 0x95, 0xf5, 0xc6,
	0xac, 0xfc, 0xea, 0x4e, 0x5d, 0xf1, 0x67, 0x3e, 0xe9, 0x38, 0xe0, 0xdb, 0xe9, 0x99, 0x8f, 0x01,
	0x15, 0x0b, 0xe0, 0x33, 0xbb, 0xf8, 0xa6, 0x58, 0x32, 0x1a, 0x4e, 0x6a, 0xaa, 0xfb, 0xdd, 0xc7,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x45, 0x21, 0xe2, 0x5d, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MintAllocationDao != that1.MintAllocationDao {
		return false
	}
	if this.MintAllocationProposer != that1.MintAllocationProposer {
		return false
	}
	if this.MintAllocationSupplier != that1.MintAllocationSupplier {
		return false
	}
	if this.MintAllocationSourceOwner != that1.MintAllocationSourceOwner {
		return false
	}
	if this.MintAllocationApplication != that1.MintAllocationApplication {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintAllocationApplication != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MintAllocationApplication))))
		i--
		dAtA[i] = 0x29
	}
	if m.MintAllocationSourceOwner != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MintAllocationSourceOwner))))
		i--
		dAtA[i] = 0x21
	}
	if m.MintAllocationSupplier != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MintAllocationSupplier))))
		i--
		dAtA[i] = 0x19
	}
	if m.MintAllocationProposer != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MintAllocationProposer))))
		i--
		dAtA[i] = 0x11
	}
	if m.MintAllocationDao != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MintAllocationDao))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MintAllocationDao != 0 {
		n += 9
	}
	if m.MintAllocationProposer != 0 {
		n += 9
	}
	if m.MintAllocationSupplier != 0 {
		n += 9
	}
	if m.MintAllocationSourceOwner != 0 {
		n += 9
	}
	if m.MintAllocationApplication != 0 {
		n += 9
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAllocationDao", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MintAllocationDao = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAllocationProposer", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MintAllocationProposer = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAllocationSupplier", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MintAllocationSupplier = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAllocationSourceOwner", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MintAllocationSourceOwner = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAllocationApplication", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MintAllocationApplication = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
