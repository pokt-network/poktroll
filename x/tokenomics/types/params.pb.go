// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/tokenomics/params.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the tokenomics module.
type Params struct {
	// mint_allocation_percentages represents the distribution of newly minted tokens,
	// at the end of claim settlement, as a result of the Global Mint TLM.
	MintAllocationPercentages MintAllocationPercentages `protobuf:"bytes,1,opt,name=mint_allocation_percentages,json=mintAllocationPercentages,proto3" json:"mint_allocation_proposer" yaml:"mint_allocation_percentages"`
	// dao_reward_address is the address to which mint_allocation_dao percentage of the
	// minted tokens are at the end of claim settlement.
	DaoRewardAddress string `protobuf:"bytes,6,opt,name=dao_reward_address,json=daoRewardAddress,proto3" json:"dao_reward_address" yaml:"dao_reward_address"`
	// global_inflation_per_claim is the percentage of a claim's claimable uPOKT amount which will be minted on settlement.
	GlobalInflationPerClaim float64 `protobuf:"fixed64,7,opt,name=global_inflation_per_claim,json=globalInflationPerClaim,proto3" json:"global_inflation_per_claim" yaml:"global_inflation_per_claim"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_577bb6b98de8f6d1, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintAllocationPercentages() MintAllocationPercentages {
	if m != nil {
		return m.MintAllocationPercentages
	}
	return MintAllocationPercentages{}
}

func (m *Params) GetDaoRewardAddress() string {
	if m != nil {
		return m.DaoRewardAddress
	}
	return ""
}

func (m *Params) GetGlobalInflationPerClaim() float64 {
	if m != nil {
		return m.GlobalInflationPerClaim
	}
	return 0
}

// MintAllocationPercentages represents the distribution of newly minted tokens,
// at the end of claim settlement, as a result of the Global Mint TLM.
type MintAllocationPercentages struct {
	// dao is the percentage of the minted tokens which are sent
	// to the DAO reward address during claim settlement.
	Dao float64 `protobuf:"fixed64,1,opt,name=dao,proto3" json:"dao" yaml:"dao"`
	// proposer is the percentage of the minted tokens which are sent
	// to the block proposer account address during claim settlement.
	Proposer float64 `protobuf:"fixed64,2,opt,name=proposer,proto3" json:"proposer" yaml:"proposer"`
	// supplier is the percentage of the minted tokens which are sent
	// to the block supplier account address during claim settlement.
	Supplier float64 `protobuf:"fixed64,3,opt,name=supplier,proto3" json:"supplier" yaml:"supplier"`
	// source_owner is the percentage of the minted tokens which are sent
	// to the service source owner account address during claim settlement.
	SourceOwner float64 `protobuf:"fixed64,4,opt,name=source_owner,json=sourceOwner,proto3" json:"source_owner" yaml:"source_owner"`
	// allocation_application is the percentage of the minted tokens which are sent
	// to the application account address during claim settlement.
	Application float64 `protobuf:"fixed64,5,opt,name=application,proto3" json:"application" yaml:"application"`
}

func (m *MintAllocationPercentages) Reset()         { *m = MintAllocationPercentages{} }
func (m *MintAllocationPercentages) String() string { return proto.CompactTextString(m) }
func (*MintAllocationPercentages) ProtoMessage()    {}
func (*MintAllocationPercentages) Descriptor() ([]byte, []int) {
	return fileDescriptor_577bb6b98de8f6d1, []int{1}
}
func (m *MintAllocationPercentages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintAllocationPercentages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MintAllocationPercentages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintAllocationPercentages.Merge(m, src)
}
func (m *MintAllocationPercentages) XXX_Size() int {
	return m.Size()
}
func (m *MintAllocationPercentages) XXX_DiscardUnknown() {
	xxx_messageInfo_MintAllocationPercentages.DiscardUnknown(m)
}

var xxx_messageInfo_MintAllocationPercentages proto.InternalMessageInfo

func (m *MintAllocationPercentages) GetDao() float64 {
	if m != nil {
		return m.Dao
	}
	return 0
}

func (m *MintAllocationPercentages) GetProposer() float64 {
	if m != nil {
		return m.Proposer
	}
	return 0
}

func (m *MintAllocationPercentages) GetSupplier() float64 {
	if m != nil {
		return m.Supplier
	}
	return 0
}

func (m *MintAllocationPercentages) GetSourceOwner() float64 {
	if m != nil {
		return m.SourceOwner
	}
	return 0
}

func (m *MintAllocationPercentages) GetApplication() float64 {
	if m != nil {
		return m.Application
	}
	return 0
}

// ParamsUpdate defines the parameters update along with the block height at which
// the update is effective.
// This mechanism enables governance to schedule parameter changes that take effect
// at a specified future block height, providing transparency and allowing network
// participants time to prepare for the changes.
type ParamsUpdate struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// activation_height specifies the block height at which these parameters will become effective.
	// Once the blockchain reaches this height, the parameters will automatically activate.
	ActivationHeight int64 `protobuf:"varint,2,opt,name=activation_height,json=activationHeight,proto3" json:"activation_height"`
	// deactivation_height specifies the block height at which these parameters will no longer be effective.
	// - For currently active parameters, this value is set to 0, indicating no scheduled deactivation.
	// - For scheduled future updates, this will be set when another parameter update is scheduled to replace this one.
	DeactivationHeight int64 `protobuf:"varint,3,opt,name=deactivation_height,json=deactivationHeight,proto3" json:"deactivation_height"`
}

func (m *ParamsUpdate) Reset()         { *m = ParamsUpdate{} }
func (m *ParamsUpdate) String() string { return proto.CompactTextString(m) }
func (*ParamsUpdate) ProtoMessage()    {}
func (*ParamsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_577bb6b98de8f6d1, []int{2}
}
func (m *ParamsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ParamsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsUpdate.Merge(m, src)
}
func (m *ParamsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ParamsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsUpdate proto.InternalMessageInfo

func (m *ParamsUpdate) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *ParamsUpdate) GetActivationHeight() int64 {
	if m != nil {
		return m.ActivationHeight
	}
	return 0
}

func (m *ParamsUpdate) GetDeactivationHeight() int64 {
	if m != nil {
		return m.DeactivationHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "pocket.tokenomics.Params")
	proto.RegisterType((*MintAllocationPercentages)(nil), "pocket.tokenomics.MintAllocationPercentages")
	proto.RegisterType((*ParamsUpdate)(nil), "pocket.tokenomics.ParamsUpdate")
}

func init() { proto.RegisterFile("pocket/tokenomics/params.proto", fileDescriptor_577bb6b98de8f6d1) }

var fileDescriptor_577bb6b98de8f6d1 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xde, 0x61, 0x75, 0xc5, 0x81, 0x44, 0x18, 0x30, 0x74, 0xd7, 0xa4, 0x83, 0x35, 0x06, 0x42,
	0x64, 0x37, 0x91, 0x1b, 0x9e, 0x28, 0x09, 0xa2, 0xc6, 0x48, 0x6a, 0xb8, 0x78, 0x69, 0x86, 0x76,
	0x2c, 0xcd, 0xb6, 0x9d, 0x66, 0x3a, 0x88, 0xdc, 0x3c, 0x7b, 0xf2, 0x4f, 0xf0, 0xc8, 0x91, 0x03,
	0x7f, 0x04, 0x47, 0xa2, 0x17, 0x4e, 0x13, 0xb3, 0x98, 0x60, 0x7a, 0xdc, 0xbf, 0xc0, 0x74, 0xa6,
	0xbb, 0x5b, 0xb2, 0xc0, 0x65, 0xd3, 0xf7, 0x7d, 0xef, 0xfb, 0xde, 0xe4, 0xfd, 0x58, 0x68, 0xa6,
	0xcc, 0xeb, 0x52, 0xd1, 0x11, 0xac, 0x4b, 0x13, 0x16, 0x87, 0x5e, 0xd6, 0x49, 0x09, 0x27, 0x71,
	0xd6, 0x4e, 0x39, 0x13, 0x0c, 0xcd, 0x6a, 0xbe, 0x3d, 0xe2, 0x5b, 0xb3, 0x24, 0x0e, 0x13, 0xd6,
	0x51, 0xbf, 0x3a, 0xab, 0x35, 0x1f, 0xb0, 0x80, 0xa9, 0xcf, 0x4e, 0xf1, 0x55, 0xa2, 0x4d, 0x8f,
	0x65, 0x31, 0xcb, 0x5c, 0x4d, 0xe8, 0x40, 0x53, 0x56, 0xaf, 0x0e, 0x1b, 0x3b, 0xaa, 0x0e, 0x3a,
	0x05, 0xf0, 0x49, 0x1c, 0x26, 0xc2, 0x25, 0x51, 0xc4, 0x3c, 0x22, 0x42, 0x96, 0xb8, 0x29, 0xe5,
	0x1e, 0x4d, 0x04, 0x09, 0x68, 0x66, 0x80, 0x45, 0xb0, 0x3c, 0xf5, 0xf2, 0x45, 0x7b, 0xec, 0x21,
	0xed, 0xf7, 0x61, 0x22, 0x36, 0x86, 0xa2, 0x9d, 0x91, 0xc6, 0xde, 0x3a, 0x93, 0xb8, 0x96, 0x4b,
	0x6c, 0x8c, 0x19, 0x73, 0x96, 0xb2, 0x8c, 0xf2, 0xbe, 0xc4, 0xd6, 0x11, 0x89, 0xa3, 0x75, 0xeb,
	0x8e, 0xd2, 0x96, 0xd3, 0x8c, 0x6f, 0x2b, 0x81, 0x8e, 0x20, 0xf2, 0x09, 0x73, 0x39, 0x3d, 0x24,
	0xdc, 0x77, 0x89, 0xef, 0x73, 0x9a, 0x65, 0x46, 0x63, 0x11, 0x2c, 0x3f, 0xb4, 0xdf, 0xe5, 0x12,
	0xdf, 0xc0, 0xf6, 0x25, 0x6e, 0xea, 0xa2, 0xe3, 0x9c, 0xf5, 0xeb, 0x74, 0x75, 0xbe, 0x6c, 0xd1,
	0x86, 0x86, 0x3e, 0x0a, 0x1e, 0x26, 0x81, 0x33, 0xe3, 0x13, 0xe6, 0xa8, 0xdc, 0x12, 0x47, 0xdf,
	0x00, 0x6c, 0x05, 0x11, 0xdb, 0x23, 0x91, 0x1b, 0x26, 0x9f, 0xa3, 0xe1, 0xbb, 0x5d, 0x2f, 0x22,
	0x61, 0x6c, 0x3c, 0x58, 0x04, 0xcb, 0xc0, 0xde, 0xcc, 0x25, 0xbe, 0x23, 0xab, 0x2f, 0xf1, 0x53,
	0xfd, 0x96, 0xdb, 0x73, 0x2c, 0x67, 0x41, 0x93, 0x6f, 0x06, 0xdc, 0x0e, 0xe5, 0x9b, 0x05, 0xb3,
	0xfe, 0xec, 0xdf, 0x4f, 0x0c, 0xbe, 0x5f, 0x9d, 0xac, 0xb4, 0xca, 0xfd, 0xf9, 0x5a, 0xdd, 0x20,
	0x3d, 0x59, 0xeb, 0xf7, 0x04, 0x6c, 0xde, 0x3a, 0x23, 0xb4, 0x04, 0xeb, 0x3e, 0x61, 0x6a, 0xbc,
	0xc0, 0x7e, 0x9c, 0x4b, 0x5c, 0x84, 0x7d, 0x89, 0xe1, 0xb0, 0x45, 0x96, 0x53, 0x40, 0xe8, 0x15,
	0x9c, 0x1c, 0x8c, 0xcd, 0x98, 0x50, 0xd9, 0x38, 0x97, 0x78, 0xb2, 0x32, 0xca, 0x47, 0x5a, 0x32,
	0x40, 0x2c, 0x67, 0x48, 0x16, 0xe2, 0xec, 0x20, 0x4d, 0xa3, 0x90, 0x72, 0xa3, 0x3e, 0x12, 0x0f,
	0xb0, 0x91, 0x78, 0x80, 0x58, 0xce, 0x90, 0x44, 0x6f, 0xe1, 0x74, 0xc6, 0x0e, 0xb8, 0x47, 0x5d,
	0x76, 0x98, 0x50, 0x6e, 0xdc, 0x53, 0x06, 0x4b, 0xb9, 0xc4, 0xd7, 0xf0, 0xbe, 0xc4, 0x73, 0xa5,
	0x49, 0x05, 0xb5, 0x9c, 0x29, 0x1d, 0x7e, 0x28, 0x22, 0xf4, 0x1a, 0x4e, 0x91, 0xc2, 0x56, 0x37,
	0xc2, 0xb8, 0xaf, 0xac, 0x9e, 0xe7, 0x12, 0x57, 0xe1, 0xbe, 0xc4, 0x48, 0x3b, 0x55, 0x40, 0xcb,
	0xa9, 0xa6, 0x58, 0x7f, 0x01, 0x9c, 0xd6, 0x0d, 0xde, 0x4d, 0x7d, 0x22, 0x28, 0xda, 0x82, 0x0d,
	0x7d, 0xb2, 0xe5, 0xa9, 0x34, 0x6f, 0x38, 0x15, 0x2d, 0xb0, 0xe7, 0xca, 0xbb, 0x28, 0x05, 0xc7,
	0x57, 0x27, 0x2b, 0xc0, 0x29, 0x03, 0x64, 0xc3, 0x59, 0xe2, 0x89, 0xf0, 0x8b, 0xde, 0x82, 0x7d,
	0x1a, 0x06, 0xfb, 0x42, 0x35, 0xbc, 0xae, 0xc6, 0x33, 0x4e, 0x3a, 0x33, 0x23, 0x68, 0x5b, 0x21,
	0x68, 0x1b, 0xce, 0xf9, 0x74, 0xdc, 0xa5, 0xae, 0x5c, 0x16, 0x72, 0x89, 0x6f, 0xa2, 0x1d, 0x54,
	0x05, 0xb5, 0x93, 0xbd, 0x7b, 0xdc, 0x33, 0xc1, 0x59, 0xcf, 0x04, 0xe7, 0x3d, 0x13, 0x5c, 0xf4,
	0x4c, 0xf0, 0xa7, 0x67, 0x82, 0x1f, 0x97, 0x66, 0xed, 0xfc, 0xd2, 0xac, 0x5d, 0x5c, 0x9a, 0xb5,
	0x4f, 0x6b, 0x41, 0x28, 0xf6, 0x0f, 0xf6, 0xda, 0x1e, 0x8b, 0x3b, 0x29, 0xeb, 0x8a, 0xd5, 0x84,
	0x8a, 0x43, 0xc6, 0xbb, 0x2a, 0xe0, 0x2c, 0x8a, 0xae, 0x2f, 0xa5, 0x38, 0x4a, 0x69, 0xb6, 0xd7,
	0x50, 0xff, 0x3f, 0x6b, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x60, 0x8f, 0x1b, 0xf8, 0x04,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MintAllocationPercentages.Equal(&that1.MintAllocationPercentages) {
		return false
	}
	if this.DaoRewardAddress != that1.DaoRewardAddress {
		return false
	}
	if this.GlobalInflationPerClaim != that1.GlobalInflationPerClaim {
		return false
	}
	return true
}
func (this *MintAllocationPercentages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MintAllocationPercentages)
	if !ok {
		that2, ok := that.(MintAllocationPercentages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dao != that1.Dao {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.Supplier != that1.Supplier {
		return false
	}
	if this.SourceOwner != that1.SourceOwner {
		return false
	}
	if this.Application != that1.Application {
		return false
	}
	return true
}
func (this *ParamsUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParamsUpdate)
	if !ok {
		that2, ok := that.(ParamsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(&that1.Params) {
		return false
	}
	if this.ActivationHeight != that1.ActivationHeight {
		return false
	}
	if this.DeactivationHeight != that1.DeactivationHeight {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalInflationPerClaim != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GlobalInflationPerClaim))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.DaoRewardAddress) > 0 {
		i -= len(m.DaoRewardAddress)
		copy(dAtA[i:], m.DaoRewardAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DaoRewardAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.MintAllocationPercentages.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MintAllocationPercentages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintAllocationPercentages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintAllocationPercentages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Application != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Application))))
		i--
		dAtA[i] = 0x29
	}
	if m.SourceOwner != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SourceOwner))))
		i--
		dAtA[i] = 0x21
	}
	if m.Supplier != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Supplier))))
		i--
		dAtA[i] = 0x19
	}
	if m.Proposer != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Proposer))))
		i--
		dAtA[i] = 0x11
	}
	if m.Dao != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dao))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ParamsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeactivationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DeactivationHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivationHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ActivationHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintAllocationPercentages.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.DaoRewardAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.GlobalInflationPerClaim != 0 {
		n += 9
	}
	return n
}

func (m *MintAllocationPercentages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dao != 0 {
		n += 9
	}
	if m.Proposer != 0 {
		n += 9
	}
	if m.Supplier != 0 {
		n += 9
	}
	if m.SourceOwner != 0 {
		n += 9
	}
	if m.Application != 0 {
		n += 9
	}
	return n
}

func (m *ParamsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.ActivationHeight != 0 {
		n += 1 + sovParams(uint64(m.ActivationHeight))
	}
	if m.DeactivationHeight != 0 {
		n += 1 + sovParams(uint64(m.DeactivationHeight))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAllocationPercentages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintAllocationPercentages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoRewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaoRewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalInflationPerClaim", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GlobalInflationPerClaim = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintAllocationPercentages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintAllocationPercentages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintAllocationPercentages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dao", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dao = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Proposer = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplier", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Supplier = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceOwner", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SourceOwner = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Application = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationHeight", wireType)
			}
			m.ActivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivationHeight", wireType)
			}
			m.DeactivationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeactivationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
