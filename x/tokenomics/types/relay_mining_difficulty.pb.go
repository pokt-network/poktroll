// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/tokenomics/relay_mining_difficulty.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RelayMiningDifficulty is a message used to compute, store, update and access
// the latest relay mining difficulty for each service.
type RelayMiningDifficulty struct {
	// The service ID this relay mining difficulty is associated with.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The block height at which this relay mining difficulty was computed.
	BlockHeight int64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The latest exponential moving average of the number of relays for this service.
	NumRelaysEma uint64 `protobuf:"varint,4,opt,name=num_relays_ema,json=numRelaysEma,proto3" json:"num_relays_ema,omitempty"`
	// The latest relay mining difficulty for this service.
	Difficulty []byte `protobuf:"bytes,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (m *RelayMiningDifficulty) Reset()         { *m = RelayMiningDifficulty{} }
func (m *RelayMiningDifficulty) String() string { return proto.CompactTextString(m) }
func (*RelayMiningDifficulty) ProtoMessage()    {}
func (*RelayMiningDifficulty) Descriptor() ([]byte, []int) {
	return fileDescriptor_1777fca7cd39aaea, []int{0}
}
func (m *RelayMiningDifficulty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayMiningDifficulty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayMiningDifficulty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayMiningDifficulty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayMiningDifficulty.Merge(m, src)
}
func (m *RelayMiningDifficulty) XXX_Size() int {
	return m.Size()
}
func (m *RelayMiningDifficulty) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayMiningDifficulty.DiscardUnknown(m)
}

var xxx_messageInfo_RelayMiningDifficulty proto.InternalMessageInfo

func (m *RelayMiningDifficulty) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *RelayMiningDifficulty) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *RelayMiningDifficulty) GetNumRelaysEma() uint64 {
	if m != nil {
		return m.NumRelaysEma
	}
	return 0
}

func (m *RelayMiningDifficulty) GetDifficulty() []byte {
	if m != nil {
		return m.Difficulty
	}
	return nil
}

func init() {
	proto.RegisterType((*RelayMiningDifficulty)(nil), "poktroll.tokenomics.RelayMiningDifficulty")
}

func init() {
	proto.RegisterFile("poktroll/tokenomics/relay_mining_difficulty.proto", fileDescriptor_1777fca7cd39aaea)
}

var fileDescriptor_1777fca7cd39aaea = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xeb, 0x7b, 0x0b, 0x52, 0x4d, 0x85, 0x44, 0x00, 0x29, 0xaa, 0xc0, 0x0a, 0x88, 0x21,
	0x0b, 0xb5, 0x50, 0xdf, 0x00, 0x81, 0x04, 0x43, 0x97, 0x8c, 0x2c, 0x91, 0x9b, 0xba, 0xee, 0x51,
	0x62, 0x9f, 0x28, 0x76, 0x80, 0xbe, 0x05, 0x6f, 0xc0, 0xeb, 0x30, 0x76, 0x64, 0x44, 0xed, 0x8b,
	0xa0, 0x98, 0xd0, 0x76, 0x60, 0xb1, 0x8e, 0x3e, 0x9f, 0x5f, 0xfe, 0x3f, 0xd3, 0x9b, 0x12, 0x73,
	0x57, 0x61, 0x51, 0x70, 0x87, 0xb9, 0x34, 0xa8, 0x21, 0xb3, 0xbc, 0x92, 0x85, 0x58, 0xa4, 0x1a,
	0x0c, 0x18, 0x95, 0x4e, 0x61, 0x36, 0x83, 0xac, 0x2e, 0xdc, 0x62, 0x58, 0x56, 0xe8, 0x30, 0x38,
	0xfe, 0x8d, 0x0c, 0xb7, 0x91, 0xc1, 0x91, 0xd0, 0x60, 0x90, 0xfb, 0xf3, 0x67, 0x6f, 0x70, 0xa2,
	0x50, 0xa1, 0x1f, 0x79, 0x33, 0xb5, 0xf4, 0x4c, 0x21, 0xaa, 0x42, 0x72, 0x51, 0x02, 0x17, 0xc6,
	0xa0, 0x13, 0x0e, 0xd0, 0xd8, 0xf6, 0x36, 0xfa, 0xab, 0x4e, 0x29, 0x2a, 0xa1, 0xdb, 0x8d, 0xcb,
	0x77, 0x42, 0x4f, 0x93, 0xa6, 0xdf, 0xd8, 0xd7, 0xbb, 0xdb, 0xb4, 0x0b, 0xce, 0x29, 0xb5, 0xb2,
	0x7a, 0x86, 0x4c, 0xa6, 0x30, 0x0d, 0x49, 0x44, 0xe2, 0x5e, 0xd2, 0x6b, 0xc9, 0xe3, 0x34, 0xb8,
	0xa0, 0xfd, 0x49, 0x81, 0x59, 0x9e, 0xce, 0x25, 0xa8, 0xb9, 0x0b, 0xff, 0x45, 0x24, 0xfe, 0x9f,
	0x1c, 0x78, 0xf6, 0xe0, 0x51, 0x70, 0x45, 0x0f, 0x4d, 0xad, 0x53, 0xaf, 0x6f, 0x53, 0xa9, 0x45,
	0xd8, 0x8d, 0x48, 0xdc, 0x4d, 0xfa, 0xa6, 0xd6, 0xfe, 0x4d, 0x7b, 0xaf, 0x45, 0xc0, 0x28, 0xdd,
	0xfe, 0x49, 0xb8, 0x17, 0x91, 0xb8, 0x9f, 0xec, 0x90, 0xdb, 0xf1, 0xc7, 0x8a, 0x91, 0xe5, 0x8a,
	0x91, 0xaf, 0x15, 0x23, 0x6f, 0x6b, 0xd6, 0x59, 0xae, 0x59, 0xe7, 0x73, 0xcd, 0x3a, 0x4f, 0x23,
	0x05, 0x6e, 0x5e, 0x4f, 0x86, 0x19, 0x6a, 0xde, 0x88, 0x5e, 0x1b, 0xe9, 0x5e, 0xb0, 0xca, 0xf9,
	0xc6, 0xfa, 0x75, 0xd7, 0xdb, 0x2d, 0x4a, 0x69, 0x27, 0xfb, 0xde, 0x7b, 0xf4, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0xc0, 0xd4, 0xc9, 0xaa, 0x01, 0x00, 0x00,
}

func (m *RelayMiningDifficulty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayMiningDifficulty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayMiningDifficulty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Difficulty) > 0 {
		i -= len(m.Difficulty)
		copy(dAtA[i:], m.Difficulty)
		i = encodeVarintRelayMiningDifficulty(dAtA, i, uint64(len(m.Difficulty)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NumRelaysEma != 0 {
		i = encodeVarintRelayMiningDifficulty(dAtA, i, uint64(m.NumRelaysEma))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockHeight != 0 {
		i = encodeVarintRelayMiningDifficulty(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintRelayMiningDifficulty(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelayMiningDifficulty(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelayMiningDifficulty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelayMiningDifficulty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovRelayMiningDifficulty(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRelayMiningDifficulty(uint64(m.BlockHeight))
	}
	if m.NumRelaysEma != 0 {
		n += 1 + sovRelayMiningDifficulty(uint64(m.NumRelaysEma))
	}
	l = len(m.Difficulty)
	if l > 0 {
		n += 1 + l + sovRelayMiningDifficulty(uint64(l))
	}
	return n
}

func sovRelayMiningDifficulty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelayMiningDifficulty(x uint64) (n int) {
	return sovRelayMiningDifficulty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelayMiningDifficulty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayMiningDifficulty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayMiningDifficulty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayMiningDifficulty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayMiningDifficulty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayMiningDifficulty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayMiningDifficulty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayMiningDifficulty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRelaysEma", wireType)
			}
			m.NumRelaysEma = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayMiningDifficulty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRelaysEma |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayMiningDifficulty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelayMiningDifficulty
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayMiningDifficulty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Difficulty = append(m.Difficulty[:0], dAtA[iNdEx:postIndex]...)
			if m.Difficulty == nil {
				m.Difficulty = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayMiningDifficulty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayMiningDifficulty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelayMiningDifficulty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelayMiningDifficulty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayMiningDifficulty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayMiningDifficulty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelayMiningDifficulty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelayMiningDifficulty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelayMiningDifficulty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelayMiningDifficulty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelayMiningDifficulty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelayMiningDifficulty = fmt.Errorf("proto: unexpected end of group")
)
