// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/application/application.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/pokt-network/poktroll/x/shared/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Application defines the type used to store an on-chain definition and state for an application
type Application struct {
	Address                   string                             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Stake                     *types.Coin                        `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	ServiceConfigs            []*types1.ApplicationServiceConfig `protobuf:"bytes,3,rep,name=service_configs,json=serviceConfigs,proto3" json:"service_configs,omitempty"`
	DelegateeGatewayAddresses []string                           `protobuf:"bytes,4,rep,name=delegatee_gateway_addresses,json=delegateeGatewayAddresses,proto3" json:"delegatee_gateway_addresses,omitempty"`
}

func (m *Application) Reset()         { *m = Application{} }
func (m *Application) String() string { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()    {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_5933c748ae9780b4, []int{0}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Application) GetStake() *types.Coin {
	if m != nil {
		return m.Stake
	}
	return nil
}

func (m *Application) GetServiceConfigs() []*types1.ApplicationServiceConfig {
	if m != nil {
		return m.ServiceConfigs
	}
	return nil
}

func (m *Application) GetDelegateeGatewayAddresses() []string {
	if m != nil {
		return m.DelegateeGatewayAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*Application)(nil), "poktroll.application.Application")
}

func init() {
	proto.RegisterFile("poktroll/application/application.proto", fileDescriptor_5933c748ae9780b4)
}

var fileDescriptor_5933c748ae9780b4 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x4e, 0xfa, 0x40,
	0x14, 0xc6, 0x5b, 0xf8, 0xff, 0x35, 0x94, 0x44, 0x93, 0x86, 0x45, 0x41, 0xad, 0x8d, 0x0b, 0x53,
	0x17, 0xcc, 0x04, 0xf4, 0x02, 0xc0, 0xc2, 0x9d, 0x8b, 0xb2, 0x33, 0x26, 0xcd, 0xb4, 0x1d, 0xcb,
	0x84, 0xd2, 0xd7, 0x74, 0x46, 0x90, 0x5b, 0x78, 0x08, 0x8f, 0xe0, 0x21, 0x58, 0x12, 0x57, 0xae,
	0x8c, 0x81, 0x8b, 0x98, 0x32, 0x43, 0xad, 0x0b, 0x37, 0x93, 0xf7, 0xf2, 0x7d, 0xdf, 0x9b, 0xdf,
	0xbc, 0x8c, 0x71, 0x99, 0xc1, 0x54, 0xe4, 0x90, 0x24, 0x98, 0x64, 0x59, 0xc2, 0x42, 0x22, 0x18,
	0xa4, 0xd5, 0x1a, 0x65, 0x39, 0x08, 0x30, 0x5b, 0x7b, 0x1f, 0xaa, 0x68, 0x9d, 0x56, 0x0c, 0x31,
	0xec, 0x0c, 0xb8, 0xa8, 0xa4, 0xb7, 0x63, 0x87, 0xc0, 0x67, 0xc0, 0x71, 0x40, 0x38, 0xc5, 0xf3,
	0x5e, 0x40, 0x05, 0xe9, 0xe1, 0x10, 0x98, 0x9a, 0xd5, 0x69, 0x4b, 0xdd, 0x97, 0x41, 0xd9, 0x28,
	0xe9, 0xac, 0xc4, 0xe1, 0x13, 0x92, 0xd3, 0x08, 0x73, 0x9a, 0xcf, 0x59, 0x48, 0xa5, 0x7c, 0xf1,
	0x5a, 0x33, 0x9a, 0x83, 0x9f, 0xfb, 0xcd, 0xbe, 0x71, 0x48, 0xa2, 0x28, 0xa7, 0x9c, 0x5b, 0xba,
	0xa3, 0xbb, 0x8d, 0xa1, 0xf5, 0xfe, 0xd6, 0x6d, 0xa9, 0x89, 0x03, 0xa9, 0x8c, 0x45, 0xce, 0xd2,
	0xd8, 0xdb, 0x1b, 0x4d, 0x6c, 0xfc, 0xe7, 0x82, 0x4c, 0xa9, 0x55, 0x73, 0x74, 0xb7, 0xd9, 0x6f,
	0x23, 0x65, 0x2f, 0x68, 0x91, 0xa2, 0x45, 0x23, 0x60, 0xa9, 0x27, 0x7d, 0xa6, 0x67, 0x1c, 0x2b,
	0x0a, 0x3f, 0x84, 0xf4, 0x91, 0xc5, 0xdc, 0xaa, 0x3b, 0x75, 0xb7, 0xd9, 0xbf, 0x42, 0xe5, 0x52,
	0x24, 0x2d, 0xaa, 0xb0, 0x8d, 0x65, 0x64, 0xb4, 0x4b, 0x78, 0x47, 0xbc, 0xda, 0x72, 0xf3, 0xc1,
	0x38, 0x89, 0x68, 0x42, 0x63, 0x22, 0x28, 0xf5, 0x8b, 0x73, 0x41, 0x96, 0xbe, 0x22, 0xa4, 0xdc,
	0xfa, 0xe7, 0xd4, 0xdd, 0xc6, 0xf0, 0x74, 0xf5, 0x79, 0xae, 0xfd, 0xf9, 0xa0, 0x76, 0x39, 0xe0,
	0x56, 0xe6, 0x07, 0xfb, 0xf8, 0xf0, 0x6e, 0xb5, 0xb1, 0xf5, 0xf5, 0xc6, 0xd6, 0xbf, 0x36, 0xb6,
	0xfe, 0xb2, 0xb5, 0xb5, 0xf5, 0xd6, 0xd6, 0x3e, 0xb6, 0xb6, 0x76, 0x7f, 0x13, 0x33, 0x31, 0x79,
	0x0a, 0x50, 0x08, 0x33, 0x5c, 0xc0, 0x77, 0x53, 0x2a, 0x16, 0x90, 0x4f, 0x71, 0xb9, 0xf7, 0xe7,
	0x5f, 0x1f, 0x41, 0x2c, 0x33, 0xca, 0x83, 0x83, 0xdd, 0xf6, 0xaf, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xba, 0x3e, 0x38, 0x21, 0x2d, 0x02, 0x00, 0x00,
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegateeGatewayAddresses) > 0 {
		for iNdEx := len(m.DelegateeGatewayAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegateeGatewayAddresses[iNdEx])
			copy(dAtA[i:], m.DelegateeGatewayAddresses[iNdEx])
			i = encodeVarintApplication(dAtA, i, uint64(len(m.DelegateeGatewayAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServiceConfigs) > 0 {
		for iNdEx := len(m.ServiceConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApplication(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Stake != nil {
		{
			size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApplication(dAtA []byte, offset int, v uint64) int {
	offset -= sovApplication(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Stake != nil {
		l = m.Stake.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.ServiceConfigs) > 0 {
		for _, e := range m.ServiceConfigs {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if len(m.DelegateeGatewayAddresses) > 0 {
		for _, s := range m.DelegateeGatewayAddresses {
			l = len(s)
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	return n
}

func sovApplication(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApplication(x uint64) (n int) {
	return sovApplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stake == nil {
				m.Stake = &types.Coin{}
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceConfigs = append(m.ServiceConfigs, &types1.ApplicationServiceConfig{})
			if err := m.ServiceConfigs[len(m.ServiceConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateeGatewayAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateeGatewayAddresses = append(m.DelegateeGatewayAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApplication
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApplication
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApplication        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApplication = fmt.Errorf("proto: unexpected end of group")
)
