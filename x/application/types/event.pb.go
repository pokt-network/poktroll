// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/application/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/pokt-network/poktroll/x/shared/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplicationUnbondingReason int32

const (
	ApplicationUnbondingReason_APPLICATION_UNBONDING_REASON_ELECTIVE        ApplicationUnbondingReason = 0
	ApplicationUnbondingReason_APPLICATION_UNBONDING_REASON_BELOW_MIN_STAKE ApplicationUnbondingReason = 1
	ApplicationUnbondingReason_APPLICATION_UNBONDING_REASON_MIGRATION       ApplicationUnbondingReason = 2
)

var ApplicationUnbondingReason_name = map[int32]string{
	0: "APPLICATION_UNBONDING_REASON_ELECTIVE",
	1: "APPLICATION_UNBONDING_REASON_BELOW_MIN_STAKE",
	2: "APPLICATION_UNBONDING_REASON_MIGRATION",
}

var ApplicationUnbondingReason_value = map[string]int32{
	"APPLICATION_UNBONDING_REASON_ELECTIVE":        0,
	"APPLICATION_UNBONDING_REASON_BELOW_MIN_STAKE": 1,
	"APPLICATION_UNBONDING_REASON_MIGRATION":       2,
}

func (x ApplicationUnbondingReason) String() string {
	return proto.EnumName(ApplicationUnbondingReason_name, int32(x))
}

func (ApplicationUnbondingReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{0}
}

// EventApplicationStaked is emitted when an application is staked or up-staked.
type EventApplicationStaked struct {
	// The end height of the session in which the application was staked.
	SessionEndHeight int64 `protobuf:"varint,2,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The address of the application that was staked.
	ApplicationAddress string `protobuf:"bytes,3,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
	// The amount of stake.
	Stake string `protobuf:"bytes,4,opt,name=stake,proto3" json:"stake"`
}

func (m *EventApplicationStaked) Reset()         { *m = EventApplicationStaked{} }
func (m *EventApplicationStaked) String() string { return proto.CompactTextString(m) }
func (*EventApplicationStaked) ProtoMessage()    {}
func (*EventApplicationStaked) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{0}
}
func (m *EventApplicationStaked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationStaked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationStaked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationStaked.Merge(m, src)
}
func (m *EventApplicationStaked) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationStaked) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationStaked.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationStaked proto.InternalMessageInfo

func (m *EventApplicationStaked) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventApplicationStaked) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

func (m *EventApplicationStaked) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

// EventRedelegation is an event emitted whenever an application changes its
// delegatee gateways on chain. This is in response to both a DelegateToGateway
// and UndelegateFromGateway message.
type EventRedelegation struct {
	// The end height of the session in which the redelegation was committed.
	SessionEndHeight int64 `protobuf:"varint,2,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The address of the application that was redelegated.
	ApplicationAddress string `protobuf:"bytes,3,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
}

func (m *EventRedelegation) Reset()         { *m = EventRedelegation{} }
func (m *EventRedelegation) String() string { return proto.CompactTextString(m) }
func (*EventRedelegation) ProtoMessage()    {}
func (*EventRedelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{1}
}
func (m *EventRedelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRedelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventRedelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRedelegation.Merge(m, src)
}
func (m *EventRedelegation) XXX_Size() int {
	return m.Size()
}
func (m *EventRedelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRedelegation.DiscardUnknown(m)
}

var xxx_messageInfo_EventRedelegation proto.InternalMessageInfo

func (m *EventRedelegation) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventRedelegation) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

// EventTransferBegin is emitted whenever an application begins a transfer. It
// includes the source application state immediately after the transfer began.
type EventTransferBegin struct {
	SourceAddress      string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	// The end height of the session in which the transfer began.
	SessionEndHeight int64 `protobuf:"varint,4,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The height at which the transfer will complete.
	TransferEndHeight int64 `protobuf:"varint,5,opt,name=transfer_end_height,json=transferEndHeight,proto3" json:"transfer_end_height"`
	// The amount of stake being transferred.
	Stake string `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake"`
}

func (m *EventTransferBegin) Reset()         { *m = EventTransferBegin{} }
func (m *EventTransferBegin) String() string { return proto.CompactTextString(m) }
func (*EventTransferBegin) ProtoMessage()    {}
func (*EventTransferBegin) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{2}
}
func (m *EventTransferBegin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTransferBegin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventTransferBegin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTransferBegin.Merge(m, src)
}
func (m *EventTransferBegin) XXX_Size() int {
	return m.Size()
}
func (m *EventTransferBegin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTransferBegin.DiscardUnknown(m)
}

var xxx_messageInfo_EventTransferBegin proto.InternalMessageInfo

func (m *EventTransferBegin) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *EventTransferBegin) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *EventTransferBegin) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventTransferBegin) GetTransferEndHeight() int64 {
	if m != nil {
		return m.TransferEndHeight
	}
	return 0
}

func (m *EventTransferBegin) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

// EventTransferEnd is emitted whenever an application transfer is completed. It
// includes the destination application state at the time the transfer completed.
// Either EventTransferEnd or EventTransferError will be emitted corresponding to
// any given EventTransferBegin event.
type EventTransferEnd struct {
	SourceAddress      string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	// The end height of the session in which the transfer ended.
	SessionEndHeight int64 `protobuf:"varint,4,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The height at which the transfer completed.
	TransferEndHeight int64 `protobuf:"varint,5,opt,name=transfer_end_height,json=transferEndHeight,proto3" json:"transfer_end_height"`
	// The amount of stake that was transferred.
	Stake string `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake"`
}

func (m *EventTransferEnd) Reset()         { *m = EventTransferEnd{} }
func (m *EventTransferEnd) String() string { return proto.CompactTextString(m) }
func (*EventTransferEnd) ProtoMessage()    {}
func (*EventTransferEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{3}
}
func (m *EventTransferEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTransferEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventTransferEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTransferEnd.Merge(m, src)
}
func (m *EventTransferEnd) XXX_Size() int {
	return m.Size()
}
func (m *EventTransferEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTransferEnd.DiscardUnknown(m)
}

var xxx_messageInfo_EventTransferEnd proto.InternalMessageInfo

func (m *EventTransferEnd) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *EventTransferEnd) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *EventTransferEnd) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventTransferEnd) GetTransferEndHeight() int64 {
	if m != nil {
		return m.TransferEndHeight
	}
	return 0
}

func (m *EventTransferEnd) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

// EventTransferError is emitted whenever an application transfer fails. It
// includes the source application state at the time the transfer failed and
// the error message.
// Either EventTransferEnd or EventTransferError will be emitted corresponding to
// any given EventTransferBegin event.
type EventTransferError struct {
	SourceAddress      string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	// The end height of the session in which the transfer failed.
	SessionEndHeight int64  `protobuf:"varint,4,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	Error            string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// The amount of stake that failed to transfer.
	Stake string `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake"`
}

func (m *EventTransferError) Reset()         { *m = EventTransferError{} }
func (m *EventTransferError) String() string { return proto.CompactTextString(m) }
func (*EventTransferError) ProtoMessage()    {}
func (*EventTransferError) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{4}
}
func (m *EventTransferError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTransferError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventTransferError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTransferError.Merge(m, src)
}
func (m *EventTransferError) XXX_Size() int {
	return m.Size()
}
func (m *EventTransferError) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTransferError.DiscardUnknown(m)
}

var xxx_messageInfo_EventTransferError proto.InternalMessageInfo

func (m *EventTransferError) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *EventTransferError) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *EventTransferError) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventTransferError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EventTransferError) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

// EventApplicationUnbondingBegin is emitted when an application begins unbonding.
// This can be triggered by the commitment of an unstake message or by the application's
// stake dropping below the minimum. This event signals that an application has begun
// unbonding. The unbonding period is determined by the shared param,
// application_unbonding_period_sessions.
type EventApplicationUnbondingBegin struct {
	Reason ApplicationUnbondingReason `protobuf:"varint,2,opt,name=reason,proto3,enum=pocket.application.ApplicationUnbondingReason" json:"reason"`
	// The end height of the session in which the unbonding began.
	SessionEndHeight int64 `protobuf:"varint,3,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The height at which application unbonding will end.
	UnbondingEndHeight int64 `protobuf:"varint,4,opt,name=unbonding_end_height,json=unbondingEndHeight,proto3" json:"unbonding_height"`
	// The address of the application that began unbonding.
	ApplicationAddress string `protobuf:"bytes,5,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
	// The amount of stake being unbonded.
	Stake string `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake"`
}

func (m *EventApplicationUnbondingBegin) Reset()         { *m = EventApplicationUnbondingBegin{} }
func (m *EventApplicationUnbondingBegin) String() string { return proto.CompactTextString(m) }
func (*EventApplicationUnbondingBegin) ProtoMessage()    {}
func (*EventApplicationUnbondingBegin) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{5}
}
func (m *EventApplicationUnbondingBegin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationUnbondingBegin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationUnbondingBegin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationUnbondingBegin.Merge(m, src)
}
func (m *EventApplicationUnbondingBegin) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationUnbondingBegin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationUnbondingBegin.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationUnbondingBegin proto.InternalMessageInfo

func (m *EventApplicationUnbondingBegin) GetReason() ApplicationUnbondingReason {
	if m != nil {
		return m.Reason
	}
	return ApplicationUnbondingReason_APPLICATION_UNBONDING_REASON_ELECTIVE
}

func (m *EventApplicationUnbondingBegin) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventApplicationUnbondingBegin) GetUnbondingEndHeight() int64 {
	if m != nil {
		return m.UnbondingEndHeight
	}
	return 0
}

func (m *EventApplicationUnbondingBegin) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

func (m *EventApplicationUnbondingBegin) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

// EventApplicationUnbondingEnd is emitted when an application has completed
// unbonding. The unbonding period is determined by the shared param,
// application_unbonding_period_sessions.
type EventApplicationUnbondingEnd struct {
	Reason ApplicationUnbondingReason `protobuf:"varint,2,opt,name=reason,proto3,enum=pocket.application.ApplicationUnbondingReason" json:"reason"`
	// The end height of the session in which the unbonding ended.
	SessionEndHeight int64 `protobuf:"varint,3,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The height at which application unbonding ended.
	UnbondingEndHeight int64 `protobuf:"varint,4,opt,name=unbonding_end_height,json=unbondingEndHeight,proto3" json:"unbonding_height"`
	// The address of the application that completed unbonding.
	ApplicationAddress string `protobuf:"bytes,5,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
	// The amount of stake that was unbonded.
	Stake string `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake"`
}

func (m *EventApplicationUnbondingEnd) Reset()         { *m = EventApplicationUnbondingEnd{} }
func (m *EventApplicationUnbondingEnd) String() string { return proto.CompactTextString(m) }
func (*EventApplicationUnbondingEnd) ProtoMessage()    {}
func (*EventApplicationUnbondingEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{6}
}
func (m *EventApplicationUnbondingEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationUnbondingEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationUnbondingEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationUnbondingEnd.Merge(m, src)
}
func (m *EventApplicationUnbondingEnd) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationUnbondingEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationUnbondingEnd.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationUnbondingEnd proto.InternalMessageInfo

func (m *EventApplicationUnbondingEnd) GetReason() ApplicationUnbondingReason {
	if m != nil {
		return m.Reason
	}
	return ApplicationUnbondingReason_APPLICATION_UNBONDING_REASON_ELECTIVE
}

func (m *EventApplicationUnbondingEnd) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventApplicationUnbondingEnd) GetUnbondingEndHeight() int64 {
	if m != nil {
		return m.UnbondingEndHeight
	}
	return 0
}

func (m *EventApplicationUnbondingEnd) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

func (m *EventApplicationUnbondingEnd) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

// EventApplicationUnbondingCanceled is emitted when an application which was unbonding
// successfully (re-)stakes before the unbonding period has elapsed. An EventApplicationStaked
// event will also be emitted immediately after this event.
type EventApplicationUnbondingCanceled struct {
	// The end height of the session in which the unbonding was canceled.
	SessionEndHeight int64 `protobuf:"varint,2,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height"`
	// The address of the application that canceled unbonding.
	ApplicationAddress string `protobuf:"bytes,3,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
	// The amount of stake.
	Stake string `protobuf:"bytes,4,opt,name=stake,proto3" json:"stake"`
}

func (m *EventApplicationUnbondingCanceled) Reset()         { *m = EventApplicationUnbondingCanceled{} }
func (m *EventApplicationUnbondingCanceled) String() string { return proto.CompactTextString(m) }
func (*EventApplicationUnbondingCanceled) ProtoMessage()    {}
func (*EventApplicationUnbondingCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f5dfa8a062ea63, []int{7}
}
func (m *EventApplicationUnbondingCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplicationUnbondingCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplicationUnbondingCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplicationUnbondingCanceled.Merge(m, src)
}
func (m *EventApplicationUnbondingCanceled) XXX_Size() int {
	return m.Size()
}
func (m *EventApplicationUnbondingCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplicationUnbondingCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplicationUnbondingCanceled proto.InternalMessageInfo

func (m *EventApplicationUnbondingCanceled) GetSessionEndHeight() int64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

func (m *EventApplicationUnbondingCanceled) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

func (m *EventApplicationUnbondingCanceled) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

func init() {
	proto.RegisterEnum("pocket.application.ApplicationUnbondingReason", ApplicationUnbondingReason_name, ApplicationUnbondingReason_value)
	proto.RegisterType((*EventApplicationStaked)(nil), "pocket.application.EventApplicationStaked")
	proto.RegisterType((*EventRedelegation)(nil), "pocket.application.EventRedelegation")
	proto.RegisterType((*EventTransferBegin)(nil), "pocket.application.EventTransferBegin")
	proto.RegisterType((*EventTransferEnd)(nil), "pocket.application.EventTransferEnd")
	proto.RegisterType((*EventTransferError)(nil), "pocket.application.EventTransferError")
	proto.RegisterType((*EventApplicationUnbondingBegin)(nil), "pocket.application.EventApplicationUnbondingBegin")
	proto.RegisterType((*EventApplicationUnbondingEnd)(nil), "pocket.application.EventApplicationUnbondingEnd")
	proto.RegisterType((*EventApplicationUnbondingCanceled)(nil), "pocket.application.EventApplicationUnbondingCanceled")
}

func init() { proto.RegisterFile("pocket/application/event.proto", fileDescriptor_44f5dfa8a062ea63) }

var fileDescriptor_44f5dfa8a062ea63 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0x6c, 0xff, 0x44, 0x26, 0x91, 0x2c, 0x43, 0x83, 0x15, 0xcd, 0x16, 0x49, 0x34, 0x48,
	0xa4, 0x2b, 0xea, 0xdd, 0x74, 0x61, 0xc5, 0x55, 0x68, 0xc9, 0xb6, 0x68, 0xe2, 0x65, 0xb3, 0xdd,
	0x1d, 0xb7, 0x9b, 0x96, 0x99, 0x66, 0x66, 0x40, 0xfd, 0x16, 0x7e, 0x07, 0xe3, 0xc5, 0xb3, 0x1f,
	0xc2, 0x23, 0x31, 0xc6, 0x90, 0x98, 0x34, 0xa6, 0xdc, 0x7a, 0x34, 0x7e, 0x00, 0xd3, 0xd9, 0x2d,
	0x14, 0x68, 0x41, 0x82, 0x07, 0x35, 0x9c, 0xb6, 0xf3, 0x7e, 0xef, 0xcf, 0xef, 0xfd, 0xf2, 0xe6,
	0x75, 0xa0, 0xd6, 0xa2, 0x5e, 0x03, 0x0b, 0xdd, 0x6d, 0xb5, 0x9a, 0xa1, 0xe7, 0x8a, 0x90, 0x12,
	0x1d, 0x6f, 0x63, 0x22, 0x0a, 0x2d, 0x46, 0x05, 0x45, 0x28, 0xc2, 0x0b, 0x03, 0xf8, 0xf4, 0x55,
	0x8f, 0xf2, 0x4d, 0xca, 0x1d, 0xe9, 0xa1, 0x47, 0x87, 0xc8, 0x7d, 0x3a, 0x1b, 0xd0, 0x80, 0x46,
	0xf6, 0xde, 0xaf, 0xd8, 0xaa, 0x45, 0x3e, 0x7a, 0xcd, 0xe5, 0x58, 0xdf, 0x5e, 0xac, 0x61, 0xe1,
	0x2e, 0xea, 0x1e, 0x0d, 0x49, 0x8c, 0x5f, 0x8b, 0x49, 0xf0, 0xba, 0xcb, 0xb0, 0xaf, 0x73, 0xcc,
	0xb6, 0x43, 0x0f, 0xf7, 0x83, 0x87, 0x30, 0x14, 0x6f, 0x5a, 0x38, 0x2e, 0x39, 0xbb, 0x03, 0xe0,
	0x94, 0xd9, 0x63, 0x5c, 0x3c, 0x70, 0xa8, 0x08, 0xb7, 0x81, 0x7d, 0xb4, 0x0c, 0x11, 0xc7, 0x9c,
	0x87, 0x94, 0x38, 0x98, 0xf8, 0x4e, 0x1d, 0x87, 0x41, 0x5d, 0xe4, 0x94, 0x19, 0x30, 0x97, 0x34,
	0xa6, 0xba, 0xed, 0xfc, 0x10, 0xd4, 0x56, 0x63, 0x9b, 0x49, 0xfc, 0xc7, 0xd2, 0x82, 0x2c, 0x38,
	0x39, 0x50, 0xdb, 0x71, 0x7d, 0x9f, 0x61, 0xce, 0x73, 0xc9, 0x19, 0x30, 0x37, 0x66, 0xe4, 0x3e,
	0x7f, 0x5c, 0xc8, 0xc6, 0x12, 0x14, 0x23, 0xa4, 0x22, 0x58, 0x48, 0x02, 0x1b, 0x0d, 0x04, 0xc5,
	0x08, 0xca, 0xc3, 0x34, 0xef, 0x51, 0xcb, 0xa5, 0x64, 0xf0, 0x58, 0xb7, 0x9d, 0x8f, 0x0c, 0x76,
	0xf4, 0x79, 0x92, 0xba, 0x04, 0x54, 0x65, 0xf6, 0x03, 0x80, 0x13, 0xb2, 0x25, 0x1b, 0xfb, 0xb8,
	0x89, 0x03, 0x99, 0xe3, 0xaf, 0xeb, 0x26, 0x26, 0xfb, 0x55, 0x81, 0x48, 0x92, 0xad, 0x32, 0x97,
	0xf0, 0x97, 0x98, 0x19, 0x38, 0x08, 0x09, 0x7a, 0x08, 0xc7, 0x39, 0xdd, 0x62, 0x1e, 0xde, 0x2f,
	0x01, 0x4e, 0x29, 0x71, 0x39, 0xf2, 0xef, 0x6b, 0x65, 0xc1, 0x49, 0x1f, 0x73, 0x11, 0x92, 0xc3,
	0x44, 0x95, 0xd3, 0x88, 0x0e, 0x04, 0xf5, 0x53, 0x0d, 0x57, 0x2e, 0x75, 0x46, 0xe5, 0x56, 0xe0,
	0xa4, 0x88, 0x5b, 0x1c, 0x4c, 0x93, 0x96, 0x69, 0xae, 0x74, 0xdb, 0xf9, 0x61, 0xb0, 0x3d, 0xd1,
	0x37, 0x1e, 0x24, 0xda, 0x9f, 0x82, 0xcc, 0xc8, 0x29, 0x48, 0xaa, 0xa9, 0xd9, 0x2f, 0x0a, 0x54,
	0x0f, 0x09, 0x6b, 0x12, 0xff, 0x42, 0xd6, 0x73, 0xcb, 0xfa, 0xee, 0xe8, 0xbc, 0x9a, 0x8c, 0x51,
	0xf6, 0x1f, 0x0a, 0x9b, 0x85, 0x69, 0xdc, 0x6b, 0x4d, 0x4a, 0x39, 0x66, 0x47, 0x87, 0xdf, 0x55,
	0xe9, 0xa7, 0x02, 0xb5, 0xa3, 0x5b, 0x75, 0x83, 0xd4, 0x28, 0xf1, 0x43, 0x12, 0x44, 0x37, 0xdc,
	0x86, 0x19, 0x86, 0x5d, 0x4e, 0x89, 0xec, 0x71, 0xfc, 0x5e, 0xa1, 0x70, 0xfc, 0xbf, 0xa2, 0x30,
	0x2c, 0xdc, 0x96, 0x51, 0x06, 0xec, 0xb6, 0xf3, 0x71, 0x06, 0x3b, 0xfe, 0x8e, 0xe8, 0x3c, 0x79,
	0xc6, 0xce, 0x1f, 0xc1, 0xec, 0x56, 0xbf, 0xd8, 0x71, 0x05, 0xb3, 0xdd, 0x76, 0x5e, 0x3d, 0xc0,
	0xe3, 0x2c, 0x68, 0xdf, 0x72, 0xea, 0xae, 0x4c, 0x9f, 0x67, 0xf3, 0x67, 0x4e, 0xdc, 0xfc, 0x3f,
	0x14, 0x78, 0x7d, 0xa4, 0xec, 0xbd, 0xfb, 0x7f, 0x21, 0xfa, 0x9f, 0x17, 0xfd, 0x1b, 0x80, 0x37,
	0x46, 0x8a, 0xbe, 0xe4, 0x12, 0x0f, 0x37, 0xff, 0xdd, 0xc7, 0xc4, 0xfc, 0x7b, 0x00, 0xa7, 0x47,
	0x0f, 0x04, 0xba, 0x0d, 0x6f, 0x16, 0xd7, 0xd7, 0x57, 0xad, 0xa5, 0x62, 0xd5, 0x2a, 0x97, 0x9c,
	0x8d, 0x92, 0x51, 0x2e, 0x2d, 0x5b, 0xa5, 0x15, 0xc7, 0x36, 0x8b, 0x95, 0x72, 0xc9, 0x31, 0x57,
	0xcd, 0xa5, 0xaa, 0xf5, 0xcc, 0x54, 0x13, 0xe8, 0x2e, 0xbc, 0x73, 0xa2, 0xab, 0x61, 0xae, 0x96,
	0x9f, 0x3b, 0x6b, 0x56, 0xc9, 0xa9, 0x54, 0x8b, 0x4f, 0x4d, 0x15, 0xa0, 0x79, 0x78, 0xeb, 0xc4,
	0x88, 0x35, 0x6b, 0xc5, 0x96, 0x90, 0xaa, 0x18, 0xf6, 0xa7, 0x8e, 0x06, 0x76, 0x3a, 0x1a, 0xd8,
	0xed, 0x68, 0xe0, 0x7b, 0x47, 0x03, 0x6f, 0xf7, 0xb4, 0xc4, 0xce, 0x9e, 0x96, 0xd8, 0xdd, 0xd3,
	0x12, 0x2f, 0x1e, 0x04, 0xa1, 0xa8, 0x6f, 0xd5, 0x0a, 0x1e, 0xdd, 0xd4, 0x5b, 0xb4, 0x21, 0x16,
	0x08, 0x16, 0xaf, 0x28, 0x6b, 0xc8, 0x03, 0xa3, 0xcd, 0xa6, 0xfe, 0xfa, 0xf8, 0x0b, 0xb1, 0x96,
	0x91, 0x4f, 0xc4, 0xfb, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xfb, 0x45, 0xd0, 0xe6, 0x0a,
	0x00, 0x00,
}

func (m *EventApplicationStaked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationStaked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationStaked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EventRedelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRedelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRedelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EventTransferBegin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTransferBegin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTransferBegin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x32
	}
	if m.TransferEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TransferEndHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTransferEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTransferEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTransferEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x32
	}
	if m.TransferEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TransferEndHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTransferError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTransferError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTransferError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventApplicationUnbondingBegin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationUnbondingBegin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationUnbondingBegin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnbondingEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UnbondingEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Reason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EventApplicationUnbondingEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationUnbondingEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationUnbondingEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnbondingEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UnbondingEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Reason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EventApplicationUnbondingCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplicationUnbondingCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplicationUnbondingCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionEndHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventApplicationStaked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventRedelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventTransferBegin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	if m.TransferEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.TransferEndHeight))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventTransferEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	if m.TransferEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.TransferEndHeight))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventTransferError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventApplicationUnbondingBegin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovEvent(uint64(m.Reason))
	}
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	if m.UnbondingEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.UnbondingEndHeight))
	}
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventApplicationUnbondingEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovEvent(uint64(m.Reason))
	}
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	if m.UnbondingEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.UnbondingEndHeight))
	}
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventApplicationUnbondingCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		n += 1 + sovEvent(uint64(m.SessionEndHeight))
	}
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventApplicationStaked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationStaked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationStaked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRedelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRedelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRedelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTransferBegin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTransferBegin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTransferBegin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferEndHeight", wireType)
			}
			m.TransferEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTransferEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTransferEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTransferEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferEndHeight", wireType)
			}
			m.TransferEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTransferError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTransferError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTransferError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplicationUnbondingBegin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationUnbondingBegin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationUnbondingBegin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= ApplicationUnbondingReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEndHeight", wireType)
			}
			m.UnbondingEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplicationUnbondingEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationUnbondingEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationUnbondingEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= ApplicationUnbondingReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEndHeight", wireType)
			}
			m.UnbondingEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplicationUnbondingCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplicationUnbondingCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplicationUnbondingCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
