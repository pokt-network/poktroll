// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/application/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_sortkeys "github.com/cosmos/gogoproto/sortkeys"
	types1 "github.com/pokt-network/poktroll/x/shared/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Application represents the onchain definition and state of an application
type Application struct {
	// Bech32 address of the application
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Total amount of staked uPOKT
	Stake *types.Coin `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	// CRITICAL: Must contain EXACTLY ONE service config
	// - Enforces a single service configuration per application to prevent over-servicing.
	// - Field is repeated for legacy reasons and potential future compatibility.
	// - References for rationale:
	//   - https://github.com/pokt-network/poktroll/pull/750#discussion_r1735025033
	//   - https://www.notion.so/buildwithgrove/Off-chain-Application-Stake-Tracking-6a8bebb107db4f7f9dc62cbe7ba555f7
	ServiceConfigs []*types1.ApplicationServiceConfig `protobuf:"bytes,3,rep,name=service_configs,json=serviceConfigs,proto3" json:"service_configs,omitempty"`
	// TODO_MAINNET_MIGRATION(@bryanchriswhite): Rename `delegatee_gateway_addresses` to `gateway_addresses_delegated_to` for better clarity and consistency.
	// - Update all related configs, comments, variables, and function names throughout the codebase to reflect this change.
	// - This field is a non-nullable list of Bech32-encoded delegatee Gateway addresses.
	DelegateeGatewayAddresses []string `protobuf:"bytes,4,rep,name=delegatee_gateway_addresses,json=delegateeGatewayAddresses,proto3" json:"delegatee_gateway_addresses,omitempty"`
	// Mapping of session end heights to gateways being undelegated from
	// - Key: Height of the last block of the session when the undelegation transaction was committed
	// - Value: List of gateways being undelegated from at that session end height
	// TODO_DOCUMENT(@red-0ne): Document the complete flow and rationale behind this mapping.
	// - Ensure the documentation explains why tracking pending undelegations by session end height is necessary.
	// - See: https://github.com/pokt-network/poktroll/issues/476#issuecomment-2052639906 for context and examples.
	PendingUndelegations map[uint64]UndelegatingGatewayList `protobuf:"bytes,5,rep,name=pending_undelegations,json=pendingUndelegations,proto3" json:"pending_undelegations" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Session end height when application initiated unstaking (0 if not unstaking)
	UnstakeSessionEndHeight uint64 `protobuf:"varint,6,opt,name=unstake_session_end_height,json=unstakeSessionEndHeight,proto3" json:"unstake_session_end_height,omitempty"`
	// Information about pending application transfers
	PendingTransfer *PendingApplicationTransfer `protobuf:"bytes,7,opt,name=pending_transfer,json=pendingTransfer,proto3" json:"pending_transfer,omitempty"`
	// service_usage_metrics tracks the onchain services consumed by this application.
	ServiceUsageMetrics map[string]*types1.ServiceUsageMetrics `protobuf:"bytes,8,rep,name=service_usage_metrics,json=serviceUsageMetrics,proto3" json:"service_usage_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Application) Reset()         { *m = Application{} }
func (m *Application) String() string { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()    {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_17caf8b8f14e547c, []int{0}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Application) GetStake() *types.Coin {
	if m != nil {
		return m.Stake
	}
	return nil
}

func (m *Application) GetServiceConfigs() []*types1.ApplicationServiceConfig {
	if m != nil {
		return m.ServiceConfigs
	}
	return nil
}

func (m *Application) GetDelegateeGatewayAddresses() []string {
	if m != nil {
		return m.DelegateeGatewayAddresses
	}
	return nil
}

func (m *Application) GetPendingUndelegations() map[uint64]UndelegatingGatewayList {
	if m != nil {
		return m.PendingUndelegations
	}
	return nil
}

func (m *Application) GetUnstakeSessionEndHeight() uint64 {
	if m != nil {
		return m.UnstakeSessionEndHeight
	}
	return 0
}

func (m *Application) GetPendingTransfer() *PendingApplicationTransfer {
	if m != nil {
		return m.PendingTransfer
	}
	return nil
}

func (m *Application) GetServiceUsageMetrics() map[string]*types1.ServiceUsageMetrics {
	if m != nil {
		return m.ServiceUsageMetrics
	}
	return nil
}

// UndelegatingGatewayList is used as the Value of `pending_undelegations`.
// It is required to store a repeated list of strings as a map value.
type UndelegatingGatewayList struct {
	GatewayAddresses []string `protobuf:"bytes,2,rep,name=gateway_addresses,json=gatewayAddresses,proto3" json:"gateway_addresses,omitempty"`
}

func (m *UndelegatingGatewayList) Reset()         { *m = UndelegatingGatewayList{} }
func (m *UndelegatingGatewayList) String() string { return proto.CompactTextString(m) }
func (*UndelegatingGatewayList) ProtoMessage()    {}
func (*UndelegatingGatewayList) Descriptor() ([]byte, []int) {
	return fileDescriptor_17caf8b8f14e547c, []int{1}
}
func (m *UndelegatingGatewayList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegatingGatewayList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UndelegatingGatewayList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegatingGatewayList.Merge(m, src)
}
func (m *UndelegatingGatewayList) XXX_Size() int {
	return m.Size()
}
func (m *UndelegatingGatewayList) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegatingGatewayList.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegatingGatewayList proto.InternalMessageInfo

func (m *UndelegatingGatewayList) GetGatewayAddresses() []string {
	if m != nil {
		return m.GatewayAddresses
	}
	return nil
}

// PendingTransfer is used to store the details of a pending transfer.
// It is only intended to be used inside of an Application object.
type PendingApplicationTransfer struct {
	DestinationAddress string `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	SessionEndHeight   uint64 `protobuf:"varint,2,opt,name=session_end_height,json=sessionEndHeight,proto3" json:"session_end_height,omitempty"`
}

func (m *PendingApplicationTransfer) Reset()         { *m = PendingApplicationTransfer{} }
func (m *PendingApplicationTransfer) String() string { return proto.CompactTextString(m) }
func (*PendingApplicationTransfer) ProtoMessage()    {}
func (*PendingApplicationTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_17caf8b8f14e547c, []int{2}
}
func (m *PendingApplicationTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingApplicationTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PendingApplicationTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingApplicationTransfer.Merge(m, src)
}
func (m *PendingApplicationTransfer) XXX_Size() int {
	return m.Size()
}
func (m *PendingApplicationTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingApplicationTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_PendingApplicationTransfer proto.InternalMessageInfo

func (m *PendingApplicationTransfer) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *PendingApplicationTransfer) GetSessionEndHeight() uint64 {
	if m != nil {
		return m.SessionEndHeight
	}
	return 0
}

// Undelegation represents a connection between an application and a gateway that
// is in the process of being removed.
//
// This record is stored in the undelegation index
// and used to track and process pending undelegations after the unbonding period has elapsed.
type PendingUndelegation struct {
	// Address of the application that is undelegating from the gateway.
	ApplicationAddress string `protobuf:"bytes,1,opt,name=application_address,json=applicationAddress,proto3" json:"application_address,omitempty"`
	// Address of the gateway that the application is undelegating from.
	GatewayAddress string `protobuf:"bytes,2,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
}

func (m *PendingUndelegation) Reset()         { *m = PendingUndelegation{} }
func (m *PendingUndelegation) String() string { return proto.CompactTextString(m) }
func (*PendingUndelegation) ProtoMessage()    {}
func (*PendingUndelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_17caf8b8f14e547c, []int{3}
}
func (m *PendingUndelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingUndelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PendingUndelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingUndelegation.Merge(m, src)
}
func (m *PendingUndelegation) XXX_Size() int {
	return m.Size()
}
func (m *PendingUndelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingUndelegation.DiscardUnknown(m)
}

var xxx_messageInfo_PendingUndelegation proto.InternalMessageInfo

func (m *PendingUndelegation) GetApplicationAddress() string {
	if m != nil {
		return m.ApplicationAddress
	}
	return ""
}

func (m *PendingUndelegation) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Application)(nil), "pocket.application.Application")
	proto.RegisterMapType((map[uint64]UndelegatingGatewayList)(nil), "pocket.application.Application.PendingUndelegationsEntry")
	proto.RegisterMapType((map[string]*types1.ServiceUsageMetrics)(nil), "pocket.application.Application.ServiceUsageMetricsEntry")
	proto.RegisterType((*UndelegatingGatewayList)(nil), "pocket.application.UndelegatingGatewayList")
	proto.RegisterType((*PendingApplicationTransfer)(nil), "pocket.application.PendingApplicationTransfer")
	proto.RegisterType((*PendingUndelegation)(nil), "pocket.application.PendingUndelegation")
}

func init() { proto.RegisterFile("pocket/application/types.proto", fileDescriptor_17caf8b8f14e547c) }

var fileDescriptor_17caf8b8f14e547c = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x24, 0x6d, 0xe9, 0x56, 0x6a, 0xc3, 0xb6, 0x55, 0x9d, 0x14, 0x99, 0x28, 0x17,
	0x22, 0x41, 0x6d, 0xb5, 0x70, 0x28, 0x70, 0x4a, 0xaa, 0x0a, 0x2a, 0x81, 0x54, 0xb9, 0xf4, 0x00,
	0x42, 0xb2, 0x1c, 0x7b, 0xeb, 0x2c, 0x49, 0x77, 0x2d, 0xcf, 0xa6, 0x25, 0x37, 0x1e, 0x81, 0x0b,
	0x4f, 0xc0, 0x2b, 0xf0, 0x10, 0x3d, 0x56, 0x9c, 0x7a, 0x42, 0x28, 0x7d, 0x11, 0xe4, 0xdd, 0x35,
	0x75, 0xf3, 0x07, 0x7a, 0x89, 0xbc, 0xfe, 0xe6, 0x9b, 0xf9, 0x65, 0x66, 0xb4, 0x46, 0x56, 0xcc,
	0x83, 0x1e, 0x11, 0x8e, 0x1f, 0xc7, 0x7d, 0x1a, 0xf8, 0x82, 0x72, 0xe6, 0x88, 0x61, 0x4c, 0xc0,
	0x8e, 0x13, 0x2e, 0x38, 0xc6, 0x4a, 0xb7, 0x73, 0x7a, 0x6d, 0x2d, 0xe2, 0x11, 0x97, 0xb2, 0x93,
	0x3e, 0xa9, 0xc8, 0x9a, 0x15, 0x70, 0x38, 0xe5, 0xe0, 0x74, 0x7c, 0x20, 0xce, 0xd9, 0x76, 0x87,
	0x08, 0x7f, 0xdb, 0x09, 0x38, 0x65, 0x5a, 0xaf, 0x2a, 0xdd, 0x53, 0x46, 0x75, 0xd0, 0xd2, 0xa6,
	0x86, 0x80, 0xae, 0x9f, 0x90, 0xd0, 0x01, 0x92, 0x9c, 0xd1, 0x80, 0x28, 0xb1, 0xf1, 0x65, 0x01,
	0x2d, 0xb5, 0x6e, 0xaa, 0xe3, 0x1d, 0xb4, 0xe0, 0x87, 0x61, 0x42, 0x00, 0x4c, 0xa3, 0x6e, 0x34,
	0x17, 0xdb, 0xe6, 0xcf, 0x1f, 0x5b, 0x6b, 0x3a, 0x5f, 0x4b, 0x29, 0x47, 0x22, 0xa1, 0x2c, 0x72,
	0xb3, 0x40, 0xec, 0xa0, 0x39, 0x10, 0x7e, 0x8f, 0x98, 0xc5, 0xba, 0xd1, 0x5c, 0xda, 0xa9, 0xda,
	0x3a, 0x3c, 0x65, 0xb5, 0x35, 0xab, 0xbd, 0xc7, 0x29, 0x73, 0x55, 0x1c, 0x3e, 0x44, 0x2b, 0x9a,
	0xc2, 0x0b, 0x38, 0x3b, 0xa1, 0x11, 0x98, 0xa5, 0x7a, 0xa9, 0xb9, 0xb4, 0xf3, 0xc8, 0xd6, 0x0d,
	0x51, 0xac, 0x76, 0x8e, 0xec, 0x48, 0x19, 0xf6, 0x64, 0xbc, 0xbb, 0x0c, 0xf9, 0x23, 0xe0, 0x8f,
	0x68, 0x33, 0x24, 0x7d, 0x12, 0xf9, 0x82, 0x10, 0x2f, 0xfd, 0x3d, 0xf7, 0x87, 0x9e, 0xe6, 0x23,
	0x60, 0x96, 0xeb, 0xa5, 0xe6, 0x62, 0xfb, 0xc1, 0xc5, 0xaf, 0x87, 0x85, 0x99, 0x7f, 0xa7, 0xfa,
	0x37, 0xc1, 0x2b, 0xe5, 0x6f, 0x65, 0x76, 0x2c, 0xd0, 0x7a, 0x4c, 0x58, 0x48, 0x59, 0xe4, 0x0d,
	0x98, 0x0e, 0xa3, 0x9c, 0x81, 0x39, 0x27, 0xa9, 0x9f, 0xdb, 0x93, 0x63, 0xcc, 0xa3, 0xdb, 0x87,
	0xca, 0x7c, 0x9c, 0xf7, 0xee, 0x33, 0x91, 0x0c, 0xdb, 0xe5, 0x14, 0xc9, 0x5d, 0x8b, 0xa7, 0x04,
	0xe0, 0x97, 0xa8, 0x36, 0x60, 0xb2, 0x61, 0x1e, 0x10, 0x00, 0xca, 0x99, 0x47, 0x58, 0xe8, 0x75,
	0x09, 0x8d, 0xba, 0xc2, 0x9c, 0xaf, 0x1b, 0xcd, 0xb2, 0xbb, 0xa1, 0x23, 0x8e, 0x54, 0xc0, 0x3e,
	0x0b, 0x5f, 0x4b, 0x19, 0xbf, 0x47, 0x95, 0x0c, 0x59, 0x24, 0x3e, 0x83, 0x13, 0x92, 0x98, 0x0b,
	0x72, 0x3c, 0xf6, 0x34, 0x5a, 0x4d, 0x98, 0x83, 0x7e, 0xa7, 0x5d, 0xee, 0x8a, 0xce, 0x93, 0xbd,
	0xc0, 0x7d, 0xb4, 0x9e, 0x4d, 0x6f, 0x00, 0x7e, 0x44, 0xbc, 0x53, 0x22, 0x12, 0x1a, 0x80, 0x79,
	0x4f, 0x76, 0x63, 0xf7, 0x7f, 0xdd, 0xd0, 0x93, 0x3c, 0x4e, 0xbd, 0x6f, 0x95, 0x55, 0x36, 0xc3,
	0x5d, 0x85, 0x49, 0xa5, 0x26, 0x50, 0x75, 0x66, 0xfb, 0x70, 0x05, 0x95, 0x7a, 0x64, 0x28, 0x37,
	0xb5, 0xec, 0xa6, 0x8f, 0xb8, 0x85, 0xe6, 0xce, 0xfc, 0xfe, 0x20, 0xdb, 0xc5, 0xc7, 0xd3, 0x60,
	0x6e, 0x12, 0xb1, 0x48, 0xcf, 0xfa, 0x0d, 0x05, 0xe1, 0x2a, 0xe7, 0x8b, 0xe2, 0xae, 0x51, 0xfb,
	0x84, 0xcc, 0x59, 0x98, 0xf9, 0xa2, 0x8b, 0xaa, 0xe8, 0xee, 0xed, 0xa2, 0x8d, 0xb1, 0x2d, 0x9e,
	0x92, 0x29, 0x57, 0xab, 0x11, 0xa2, 0x8d, 0x19, 0x44, 0xf8, 0x00, 0xdd, 0x9f, 0x5c, 0xe6, 0xe2,
	0x1d, 0x96, 0xb9, 0x12, 0x8d, 0xed, 0x70, 0xe3, 0x9b, 0x81, 0x6a, 0xb3, 0xa7, 0x8c, 0x0f, 0xd0,
	0x6a, 0x48, 0x40, 0x50, 0x26, 0x5f, 0x7b, 0x77, 0xbd, 0x03, 0x70, 0xce, 0xa4, 0x15, 0xfc, 0x04,
	0xe1, 0x29, 0xfb, 0x5a, 0x94, 0x33, 0xaa, 0xc0, 0xd8, 0xa2, 0x36, 0xbe, 0x1b, 0x68, 0x75, 0xca,
	0x80, 0x53, 0xa0, 0xdc, 0xcc, 0xee, 0x0e, 0x94, 0x33, 0x65, 0x40, 0x2d, 0xb4, 0x32, 0xd6, 0x45,
	0x49, 0xf3, 0xaf, 0x34, 0xcb, 0xb7, 0xfb, 0xd7, 0x76, 0x2f, 0x46, 0x96, 0x71, 0x39, 0xb2, 0x8c,
	0xab, 0x91, 0x65, 0xfc, 0x1e, 0x59, 0xc6, 0xd7, 0x6b, 0xab, 0x70, 0x79, 0x6d, 0x15, 0xae, 0xae,
	0xad, 0xc2, 0x87, 0x67, 0x11, 0x15, 0xdd, 0x41, 0xc7, 0x0e, 0xf8, 0xa9, 0x13, 0xf3, 0x9e, 0xd8,
	0x62, 0x44, 0x9c, 0xf3, 0xa4, 0x27, 0x0f, 0x09, 0xef, 0xf7, 0x9d, 0xcf, 0x93, 0x9f, 0x80, 0xce,
	0xbc, 0xbc, 0x81, 0x9f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xa9, 0x22, 0x0a, 0x25, 0x06,
	0x00, 0x00,
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceUsageMetrics) > 0 {
		keysForServiceUsageMetrics := make([]string, 0, len(m.ServiceUsageMetrics))
		for k := range m.ServiceUsageMetrics {
			keysForServiceUsageMetrics = append(keysForServiceUsageMetrics, string(k))
		}
		github_com_cosmos_gogoproto_sortkeys.Strings(keysForServiceUsageMetrics)
		for iNdEx := len(keysForServiceUsageMetrics) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ServiceUsageMetrics[string(keysForServiceUsageMetrics[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForServiceUsageMetrics[iNdEx])
			copy(dAtA[i:], keysForServiceUsageMetrics[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForServiceUsageMetrics[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.PendingTransfer != nil {
		{
			size, err := m.PendingTransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UnstakeSessionEndHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnstakeSessionEndHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PendingUndelegations) > 0 {
		keysForPendingUndelegations := make([]uint64, 0, len(m.PendingUndelegations))
		for k := range m.PendingUndelegations {
			keysForPendingUndelegations = append(keysForPendingUndelegations, uint64(k))
		}
		github_com_cosmos_gogoproto_sortkeys.Uint64s(keysForPendingUndelegations)
		for iNdEx := len(keysForPendingUndelegations) - 1; iNdEx >= 0; iNdEx-- {
			v := m.PendingUndelegations[uint64(keysForPendingUndelegations[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForPendingUndelegations[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DelegateeGatewayAddresses) > 0 {
		for iNdEx := len(m.DelegateeGatewayAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegateeGatewayAddresses[iNdEx])
			copy(dAtA[i:], m.DelegateeGatewayAddresses[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DelegateeGatewayAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServiceConfigs) > 0 {
		for iNdEx := len(m.ServiceConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Stake != nil {
		{
			size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegatingGatewayList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegatingGatewayList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegatingGatewayList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayAddresses) > 0 {
		for iNdEx := len(m.GatewayAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GatewayAddresses[iNdEx])
			copy(dAtA[i:], m.GatewayAddresses[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.GatewayAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *PendingApplicationTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingApplicationTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingApplicationTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionEndHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SessionEndHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingUndelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingUndelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingUndelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationAddress) > 0 {
		i -= len(m.ApplicationAddress)
		copy(dAtA[i:], m.ApplicationAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ApplicationAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Stake != nil {
		l = m.Stake.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ServiceConfigs) > 0 {
		for _, e := range m.ServiceConfigs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DelegateeGatewayAddresses) > 0 {
		for _, s := range m.DelegateeGatewayAddresses {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PendingUndelegations) > 0 {
		for k, v := range m.PendingUndelegations {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + l + sovTypes(uint64(l))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.UnstakeSessionEndHeight != 0 {
		n += 1 + sovTypes(uint64(m.UnstakeSessionEndHeight))
	}
	if m.PendingTransfer != nil {
		l = m.PendingTransfer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ServiceUsageMetrics) > 0 {
		for k, v := range m.ServiceUsageMetrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UndelegatingGatewayList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GatewayAddresses) > 0 {
		for _, s := range m.GatewayAddresses {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PendingApplicationTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SessionEndHeight != 0 {
		n += 1 + sovTypes(uint64(m.SessionEndHeight))
	}
	return n
}

func (m *PendingUndelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stake == nil {
				m.Stake = &types.Coin{}
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceConfigs = append(m.ServiceConfigs, &types1.ApplicationServiceConfig{})
			if err := m.ServiceConfigs[len(m.ServiceConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateeGatewayAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateeGatewayAddresses = append(m.DelegateeGatewayAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUndelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingUndelegations == nil {
				m.PendingUndelegations = make(map[uint64]UndelegatingGatewayList)
			}
			var mapkey uint64
			mapvalue := &UndelegatingGatewayList{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UndelegatingGatewayList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PendingUndelegations[mapkey] = *mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeSessionEndHeight", wireType)
			}
			m.UnstakeSessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakeSessionEndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingTransfer == nil {
				m.PendingTransfer = &PendingApplicationTransfer{}
			}
			if err := m.PendingTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceUsageMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceUsageMetrics == nil {
				m.ServiceUsageMetrics = make(map[string]*types1.ServiceUsageMetrics)
			}
			var mapkey string
			var mapvalue *types1.ServiceUsageMetrics
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types1.ServiceUsageMetrics{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceUsageMetrics[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegatingGatewayList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegatingGatewayList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegatingGatewayList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddresses = append(m.GatewayAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingApplicationTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingApplicationTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingApplicationTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			m.SessionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionEndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingUndelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingUndelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingUndelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
