ibc_relayer_dockerfile = """
FROM golang:1.23.0

RUN apt-get update && apt-get install -y wget

# Install hermes IBC relayer CLI.
RUN mkdir -p /root/.hermes/bin
WORKDIR /usr/local
RUN wget https://github.com/informalsystems/hermes/releases/download/v1.10.3/hermes-v1.10.3-x86_64-unknown-linux-gnu.tar.gz
RUN tar -C /root/.hermes/bin/ -vxf /usr/local/hermes-v1.10.3-x86_64-unknown-linux-gnu.tar.gz

ENTRYPOINT ["/root/.hermes/bin/hermes"]
CMD ["start"]
"""

agoric_dockerfile = """
FROM ghcr.io/agoric/agoric-3-proposals:latest

# Update .bashrc
RUN grep -qF 'env_setup.sh' /root/.bashrc || echo "source /usr/src/upgrade-test-scripts/env_setup.sh" >> /root/.bashrc
RUN grep -qF 'printKeys' /root/.bashrc || echo "printKeys" >> /root/.bashrc

## Install Go v1.23.0
#RUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz
#RUN rm -rf /usr/local/go && tar -C /usr/local -xzf go*.tar.gz
#RUN echo 'export PATH=$PATH:/usr/local/go/bin' >> /root/.bashrc
#RUN echo 'export GOPATH=/usr/local/go' >> /root/.bashrc
#
## Install Debugging Tools
#RUN source /root/.bashrc && go install github.com/go-delve/delve/cmd/dlv@v1.23.0
#RUN apt update && apt install -y gdbserver gdb
#
## Clone and build Agoric SDK for local debugging source
#RUN git clone https://github.com/agoric/agoric-sdk.git --branch=v0.35.0-u19.2 /usr/src/agoric-sdk2
#WORKDIR /usr/src/agoric-sdk2/golang/cosmos
#RUN yarn add node-addon-api
#RUN . /root/.bashrc && go mod tidy
#RUN . /root/.bashrc && make all
#RUN cp ./build/agd /usr/local/bin/agd
#
## Reset the working directory
#WORKDIR /usr/src/upgrade-test-scripts
"""


# pocketdex_disabled_resource creates a tilt resource that prints a message indicating
# that the indexer is disabled and how to enable it.
def ibc_disabled_resource(reason):
    local_resource("⚠️ IBC Disabled",
                   "echo '{}'".format(reason),
                   labels=["IBC"])


def check_and_load_ibc(ibc_config):
    if ibc_config["enabled"]:
        load_ibc_resources(ibc_config)
    else:
        ibc_disabled_resource(
            "Localnet IBC resources disabled. Set `ibc.enabled` to `true` in `localnet_config.yaml` to enable them.")


def check_and_load_agoric(ibc_config):
    if ibc_config["relay_pairs_enabled"]["pocket-agoriclocal"]:
        docker_build(
            "agoric",
            context=os.path.join(".", "localnet", "agoric"),  # needs any folder, doesn't matter
            dockerfile_contents=agoric_dockerfile
        )

        k8s_yaml(helm(
            os.path.join("localnet", "agoric"),
            name="agoric",
            values=os.path.join("localnet", "kubernetes", "values-agoric.yaml"),  # Only files go here
        ))

        k8s_resource(
            'agoric',
            new_name="Agoric Local Node",
            labels=["IBC"],
            port_forwards=[
                "46657:26657",
                "11090:9090",
                "40009:40009"
            ],
        )


def pair_pretty(pair):
    chain_a_id, chain_b_id = pair.split("-")
    return chain_a_id.title() + "->" + chain_b_id.title()


def load_ibc_relayer_server_resources(pair):
    chain_a_id, chain_b_id = pair.split("-")
    release_name = pair + "-daemon-ibc-relayer"
    pair_ibc_setup_dep = pair_pretty(pair) + " IBC Setup"

    if chain_a_id == "pocket":
        resource_deps = [
            "validator",
            chain_b_id.title() + " Local Node",
            pair_ibc_setup_dep,
        ]
    elif chain_b_id == "pocket":
        resource_deps = [
            "validator",
            chain_a_id.title() + " Local Node",
            pair_ibc_setup_dep,
        ]
    else:
        resource_deps = [
            chain_a_id.title() + " Local Node",
            chain_b_id.title() + " Local Node",
            pair_ibc_setup_dep,
        ]

    k8s_yaml(helm(
        os.path.join("localnet", "ibc-relayer"),
        name=release_name,
        values=[
            os.path.join("localnet", "kubernetes", "values-ibc-relayer-daemon.yaml"),
            os.path.join("localnet", "kubernetes", "values-ibc-relayer-config-" + pair + ".yaml"),
        ],
        set=[
            "chain_a_id=" + chain_a_id,
            "chain_b_id=" + chain_b_id
        ],
    ))

    k8s_resource(
        release_name,
        new_name=pair_pretty(pair) + " IBC Relayer",
        labels=["IBC"],
        resource_deps=resource_deps,
    )


def load_ibc_relayer_setup_resource(pair):
    chain_a_id, chain_b_id = pair.split("-")
    release_name = pair + "-cli-ibc-relayer"
    if chain_a_id == "pocket":
        resource_deps = [
            "validator",
            chain_b_id.title() + " Local Node",
        ]
    elif chain_b_id == "pocket":
        resource_deps = [
            "validator",
            chain_a_id.title() + " Local Node",
        ]
    else:
        resource_deps = [
            chain_a_id.title() + " Local Node",
            chain_b_id.title() + " Local Node",
        ]

    k8s_yaml(helm(
        os.path.join("localnet", "ibc-relayer"),
        name=release_name,
        values=[
            os.path.join("localnet", "kubernetes", "values-ibc-relayer-cli.yaml"),
            os.path.join("localnet", "kubernetes", "values-ibc-relayer-config-" + pair + ".yaml"),
        ],
        set=[
            "chain_a_id=" + chain_a_id,
            "chain_b_id=" + chain_b_id
        ],
    ))

    k8s_resource(
        workload=release_name,
        new_name=pair_pretty(pair) + " IBC Setup",
        labels=["IBC"],
        trigger_mode=TRIGGER_MODE_MANUAL,
        resource_deps=resource_deps,
    )


def load_ibc_relayer(pair):
    load_ibc_relayer_server_resources(pair)
    load_ibc_relayer_setup_resource(pair)


def load_ibc_resources(ibc_config):
    check_and_load_agoric(ibc_config)

    if len(ibc_config["relay_pairs_enabled"]) > 0:
        docker_build(
            "ibc-relayer",
            context=os.path.join(".", "localnet", "ibc-relayer"),  # needs any folder, doesn't matter
            dockerfile_contents=ibc_relayer_dockerfile)

    for pair, enabled in ibc_config["relay_pairs_enabled"].items():
        if enabled:
            load_ibc_relayer(pair)
