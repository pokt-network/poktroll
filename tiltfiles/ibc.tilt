load("ext://helm_resource", "helm_resource", "helm_repo")

ibc_relayer_dockerfile_path = os.path.join(".", "localnet", "dockerfiles", "ibc-relayer.dockerfile")
agoric_dockerfile_path = os.path.join(".", "localnet", "dockerfiles", "agoric-validator.dockerfile")

# ⚠️ IBC Disabled Resource
# - Creates a Tilt resource that prints a message indicating IBC is disabled
# - Shows how to enable it
def ibc_disabled_resource(reason):
    local_resource("⚠️ IBC Disabled",
                   "echo '{}'".format(reason),
                   labels=["IBC"])


# Check and Load IBC
# - Loads IBC resources if enabled in config
# - Otherwise, creates a disabled resource with instructions
def check_and_load_ibc(chart_prefix, ibc_config):
    if ibc_config["enabled"]:
        load_ibc_resources(chart_prefix, ibc_config)
    else:
        ibc_disabled_resource(
            "Localnet IBC resources disabled. Set `ibc.enabled` to `true` in `localnet_config.yaml` to enable them.")


# Check and Load Agoric
# - If the pocket-agoriclocal relay pair is enabled:
#   - Builds Agoric docker image
#   - Deploys Agoric via Helm/k8s
#   - Sets up Agoric k8s resource with port-forwards
def check_and_load_agoric(chart_prefix, ibc_config):
    if ibc_config["relay_pairs_enabled"].get("pocket-agoriclocal", False):
        docker_build(
            "agoric",
            context=os.path.join(".", "localnet", "kubernetes"),  # needs any folder, less context is faster
            dockerfile=agoric_dockerfile_path
        )

        # Deploy helm chart
        helm_resource(
            "agoric-validator",
            chart_prefix + "agoric-validator",
            flags=[
                "--values=./localnet/kubernetes/values-agoric.yaml",
            ],
            image_deps=["agoric"],
            image_keys=[("image.repository", "image.tag")],
        )

        # Update k8s resource with new name, lebels, and port-forwards
        k8s_resource(
            "agoric-validator",
            # TODO_IN_THIS_COMMIT: consider extracting to const
            new_name="Agoriclocal Validator",
            labels=["IBC"],
            port_forwards=[
                "46657:26657",
                "11090:9090",
                "40009:40009"
            ],
        )


# Pair Pretty Printer
# - Converts a pair string like "pocket-agoriclocal" to "Pocket->Agoriclocal"
def pair_pretty(pair):
    chain_a_id, chain_b_id = pair.split("-")
    if chain_a_id == "pocket":
        chain_a_id = "pokt"

    if chain_b_id == "pocket":
        chain_b_id = "pokt"

    return chain_a_id.title() + "->" + chain_b_id.title()


# TODO_IN_THIS_COMMIT: update comment...
# Load IBC Relayer Server Resources
# - Sets up the server-side relayer for a given pair
# - Adds appropriate resource dependencies based on which chain is "pocket"
def load_ibc_relayer_server_resources(chart_prefix, pairs):
    resource_deps = []
    chain_config_values_flags = []
    # DEV_NOTE: starlark (tilt) doesn't support python sets.
    chain_id_set = {}
    for pair in pairs:
        chain_a_id, chain_b_id = pair.split("-")
        chain_id_set[chain_a_id] = True
        chain_id_set[chain_b_id] = True

        # TODO_IN_THIS_COMMIT: extract to constant
        if chain_a_id == "pocket":
            resource_deps = [
                "validator",
                chain_b_id.title() + " Validator",
            ]
        elif chain_b_id == "pocket":
            resource_deps = [
                # TODO_IN_THIS_COMMIT: extract to constant
                "validator",
                chain_a_id.title() + " Validator",
            ]
        else:
            resource_deps = [
                chain_a_id.title() + "Validator",
                chain_b_id.title() + "Validator",
                # TODO_IN_THIS_COMMIT: extract to constant
                "IBC Setup",
            ]

    chain_ids = chain_id_set.keys()
    for chain_id in chain_ids:
        chain_config_values_flags.append(
            "--values=" +
            os.path.join("localnet", "kubernetes", "values-ibc-relayer-config-" + chain_id + ".yaml"))

    # Deploy helm chart
    helm_resource(
        "ibc-relayer",
        chart_prefix + "ibc-relayer",
        flags=[
                  "--values=" + os.path.join("localnet", "kubernetes", "values-ibc-relayer-common.yaml"),
                  "--values=" + os.path.join("localnet", "kubernetes", "values-ibc-relayer-daemon.yaml"),
              ] + chain_config_values_flags,
        resource_deps=resource_deps,
        image_deps=["ibc-relayer"],
        image_keys=[("image.repository", "image.tag")],
    )

    # Update k8s resource with new name, lebels, and port-forwards
    k8s_resource(
        "ibc-relayer",
        new_name="🔁 Hermes Relayer",
        labels=["IBC"],
        resource_deps=resource_deps,
    )


# Load IBC Relayer Setup Resource
# - Sets up the CLI/setup resource for a given pair
# - Adds appropriate resource dependencies based on which chain is "pocket"
def load_ibc_relayer_setup_resources(chart_prefix, pair):
    # TODO_IN_THIS_COMMIT: rename to chain_one_id and chain_two_id to disambiguate with a, b, c, d used elsewhere.
    chain_a_id, chain_b_id = pair.split("-")
    if chain_a_id == "pocket":
        resource_deps = [
            "validator",
            chain_b_id.title() + " Validator",
        ]
    elif chain_b_id == "pocket":
        resource_deps = [
            "validator",
            chain_a_id.title() + " Validator",
        ]
    else:
        resource_deps = [
            chain_a_id.title() + " Validator",
            chain_b_id.title() + " Validator",
        ]

    # Deploy helm chart
    helm_resource(
        "ibc-relayer-setup-" + pair,
        chart_prefix + "ibc-relayer",
        flags=[
            "--values=" + os.path.join("localnet", "kubernetes", "values-ibc-relayer-common.yaml"),
            "--values=" + os.path.join("localnet", "kubernetes", "values-ibc-relayer-cli.yaml"),
            "--values=" + os.path.join("localnet", "kubernetes", "values-ibc-relayer-config-" + chain_a_id + ".yaml"),
            "--values=" + os.path.join("localnet", "kubernetes", "values-ibc-relayer-config-" + chain_b_id + ".yaml"),
            "--set=chain_a_id=" + chain_a_id,
            "--set=chain_b_id=" + chain_b_id
        ],
        resource_deps=resource_deps,
        image_deps=["ibc-relayer"],
        image_keys=[("image.repository", "image.tag")],
    )

    # Update k8s resource with new name, lebels,
    # port-forwards, and the manual trigger mode.
    k8s_resource(
        # workload=release_name,
        "ibc-relayer-setup-" + pair,
        new_name="🏗️ " + pair_pretty(pair),
        labels=["IBC_Pairs_Setup"],
        trigger_mode=TRIGGER_MODE_MANUAL,
        resource_deps=resource_deps,
    )


# Load IBC Resources
# - Loads Agoric resources if enabled
# - Builds ibc-relayer docker image if any relay pairs are enabled
# - Iterates through all enabled relay pairs and loads relayer resources for each
def load_ibc_resources(chart_prefix, ibc_config):
    check_and_load_agoric(chart_prefix, ibc_config)

    if len(ibc_config["relay_pairs_enabled"]) > 0:
        docker_build(
            "ibc-relayer",
            context=os.path.join(".", "localnet", "ibc-relayer"),  # needs any folder, doesn't matter
            dockerfile=ibc_relayer_dockerfile_path)

        pairs = [key for (key, val) in ibc_config["relay_pairs_enabled"].items() if val == True]
        load_ibc_relayer_server_resources(chart_prefix, pairs)

    for pair, enabled in ibc_config["relay_pairs_enabled"].items():
        if enabled:
            load_ibc_relayer_setup_resources(chart_prefix, pair)
