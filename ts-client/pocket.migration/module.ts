// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/pocket/migration/tx";
import { MsgImportMorseClaimableAccounts } from "./types/pocket/migration/tx";
import { MsgClaimMorseAccount } from "./types/pocket/migration/tx";
import { MsgClaimMorseApplication } from "./types/pocket/migration/tx";
import { MsgClaimMorseSupplier } from "./types/pocket/migration/tx";
import { MsgRecoverMorseAccount } from "./types/pocket/migration/tx";

import { EventImportMorseClaimableAccounts as typeEventImportMorseClaimableAccounts} from "./types"
import { EventMorseAccountClaimed as typeEventMorseAccountClaimed} from "./types"
import { EventMorseApplicationClaimed as typeEventMorseApplicationClaimed} from "./types"
import { EventMorseSupplierClaimed as typeEventMorseSupplierClaimed} from "./types"
import { EventMorseAccountRecovered as typeEventMorseAccountRecovered} from "./types"
import { MorseStateExport as typeMorseStateExport} from "./types"
import { MorseTendermintAppState as typeMorseTendermintAppState} from "./types"
import { MorseApplications as typeMorseApplications} from "./types"
import { MorseAuth as typeMorseAuth} from "./types"
import { MorseAuthAccount as typeMorseAuthAccount} from "./types"
import { MorsePos as typeMorsePos} from "./types"
import { MorseApplication as typeMorseApplication} from "./types"
import { MorseValidator as typeMorseValidator} from "./types"
import { MorseAccount as typeMorseAccount} from "./types"
import { MorsePublicKey as typeMorsePublicKey} from "./types"
import { MorseModuleAccount as typeMorseModuleAccount} from "./types"
import { MorseAccountState as typeMorseAccountState} from "./types"
import { MorseClaimableAccount as typeMorseClaimableAccount} from "./types"
import { Params as typeParams} from "./types"

export { MsgUpdateParams, MsgImportMorseClaimableAccounts, MsgClaimMorseAccount, MsgClaimMorseApplication, MsgClaimMorseSupplier, MsgRecoverMorseAccount };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgImportMorseClaimableAccountsParams = {
  value: MsgImportMorseClaimableAccounts,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimMorseAccountParams = {
  value: MsgClaimMorseAccount,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimMorseApplicationParams = {
  value: MsgClaimMorseApplication,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimMorseSupplierParams = {
  value: MsgClaimMorseSupplier,
  fee?: StdFee,
  memo?: string
};

type sendMsgRecoverMorseAccountParams = {
  value: MsgRecoverMorseAccount,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgImportMorseClaimableAccountsParams = {
  value: MsgImportMorseClaimableAccounts,
};

type msgClaimMorseAccountParams = {
  value: MsgClaimMorseAccount,
};

type msgClaimMorseApplicationParams = {
  value: MsgClaimMorseApplication,
};

type msgClaimMorseSupplierParams = {
  value: MsgClaimMorseSupplier,
};

type msgRecoverMorseAccountParams = {
  value: MsgRecoverMorseAccount,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgImportMorseClaimableAccounts({ value, fee, memo }: sendMsgImportMorseClaimableAccountsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgImportMorseClaimableAccounts: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgImportMorseClaimableAccounts({ value: MsgImportMorseClaimableAccounts.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgImportMorseClaimableAccounts: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimMorseAccount({ value, fee, memo }: sendMsgClaimMorseAccountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimMorseAccount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgClaimMorseAccount({ value: MsgClaimMorseAccount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimMorseAccount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimMorseApplication({ value, fee, memo }: sendMsgClaimMorseApplicationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimMorseApplication: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgClaimMorseApplication({ value: MsgClaimMorseApplication.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimMorseApplication: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimMorseSupplier({ value, fee, memo }: sendMsgClaimMorseSupplierParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimMorseSupplier: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgClaimMorseSupplier({ value: MsgClaimMorseSupplier.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimMorseSupplier: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRecoverMorseAccount({ value, fee, memo }: sendMsgRecoverMorseAccountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRecoverMorseAccount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRecoverMorseAccount({ value: MsgRecoverMorseAccount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRecoverMorseAccount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.migration.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgImportMorseClaimableAccounts({ value }: msgImportMorseClaimableAccountsParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.migration.MsgImportMorseClaimableAccounts", value: MsgImportMorseClaimableAccounts.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgImportMorseClaimableAccounts: Could not create message: ' + e.message)
			}
		},
		
		msgClaimMorseAccount({ value }: msgClaimMorseAccountParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.migration.MsgClaimMorseAccount", value: MsgClaimMorseAccount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimMorseAccount: Could not create message: ' + e.message)
			}
		},
		
		msgClaimMorseApplication({ value }: msgClaimMorseApplicationParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.migration.MsgClaimMorseApplication", value: MsgClaimMorseApplication.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimMorseApplication: Could not create message: ' + e.message)
			}
		},
		
		msgClaimMorseSupplier({ value }: msgClaimMorseSupplierParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.migration.MsgClaimMorseSupplier", value: MsgClaimMorseSupplier.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimMorseSupplier: Could not create message: ' + e.message)
			}
		},
		
		msgRecoverMorseAccount({ value }: msgRecoverMorseAccountParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.migration.MsgRecoverMorseAccount", value: MsgRecoverMorseAccount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRecoverMorseAccount: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						EventImportMorseClaimableAccounts: getStructure(typeEventImportMorseClaimableAccounts.fromPartial({})),
						EventMorseAccountClaimed: getStructure(typeEventMorseAccountClaimed.fromPartial({})),
						EventMorseApplicationClaimed: getStructure(typeEventMorseApplicationClaimed.fromPartial({})),
						EventMorseSupplierClaimed: getStructure(typeEventMorseSupplierClaimed.fromPartial({})),
						EventMorseAccountRecovered: getStructure(typeEventMorseAccountRecovered.fromPartial({})),
						MorseStateExport: getStructure(typeMorseStateExport.fromPartial({})),
						MorseTendermintAppState: getStructure(typeMorseTendermintAppState.fromPartial({})),
						MorseApplications: getStructure(typeMorseApplications.fromPartial({})),
						MorseAuth: getStructure(typeMorseAuth.fromPartial({})),
						MorseAuthAccount: getStructure(typeMorseAuthAccount.fromPartial({})),
						MorsePos: getStructure(typeMorsePos.fromPartial({})),
						MorseApplication: getStructure(typeMorseApplication.fromPartial({})),
						MorseValidator: getStructure(typeMorseValidator.fromPartial({})),
						MorseAccount: getStructure(typeMorseAccount.fromPartial({})),
						MorsePublicKey: getStructure(typeMorsePublicKey.fromPartial({})),
						MorseModuleAccount: getStructure(typeMorseModuleAccount.fromPartial({})),
						MorseAccountState: getStructure(typeMorseAccountState.fromPartial({})),
						MorseClaimableAccount: getStructure(typeMorseClaimableAccount.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			PocketMigration: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;