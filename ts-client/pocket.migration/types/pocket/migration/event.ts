// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/migration/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Application } from "../application/types";
import { Supplier } from "../shared/supplier";
import {
  MorseSupplierClaimSignerType,
  morseSupplierClaimSignerTypeFromJSON,
  morseSupplierClaimSignerTypeToJSON,
} from "./morse_onchain";

export const protobufPackage = "pocket.migration";

/**
 * EventImportMorseClaimableAccounts
 * - Emitted when MorseClaimableAccounts are created on-chain
 * - Represents import event for Morse claimable accounts
 */
export interface EventImportMorseClaimableAccounts {
  /** Shannon height at which MorseAccountState was created on-chain */
  createdAtHeight: number;
  /**
   * On-chain computed sha256 hash of the MorseAccountState
   * - Contains all imported MorseClaimableAccounts
   */
  morseAccountStateHash: Uint8Array;
  /**
   * Number of claimable accounts (EOAs) imported from Morse state export
   * - Account balances include consolidated application and supplier actor stakes
   */
  numAccounts: number;
}

/**
 * EventMorseAccountClaimed
 * - Emitted when a MorseAccount is claimed on-chain
 */
export interface EventMorseAccountClaimed {
  /** Shannon session end height in which the claim was committed */
  sessionEndHeight: number;
  /** Unstaked balance claimed from Morse */
  claimedBalance:
    | Coin
    | undefined;
  /** bech32-encoded Shannon address to mint claimed balance */
  shannonDestAddress: string;
  /** Hex-encoded Morse account address whose balance was claimed */
  morseSrcAddress: string;
}

/**
 * EventMorseApplicationClaimed
 * - Emitted when a MorseAccount is claimed on-chain as a staked application
 */
export interface EventMorseApplicationClaimed {
  /** Shannon session end height in which the claim was committed */
  sessionEndHeight: number;
  /** Unstaked balance claimed from Morse */
  claimedBalance:
    | Coin
    | undefined;
  /** Hex-encoded Morse account address whose balance was claimed */
  morseSrcAddress: string;
  /**
   * Application stake claimed as a result of the claim
   * - Equivalent to Morse application staked amount
   */
  claimedApplicationStake:
    | Coin
    | undefined;
  /**
   * Application staked as a result of the claim
   * - Mirrors Morse application stake
   */
  application: Application | undefined;
}

/**
 * EventMorseSupplierClaimed
 * - Emitted when a MorseAccount is claimed on-chain as a staked Supplier
 */
export interface EventMorseSupplierClaimed {
  /** Shannon session end height in which the claim was committed */
  sessionEndHeight: number;
  /** Unstaked balance claimed from Morse */
  claimedBalance:
    | Coin
    | undefined;
  /**
   * The hex-encoded address of the Morse non-custodial (i.e. operator) account.
   * - Unstaked balance was migrated 1:1
   * - Stake was migrated 1:1 from morse_node_address to shannon_operator_address
   * - Morse non-custodial (i.e. operator) address.
   * If morse_output_address was not set, this is the custodial address.
   * - See 'pocket nodes --help' for more information. Note that this refers to the Morse CLI.
   * E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
   */
  morseNodeAddress: string;
  /**
   * ONLY applicable to Morse node/supplier accounts.
   * Hex-encoded address of the Morse output account/wallet associated with the Morse node/supplier.
   * - E.g.: 00f9900606fa3d5c9179fc0c8513078a53a2073e
   * - Morse custodial (i.e. owner) address, which owned the staked tokens of the operator.
   *   See 'pocket nodes --help' for more information. Note that this refers to the Morse CLI.
   */
  morseOutputAddress: string;
  /**
   * The type of supplier claim signer, indicating which actor executed the claim
   * and whether it was a custodial or non-custodial claim.
   * - MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_NON_CUSTODIAL_SIGNED_BY_ADDR
   * - MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_OPERATOR
   * - MORSE_SUPPLIER_CLAIM_SIGNER_TYPE_CUSTODIAL_SIGNED_BY_OWNER
   */
  claimSignerType: MorseSupplierClaimSignerType;
  /**
   * Supplier stake claimed as a result of the claim
   * - Equivalent to Morse supplier staked amount
   */
  claimedSupplierStake:
    | Coin
    | undefined;
  /**
   * Supplier staked as a result of the claim
   * - Mirrors Morse supplier stake
   */
  supplier: Supplier | undefined;
}

/**
 * EventMorseAccountRecovered
 * - Emitted when a Morse account is recovered on-chain
 */
export interface EventMorseAccountRecovered {
  /** The session end height (on Shannon) in which the recovery was committed (i.e. claimed). */
  sessionEndHeight: number;
  /**
   * The total balance which was recovered:
   * - Includes both unstaked and staked balances (consolidated)
   * - Auto-liquidates both unstaked and staked balances at once
   */
  recoveredBalance:
    | Coin
    | undefined;
  /** The bech32-encoded address of the Shannon account to which the recovered balance was minted. */
  shannonDestAddress: string;
  /**
   * The hex-encoded address of the Morse account whose balance and stakes have been recovered.
   * This address MUST be in the recovery allow list and could be of types such as:
   * - Unreachable/Locked EOA, Supplier or Application address
   * - Module account
   * - Invalid address (too short, too long, or non-hexadecimal format)
   */
  morseSrcAddress: string;
}

function createBaseEventImportMorseClaimableAccounts(): EventImportMorseClaimableAccounts {
  return { createdAtHeight: 0, morseAccountStateHash: new Uint8Array(0), numAccounts: 0 };
}

export const EventImportMorseClaimableAccounts: MessageFns<EventImportMorseClaimableAccounts> = {
  encode(message: EventImportMorseClaimableAccounts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createdAtHeight !== 0) {
      writer.uint32(8).int64(message.createdAtHeight);
    }
    if (message.morseAccountStateHash.length !== 0) {
      writer.uint32(18).bytes(message.morseAccountStateHash);
    }
    if (message.numAccounts !== 0) {
      writer.uint32(24).uint64(message.numAccounts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventImportMorseClaimableAccounts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventImportMorseClaimableAccounts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.createdAtHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.morseAccountStateHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numAccounts = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventImportMorseClaimableAccounts {
    return {
      createdAtHeight: isSet(object.createdAtHeight) ? globalThis.Number(object.createdAtHeight) : 0,
      morseAccountStateHash: isSet(object.morseAccountStateHash)
        ? bytesFromBase64(object.morseAccountStateHash)
        : new Uint8Array(0),
      numAccounts: isSet(object.numAccounts) ? globalThis.Number(object.numAccounts) : 0,
    };
  },

  toJSON(message: EventImportMorseClaimableAccounts): unknown {
    const obj: any = {};
    if (message.createdAtHeight !== 0) {
      obj.createdAtHeight = Math.round(message.createdAtHeight);
    }
    if (message.morseAccountStateHash.length !== 0) {
      obj.morseAccountStateHash = base64FromBytes(message.morseAccountStateHash);
    }
    if (message.numAccounts !== 0) {
      obj.numAccounts = Math.round(message.numAccounts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventImportMorseClaimableAccounts>, I>>(
    base?: I,
  ): EventImportMorseClaimableAccounts {
    return EventImportMorseClaimableAccounts.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventImportMorseClaimableAccounts>, I>>(
    object: I,
  ): EventImportMorseClaimableAccounts {
    const message = createBaseEventImportMorseClaimableAccounts();
    message.createdAtHeight = object.createdAtHeight ?? 0;
    message.morseAccountStateHash = object.morseAccountStateHash ?? new Uint8Array(0);
    message.numAccounts = object.numAccounts ?? 0;
    return message;
  },
};

function createBaseEventMorseAccountClaimed(): EventMorseAccountClaimed {
  return { sessionEndHeight: 0, claimedBalance: undefined, shannonDestAddress: "", morseSrcAddress: "" };
}

export const EventMorseAccountClaimed: MessageFns<EventMorseAccountClaimed> = {
  encode(message: EventMorseAccountClaimed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionEndHeight !== 0) {
      writer.uint32(8).int64(message.sessionEndHeight);
    }
    if (message.claimedBalance !== undefined) {
      Coin.encode(message.claimedBalance, writer.uint32(18).fork()).join();
    }
    if (message.shannonDestAddress !== "") {
      writer.uint32(26).string(message.shannonDestAddress);
    }
    if (message.morseSrcAddress !== "") {
      writer.uint32(34).string(message.morseSrcAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMorseAccountClaimed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMorseAccountClaimed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.claimedBalance = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shannonDestAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.morseSrcAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMorseAccountClaimed {
    return {
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
      claimedBalance: isSet(object.claimedBalance) ? Coin.fromJSON(object.claimedBalance) : undefined,
      shannonDestAddress: isSet(object.shannonDestAddress) ? globalThis.String(object.shannonDestAddress) : "",
      morseSrcAddress: isSet(object.morseSrcAddress) ? globalThis.String(object.morseSrcAddress) : "",
    };
  },

  toJSON(message: EventMorseAccountClaimed): unknown {
    const obj: any = {};
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    if (message.claimedBalance !== undefined) {
      obj.claimedBalance = Coin.toJSON(message.claimedBalance);
    }
    if (message.shannonDestAddress !== "") {
      obj.shannonDestAddress = message.shannonDestAddress;
    }
    if (message.morseSrcAddress !== "") {
      obj.morseSrcAddress = message.morseSrcAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMorseAccountClaimed>, I>>(base?: I): EventMorseAccountClaimed {
    return EventMorseAccountClaimed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventMorseAccountClaimed>, I>>(object: I): EventMorseAccountClaimed {
    const message = createBaseEventMorseAccountClaimed();
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    message.claimedBalance = (object.claimedBalance !== undefined && object.claimedBalance !== null)
      ? Coin.fromPartial(object.claimedBalance)
      : undefined;
    message.shannonDestAddress = object.shannonDestAddress ?? "";
    message.morseSrcAddress = object.morseSrcAddress ?? "";
    return message;
  },
};

function createBaseEventMorseApplicationClaimed(): EventMorseApplicationClaimed {
  return {
    sessionEndHeight: 0,
    claimedBalance: undefined,
    morseSrcAddress: "",
    claimedApplicationStake: undefined,
    application: undefined,
  };
}

export const EventMorseApplicationClaimed: MessageFns<EventMorseApplicationClaimed> = {
  encode(message: EventMorseApplicationClaimed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionEndHeight !== 0) {
      writer.uint32(8).int64(message.sessionEndHeight);
    }
    if (message.claimedBalance !== undefined) {
      Coin.encode(message.claimedBalance, writer.uint32(18).fork()).join();
    }
    if (message.morseSrcAddress !== "") {
      writer.uint32(26).string(message.morseSrcAddress);
    }
    if (message.claimedApplicationStake !== undefined) {
      Coin.encode(message.claimedApplicationStake, writer.uint32(34).fork()).join();
    }
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMorseApplicationClaimed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMorseApplicationClaimed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.claimedBalance = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.morseSrcAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.claimedApplicationStake = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMorseApplicationClaimed {
    return {
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
      claimedBalance: isSet(object.claimedBalance) ? Coin.fromJSON(object.claimedBalance) : undefined,
      morseSrcAddress: isSet(object.morseSrcAddress) ? globalThis.String(object.morseSrcAddress) : "",
      claimedApplicationStake: isSet(object.claimedApplicationStake)
        ? Coin.fromJSON(object.claimedApplicationStake)
        : undefined,
      application: isSet(object.application) ? Application.fromJSON(object.application) : undefined,
    };
  },

  toJSON(message: EventMorseApplicationClaimed): unknown {
    const obj: any = {};
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    if (message.claimedBalance !== undefined) {
      obj.claimedBalance = Coin.toJSON(message.claimedBalance);
    }
    if (message.morseSrcAddress !== "") {
      obj.morseSrcAddress = message.morseSrcAddress;
    }
    if (message.claimedApplicationStake !== undefined) {
      obj.claimedApplicationStake = Coin.toJSON(message.claimedApplicationStake);
    }
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMorseApplicationClaimed>, I>>(base?: I): EventMorseApplicationClaimed {
    return EventMorseApplicationClaimed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventMorseApplicationClaimed>, I>>(object: I): EventMorseApplicationClaimed {
    const message = createBaseEventMorseApplicationClaimed();
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    message.claimedBalance = (object.claimedBalance !== undefined && object.claimedBalance !== null)
      ? Coin.fromPartial(object.claimedBalance)
      : undefined;
    message.morseSrcAddress = object.morseSrcAddress ?? "";
    message.claimedApplicationStake =
      (object.claimedApplicationStake !== undefined && object.claimedApplicationStake !== null)
        ? Coin.fromPartial(object.claimedApplicationStake)
        : undefined;
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseEventMorseSupplierClaimed(): EventMorseSupplierClaimed {
  return {
    sessionEndHeight: 0,
    claimedBalance: undefined,
    morseNodeAddress: "",
    morseOutputAddress: "",
    claimSignerType: 0,
    claimedSupplierStake: undefined,
    supplier: undefined,
  };
}

export const EventMorseSupplierClaimed: MessageFns<EventMorseSupplierClaimed> = {
  encode(message: EventMorseSupplierClaimed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionEndHeight !== 0) {
      writer.uint32(8).int64(message.sessionEndHeight);
    }
    if (message.claimedBalance !== undefined) {
      Coin.encode(message.claimedBalance, writer.uint32(18).fork()).join();
    }
    if (message.morseNodeAddress !== "") {
      writer.uint32(66).string(message.morseNodeAddress);
    }
    if (message.morseOutputAddress !== "") {
      writer.uint32(50).string(message.morseOutputAddress);
    }
    if (message.claimSignerType !== 0) {
      writer.uint32(56).int32(message.claimSignerType);
    }
    if (message.claimedSupplierStake !== undefined) {
      Coin.encode(message.claimedSupplierStake, writer.uint32(34).fork()).join();
    }
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMorseSupplierClaimed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMorseSupplierClaimed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.claimedBalance = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.morseNodeAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.morseOutputAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.claimSignerType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.claimedSupplierStake = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMorseSupplierClaimed {
    return {
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
      claimedBalance: isSet(object.claimedBalance) ? Coin.fromJSON(object.claimedBalance) : undefined,
      morseNodeAddress: isSet(object.morseNodeAddress) ? globalThis.String(object.morseNodeAddress) : "",
      morseOutputAddress: isSet(object.morseOutputAddress) ? globalThis.String(object.morseOutputAddress) : "",
      claimSignerType: isSet(object.claimSignerType) ? morseSupplierClaimSignerTypeFromJSON(object.claimSignerType) : 0,
      claimedSupplierStake: isSet(object.claimedSupplierStake) ? Coin.fromJSON(object.claimedSupplierStake) : undefined,
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
    };
  },

  toJSON(message: EventMorseSupplierClaimed): unknown {
    const obj: any = {};
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    if (message.claimedBalance !== undefined) {
      obj.claimedBalance = Coin.toJSON(message.claimedBalance);
    }
    if (message.morseNodeAddress !== "") {
      obj.morseNodeAddress = message.morseNodeAddress;
    }
    if (message.morseOutputAddress !== "") {
      obj.morseOutputAddress = message.morseOutputAddress;
    }
    if (message.claimSignerType !== 0) {
      obj.claimSignerType = morseSupplierClaimSignerTypeToJSON(message.claimSignerType);
    }
    if (message.claimedSupplierStake !== undefined) {
      obj.claimedSupplierStake = Coin.toJSON(message.claimedSupplierStake);
    }
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMorseSupplierClaimed>, I>>(base?: I): EventMorseSupplierClaimed {
    return EventMorseSupplierClaimed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventMorseSupplierClaimed>, I>>(object: I): EventMorseSupplierClaimed {
    const message = createBaseEventMorseSupplierClaimed();
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    message.claimedBalance = (object.claimedBalance !== undefined && object.claimedBalance !== null)
      ? Coin.fromPartial(object.claimedBalance)
      : undefined;
    message.morseNodeAddress = object.morseNodeAddress ?? "";
    message.morseOutputAddress = object.morseOutputAddress ?? "";
    message.claimSignerType = object.claimSignerType ?? 0;
    message.claimedSupplierStake = (object.claimedSupplierStake !== undefined && object.claimedSupplierStake !== null)
      ? Coin.fromPartial(object.claimedSupplierStake)
      : undefined;
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    return message;
  },
};

function createBaseEventMorseAccountRecovered(): EventMorseAccountRecovered {
  return { sessionEndHeight: 0, recoveredBalance: undefined, shannonDestAddress: "", morseSrcAddress: "" };
}

export const EventMorseAccountRecovered: MessageFns<EventMorseAccountRecovered> = {
  encode(message: EventMorseAccountRecovered, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionEndHeight !== 0) {
      writer.uint32(8).int64(message.sessionEndHeight);
    }
    if (message.recoveredBalance !== undefined) {
      Coin.encode(message.recoveredBalance, writer.uint32(18).fork()).join();
    }
    if (message.shannonDestAddress !== "") {
      writer.uint32(26).string(message.shannonDestAddress);
    }
    if (message.morseSrcAddress !== "") {
      writer.uint32(34).string(message.morseSrcAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMorseAccountRecovered {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMorseAccountRecovered();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recoveredBalance = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shannonDestAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.morseSrcAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMorseAccountRecovered {
    return {
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
      recoveredBalance: isSet(object.recoveredBalance) ? Coin.fromJSON(object.recoveredBalance) : undefined,
      shannonDestAddress: isSet(object.shannonDestAddress) ? globalThis.String(object.shannonDestAddress) : "",
      morseSrcAddress: isSet(object.morseSrcAddress) ? globalThis.String(object.morseSrcAddress) : "",
    };
  },

  toJSON(message: EventMorseAccountRecovered): unknown {
    const obj: any = {};
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    if (message.recoveredBalance !== undefined) {
      obj.recoveredBalance = Coin.toJSON(message.recoveredBalance);
    }
    if (message.shannonDestAddress !== "") {
      obj.shannonDestAddress = message.shannonDestAddress;
    }
    if (message.morseSrcAddress !== "") {
      obj.morseSrcAddress = message.morseSrcAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMorseAccountRecovered>, I>>(base?: I): EventMorseAccountRecovered {
    return EventMorseAccountRecovered.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventMorseAccountRecovered>, I>>(object: I): EventMorseAccountRecovered {
    const message = createBaseEventMorseAccountRecovered();
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    message.recoveredBalance = (object.recoveredBalance !== undefined && object.recoveredBalance !== null)
      ? Coin.fromPartial(object.recoveredBalance)
      : undefined;
    message.shannonDestAddress = object.shannonDestAddress ?? "";
    message.morseSrcAddress = object.morseSrcAddress ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
