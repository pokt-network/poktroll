// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/migration/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { MorseClaimableAccount } from "./morse_onchain";
import { Params } from "./params";

export const protobufPackage = "pocket.migration";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryMorseClaimableAccountRequest {
  address: string;
}

export interface QueryMorseClaimableAccountResponse {
  morseClaimableAccount: MorseClaimableAccount | undefined;
}

export interface QueryAllMorseClaimableAccountRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllMorseClaimableAccountResponse {
  morseClaimableAccount: MorseClaimableAccount[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryMorseClaimableAccountRequest(): QueryMorseClaimableAccountRequest {
  return { address: "" };
}

export const QueryMorseClaimableAccountRequest: MessageFns<QueryMorseClaimableAccountRequest> = {
  encode(message: QueryMorseClaimableAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMorseClaimableAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMorseClaimableAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMorseClaimableAccountRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryMorseClaimableAccountRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMorseClaimableAccountRequest>, I>>(
    base?: I,
  ): QueryMorseClaimableAccountRequest {
    return QueryMorseClaimableAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMorseClaimableAccountRequest>, I>>(
    object: I,
  ): QueryMorseClaimableAccountRequest {
    const message = createBaseQueryMorseClaimableAccountRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryMorseClaimableAccountResponse(): QueryMorseClaimableAccountResponse {
  return { morseClaimableAccount: undefined };
}

export const QueryMorseClaimableAccountResponse: MessageFns<QueryMorseClaimableAccountResponse> = {
  encode(message: QueryMorseClaimableAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.morseClaimableAccount !== undefined) {
      MorseClaimableAccount.encode(message.morseClaimableAccount, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMorseClaimableAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMorseClaimableAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.morseClaimableAccount = MorseClaimableAccount.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMorseClaimableAccountResponse {
    return {
      morseClaimableAccount: isSet(object.morseClaimableAccount)
        ? MorseClaimableAccount.fromJSON(object.morseClaimableAccount)
        : undefined,
    };
  },

  toJSON(message: QueryMorseClaimableAccountResponse): unknown {
    const obj: any = {};
    if (message.morseClaimableAccount !== undefined) {
      obj.morseClaimableAccount = MorseClaimableAccount.toJSON(message.morseClaimableAccount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMorseClaimableAccountResponse>, I>>(
    base?: I,
  ): QueryMorseClaimableAccountResponse {
    return QueryMorseClaimableAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMorseClaimableAccountResponse>, I>>(
    object: I,
  ): QueryMorseClaimableAccountResponse {
    const message = createBaseQueryMorseClaimableAccountResponse();
    message.morseClaimableAccount =
      (object.morseClaimableAccount !== undefined && object.morseClaimableAccount !== null)
        ? MorseClaimableAccount.fromPartial(object.morseClaimableAccount)
        : undefined;
    return message;
  },
};

function createBaseQueryAllMorseClaimableAccountRequest(): QueryAllMorseClaimableAccountRequest {
  return { pagination: undefined };
}

export const QueryAllMorseClaimableAccountRequest: MessageFns<QueryAllMorseClaimableAccountRequest> = {
  encode(message: QueryAllMorseClaimableAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMorseClaimableAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMorseClaimableAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMorseClaimableAccountRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllMorseClaimableAccountRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMorseClaimableAccountRequest>, I>>(
    base?: I,
  ): QueryAllMorseClaimableAccountRequest {
    return QueryAllMorseClaimableAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMorseClaimableAccountRequest>, I>>(
    object: I,
  ): QueryAllMorseClaimableAccountRequest {
    const message = createBaseQueryAllMorseClaimableAccountRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMorseClaimableAccountResponse(): QueryAllMorseClaimableAccountResponse {
  return { morseClaimableAccount: [], pagination: undefined };
}

export const QueryAllMorseClaimableAccountResponse: MessageFns<QueryAllMorseClaimableAccountResponse> = {
  encode(message: QueryAllMorseClaimableAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.morseClaimableAccount) {
      MorseClaimableAccount.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMorseClaimableAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMorseClaimableAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.morseClaimableAccount.push(MorseClaimableAccount.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMorseClaimableAccountResponse {
    return {
      morseClaimableAccount: globalThis.Array.isArray(object?.morseClaimableAccount)
        ? object.morseClaimableAccount.map((e: any) => MorseClaimableAccount.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllMorseClaimableAccountResponse): unknown {
    const obj: any = {};
    if (message.morseClaimableAccount?.length) {
      obj.morseClaimableAccount = message.morseClaimableAccount.map((e) => MorseClaimableAccount.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMorseClaimableAccountResponse>, I>>(
    base?: I,
  ): QueryAllMorseClaimableAccountResponse {
    return QueryAllMorseClaimableAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMorseClaimableAccountResponse>, I>>(
    object: I,
  ): QueryAllMorseClaimableAccountResponse {
    const message = createBaseQueryAllMorseClaimableAccountResponse();
    message.morseClaimableAccount = object.morseClaimableAccount?.map((e) => MorseClaimableAccount.fromPartial(e)) ||
      [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of MorseClaimableAccount items. */
  MorseClaimableAccount(request: QueryMorseClaimableAccountRequest): Promise<QueryMorseClaimableAccountResponse>;
  MorseClaimableAccountAll(
    request: QueryAllMorseClaimableAccountRequest,
  ): Promise<QueryAllMorseClaimableAccountResponse>;
}

export const QueryServiceName = "pocket.migration.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.MorseClaimableAccount = this.MorseClaimableAccount.bind(this);
    this.MorseClaimableAccountAll = this.MorseClaimableAccountAll.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  MorseClaimableAccount(request: QueryMorseClaimableAccountRequest): Promise<QueryMorseClaimableAccountResponse> {
    const data = QueryMorseClaimableAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MorseClaimableAccount", data);
    return promise.then((data) => QueryMorseClaimableAccountResponse.decode(new BinaryReader(data)));
  }

  MorseClaimableAccountAll(
    request: QueryAllMorseClaimableAccountRequest,
  ): Promise<QueryAllMorseClaimableAccountResponse> {
    const data = QueryAllMorseClaimableAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MorseClaimableAccountAll", data);
    return promise.then((data) => QueryAllMorseClaimableAccountResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
