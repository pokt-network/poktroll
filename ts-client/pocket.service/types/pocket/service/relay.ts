// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/service/relay.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SessionHeader } from "../session/types";

export const protobufPackage = "pocket.service";

/**
 * Relay message
 *
 * - Contains both the RelayRequest (signed by the Application) and RelayResponse (signed by the Supplier).
 * - The serialized tuple is stored in SMST leaves as values during the Claim/Proof lifecycle.
 */
export interface Relay {
  req: RelayRequest | undefined;
  res: RelayResponse | undefined;
}

/**
 * RelayRequestMetadata
 *
 * Contains metadata for a RelayRequest.
 */
export interface RelayRequestMetadata {
  /** Session header associated with the relay. */
  sessionHeader:
    | SessionHeader
    | undefined;
  /**
   * Signature for the request:
   * - Serialized ring signature, created by either the application itself or a delegated gateway.
   * - Always uses the application's ring.
   */
  signature: Uint8Array;
  /**
   * TODO_MAINNET: Ensure this address is checked/verified onchain if needed.
   * See: https://github.com/pokt-network/poktroll/pull/567#discussion_r1628722168
   *
   * Supplier operator address:
   * - The Bech32 address of the supplier operator the relay is sent to.
   * - Used by the RelayMiner to route to the correct supplier.
   */
  supplierOperatorAddress: string;
}

/**
 * RelayRequest
 *
 * Holds the request details for a relay.
 */
export interface RelayRequest {
  meta:
    | RelayRequestMetadata
    | undefined;
  /**
   * Serialized request payload:
   * - Passed directly to the service.
   * - Can be any supported format: JSON-RPC, REST, gRPC, etc.
   */
  payload: Uint8Array;
}

/**
 * RelayResponse
 *
 * Contains the response details for a RelayRequest.
 */
export interface RelayResponse {
  meta:
    | RelayResponseMetadata
    | undefined;
  /**
   * Serialized response payload:
   * - Passed directly from the service.
   * - Can be any supported format: JSON-RPC, REST, gRPC, etc.
   * - Used when communicating between applications, gatewways, and relayminers
   * - Omitted when inserting relays into the SMST, and therefore in onchain proofs,
   *   in order to minimize onchain proof size.
   */
  payload: Uint8Array;
  /**
   * SHA256 hash of the response payload.
   * This field is used for proof verification without requiring the full payload.
   * The hash ensures response integrity while reducing on-chain storage requirements.
   */
  payloadHash: Uint8Array;
  /**
   * Error returned by the RelayMiner, if applicable.
   * - If no error occurred, this field is empty.
   */
  relayMinerError: RelayMinerError | undefined;
}

/**
 * RelayResponseMetadata
 *
 * Contains metadata for a RelayResponse.
 */
export interface RelayResponseMetadata {
  /** Session header associated with the relay. */
  sessionHeader:
    | SessionHeader
    | undefined;
  /** Signature of the supplier's operator on the response. */
  supplierOperatorSignature: Uint8Array;
}

/**
 * RelayMinerError
 *
 * Contains error details returned by the RelayMiner.
 */
export interface RelayMinerError {
  /**
   * Registered codespace for the error (groups errors by source/module, e.g. `relayer_proxy`).
   * See: https://github.com/pokt-network/poktroll/blob/main/pkg/relayer/proxy/errors.go#L8
   */
  codespace: string;
  /**
   * Specific registered error code (e.g. `1` for `ErrRelayerProxyInvalidSession`)
   * See: https://github.com/pokt-network/poktroll/blob/main/pkg/relayer/proxy/errors.go#L9
   */
  code: number;
  /**
   * Human-readable, concise error description.
   * Example `invalid session in relayer request` for `ErrRelayerProxyInvalidSession`.
   */
  description: string;
  /**
   * Detailed error message (may include additional context).
   * Example: ErrRelayerProxyInvalidSession.Wrapf("application %q has %d service configs", ...)
   */
  message: string;
}

function createBaseRelay(): Relay {
  return { req: undefined, res: undefined };
}

export const Relay: MessageFns<Relay> = {
  encode(message: Relay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.req !== undefined) {
      RelayRequest.encode(message.req, writer.uint32(10).fork()).join();
    }
    if (message.res !== undefined) {
      RelayResponse.encode(message.res, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Relay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.req = RelayRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.res = RelayResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Relay {
    return {
      req: isSet(object.req) ? RelayRequest.fromJSON(object.req) : undefined,
      res: isSet(object.res) ? RelayResponse.fromJSON(object.res) : undefined,
    };
  },

  toJSON(message: Relay): unknown {
    const obj: any = {};
    if (message.req !== undefined) {
      obj.req = RelayRequest.toJSON(message.req);
    }
    if (message.res !== undefined) {
      obj.res = RelayResponse.toJSON(message.res);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Relay>, I>>(base?: I): Relay {
    return Relay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Relay>, I>>(object: I): Relay {
    const message = createBaseRelay();
    message.req = (object.req !== undefined && object.req !== null) ? RelayRequest.fromPartial(object.req) : undefined;
    message.res = (object.res !== undefined && object.res !== null) ? RelayResponse.fromPartial(object.res) : undefined;
    return message;
  },
};

function createBaseRelayRequestMetadata(): RelayRequestMetadata {
  return { sessionHeader: undefined, signature: new Uint8Array(0), supplierOperatorAddress: "" };
}

export const RelayRequestMetadata: MessageFns<RelayRequestMetadata> = {
  encode(message: RelayRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionHeader !== undefined) {
      SessionHeader.encode(message.sessionHeader, writer.uint32(10).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.supplierOperatorAddress !== "") {
      writer.uint32(26).string(message.supplierOperatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionHeader = SessionHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.supplierOperatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayRequestMetadata {
    return {
      sessionHeader: isSet(object.sessionHeader) ? SessionHeader.fromJSON(object.sessionHeader) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      supplierOperatorAddress: isSet(object.supplierOperatorAddress)
        ? globalThis.String(object.supplierOperatorAddress)
        : "",
    };
  },

  toJSON(message: RelayRequestMetadata): unknown {
    const obj: any = {};
    if (message.sessionHeader !== undefined) {
      obj.sessionHeader = SessionHeader.toJSON(message.sessionHeader);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.supplierOperatorAddress !== "") {
      obj.supplierOperatorAddress = message.supplierOperatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayRequestMetadata>, I>>(base?: I): RelayRequestMetadata {
    return RelayRequestMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayRequestMetadata>, I>>(object: I): RelayRequestMetadata {
    const message = createBaseRelayRequestMetadata();
    message.sessionHeader = (object.sessionHeader !== undefined && object.sessionHeader !== null)
      ? SessionHeader.fromPartial(object.sessionHeader)
      : undefined;
    message.signature = object.signature ?? new Uint8Array(0);
    message.supplierOperatorAddress = object.supplierOperatorAddress ?? "";
    return message;
  },
};

function createBaseRelayRequest(): RelayRequest {
  return { meta: undefined, payload: new Uint8Array(0) };
}

export const RelayRequest: MessageFns<RelayRequest> = {
  encode(message: RelayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      RelayRequestMetadata.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = RelayRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayRequest {
    return {
      meta: isSet(object.meta) ? RelayRequestMetadata.fromJSON(object.meta) : undefined,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: RelayRequest): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = RelayRequestMetadata.toJSON(message.meta);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayRequest>, I>>(base?: I): RelayRequest {
    return RelayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayRequest>, I>>(object: I): RelayRequest {
    const message = createBaseRelayRequest();
    message.meta = (object.meta !== undefined && object.meta !== null)
      ? RelayRequestMetadata.fromPartial(object.meta)
      : undefined;
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRelayResponse(): RelayResponse {
  return { meta: undefined, payload: new Uint8Array(0), payloadHash: new Uint8Array(0), relayMinerError: undefined };
}

export const RelayResponse: MessageFns<RelayResponse> = {
  encode(message: RelayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      RelayResponseMetadata.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    if (message.payloadHash.length !== 0) {
      writer.uint32(34).bytes(message.payloadHash);
    }
    if (message.relayMinerError !== undefined) {
      RelayMinerError.encode(message.relayMinerError, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = RelayResponseMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.relayMinerError = RelayMinerError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayResponse {
    return {
      meta: isSet(object.meta) ? RelayResponseMetadata.fromJSON(object.meta) : undefined,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
      payloadHash: isSet(object.payloadHash) ? bytesFromBase64(object.payloadHash) : new Uint8Array(0),
      relayMinerError: isSet(object.relayMinerError) ? RelayMinerError.fromJSON(object.relayMinerError) : undefined,
    };
  },

  toJSON(message: RelayResponse): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = RelayResponseMetadata.toJSON(message.meta);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    if (message.relayMinerError !== undefined) {
      obj.relayMinerError = RelayMinerError.toJSON(message.relayMinerError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayResponse>, I>>(base?: I): RelayResponse {
    return RelayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayResponse>, I>>(object: I): RelayResponse {
    const message = createBaseRelayResponse();
    message.meta = (object.meta !== undefined && object.meta !== null)
      ? RelayResponseMetadata.fromPartial(object.meta)
      : undefined;
    message.payload = object.payload ?? new Uint8Array(0);
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    message.relayMinerError = (object.relayMinerError !== undefined && object.relayMinerError !== null)
      ? RelayMinerError.fromPartial(object.relayMinerError)
      : undefined;
    return message;
  },
};

function createBaseRelayResponseMetadata(): RelayResponseMetadata {
  return { sessionHeader: undefined, supplierOperatorSignature: new Uint8Array(0) };
}

export const RelayResponseMetadata: MessageFns<RelayResponseMetadata> = {
  encode(message: RelayResponseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionHeader !== undefined) {
      SessionHeader.encode(message.sessionHeader, writer.uint32(10).fork()).join();
    }
    if (message.supplierOperatorSignature.length !== 0) {
      writer.uint32(18).bytes(message.supplierOperatorSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayResponseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayResponseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionHeader = SessionHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.supplierOperatorSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayResponseMetadata {
    return {
      sessionHeader: isSet(object.sessionHeader) ? SessionHeader.fromJSON(object.sessionHeader) : undefined,
      supplierOperatorSignature: isSet(object.supplierOperatorSignature)
        ? bytesFromBase64(object.supplierOperatorSignature)
        : new Uint8Array(0),
    };
  },

  toJSON(message: RelayResponseMetadata): unknown {
    const obj: any = {};
    if (message.sessionHeader !== undefined) {
      obj.sessionHeader = SessionHeader.toJSON(message.sessionHeader);
    }
    if (message.supplierOperatorSignature.length !== 0) {
      obj.supplierOperatorSignature = base64FromBytes(message.supplierOperatorSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayResponseMetadata>, I>>(base?: I): RelayResponseMetadata {
    return RelayResponseMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayResponseMetadata>, I>>(object: I): RelayResponseMetadata {
    const message = createBaseRelayResponseMetadata();
    message.sessionHeader = (object.sessionHeader !== undefined && object.sessionHeader !== null)
      ? SessionHeader.fromPartial(object.sessionHeader)
      : undefined;
    message.supplierOperatorSignature = object.supplierOperatorSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRelayMinerError(): RelayMinerError {
  return { codespace: "", code: 0, description: "", message: "" };
}

export const RelayMinerError: MessageFns<RelayMinerError> = {
  encode(message: RelayMinerError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.codespace !== "") {
      writer.uint32(10).string(message.codespace);
    }
    if (message.code !== 0) {
      writer.uint32(16).uint32(message.code);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayMinerError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayMinerError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.codespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayMinerError {
    return {
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: RelayMinerError): unknown {
    const obj: any = {};
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayMinerError>, I>>(base?: I): RelayMinerError {
    return RelayMinerError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayMinerError>, I>>(object: I): RelayMinerError {
    const message = createBaseRelayMinerError();
    message.codespace = object.codespace ?? "";
    message.code = object.code ?? 0;
    message.description = object.description ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
