// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/service/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Service } from "../shared/service";
import { Params } from "./params";
import { RelayMiningDifficulty } from "./relay_mining_difficulty";

export const protobufPackage = "pocket.service";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetServiceRequest {
  /** TODO_IMPROVE: We could support getting services by name. */
  id: string;
}

export interface QueryGetServiceResponse {
  service: Service | undefined;
}

export interface QueryAllServicesRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllServicesResponse {
  service: Service[];
  pagination: PageResponse | undefined;
}

export interface QueryGetRelayMiningDifficultyRequest {
  serviceId: string;
}

export interface QueryGetRelayMiningDifficultyResponse {
  relayMiningDifficulty: RelayMiningDifficulty | undefined;
}

export interface QueryAllRelayMiningDifficultyRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllRelayMiningDifficultyResponse {
  relayMiningDifficulty: RelayMiningDifficulty[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetServiceRequest(): QueryGetServiceRequest {
  return { id: "" };
}

export const QueryGetServiceRequest: MessageFns<QueryGetServiceRequest> = {
  encode(message: QueryGetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetServiceRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetServiceRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetServiceRequest>, I>>(base?: I): QueryGetServiceRequest {
    return QueryGetServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetServiceRequest>, I>>(object: I): QueryGetServiceRequest {
    const message = createBaseQueryGetServiceRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetServiceResponse(): QueryGetServiceResponse {
  return { service: undefined };
}

export const QueryGetServiceResponse: MessageFns<QueryGetServiceResponse> = {
  encode(message: QueryGetServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetServiceResponse {
    return { service: isSet(object.service) ? Service.fromJSON(object.service) : undefined };
  },

  toJSON(message: QueryGetServiceResponse): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetServiceResponse>, I>>(base?: I): QueryGetServiceResponse {
    return QueryGetServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetServiceResponse>, I>>(object: I): QueryGetServiceResponse {
    const message = createBaseQueryGetServiceResponse();
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseQueryAllServicesRequest(): QueryAllServicesRequest {
  return { pagination: undefined };
}

export const QueryAllServicesRequest: MessageFns<QueryAllServicesRequest> = {
  encode(message: QueryAllServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllServicesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllServicesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllServicesRequest>, I>>(base?: I): QueryAllServicesRequest {
    return QueryAllServicesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllServicesRequest>, I>>(object: I): QueryAllServicesRequest {
    const message = createBaseQueryAllServicesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllServicesResponse(): QueryAllServicesResponse {
  return { service: [], pagination: undefined };
}

export const QueryAllServicesResponse: MessageFns<QueryAllServicesResponse> = {
  encode(message: QueryAllServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.service) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service.push(Service.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllServicesResponse {
    return {
      service: globalThis.Array.isArray(object?.service) ? object.service.map((e: any) => Service.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllServicesResponse): unknown {
    const obj: any = {};
    if (message.service?.length) {
      obj.service = message.service.map((e) => Service.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllServicesResponse>, I>>(base?: I): QueryAllServicesResponse {
    return QueryAllServicesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllServicesResponse>, I>>(object: I): QueryAllServicesResponse {
    const message = createBaseQueryAllServicesResponse();
    message.service = object.service?.map((e) => Service.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetRelayMiningDifficultyRequest(): QueryGetRelayMiningDifficultyRequest {
  return { serviceId: "" };
}

export const QueryGetRelayMiningDifficultyRequest: MessageFns<QueryGetRelayMiningDifficultyRequest> = {
  encode(message: QueryGetRelayMiningDifficultyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== "") {
      writer.uint32(10).string(message.serviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetRelayMiningDifficultyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetRelayMiningDifficultyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetRelayMiningDifficultyRequest {
    return { serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "" };
  },

  toJSON(message: QueryGetRelayMiningDifficultyRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetRelayMiningDifficultyRequest>, I>>(
    base?: I,
  ): QueryGetRelayMiningDifficultyRequest {
    return QueryGetRelayMiningDifficultyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetRelayMiningDifficultyRequest>, I>>(
    object: I,
  ): QueryGetRelayMiningDifficultyRequest {
    const message = createBaseQueryGetRelayMiningDifficultyRequest();
    message.serviceId = object.serviceId ?? "";
    return message;
  },
};

function createBaseQueryGetRelayMiningDifficultyResponse(): QueryGetRelayMiningDifficultyResponse {
  return { relayMiningDifficulty: undefined };
}

export const QueryGetRelayMiningDifficultyResponse: MessageFns<QueryGetRelayMiningDifficultyResponse> = {
  encode(message: QueryGetRelayMiningDifficultyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.relayMiningDifficulty !== undefined) {
      RelayMiningDifficulty.encode(message.relayMiningDifficulty, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetRelayMiningDifficultyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetRelayMiningDifficultyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.relayMiningDifficulty = RelayMiningDifficulty.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetRelayMiningDifficultyResponse {
    return {
      relayMiningDifficulty: isSet(object.relayMiningDifficulty)
        ? RelayMiningDifficulty.fromJSON(object.relayMiningDifficulty)
        : undefined,
    };
  },

  toJSON(message: QueryGetRelayMiningDifficultyResponse): unknown {
    const obj: any = {};
    if (message.relayMiningDifficulty !== undefined) {
      obj.relayMiningDifficulty = RelayMiningDifficulty.toJSON(message.relayMiningDifficulty);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetRelayMiningDifficultyResponse>, I>>(
    base?: I,
  ): QueryGetRelayMiningDifficultyResponse {
    return QueryGetRelayMiningDifficultyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetRelayMiningDifficultyResponse>, I>>(
    object: I,
  ): QueryGetRelayMiningDifficultyResponse {
    const message = createBaseQueryGetRelayMiningDifficultyResponse();
    message.relayMiningDifficulty =
      (object.relayMiningDifficulty !== undefined && object.relayMiningDifficulty !== null)
        ? RelayMiningDifficulty.fromPartial(object.relayMiningDifficulty)
        : undefined;
    return message;
  },
};

function createBaseQueryAllRelayMiningDifficultyRequest(): QueryAllRelayMiningDifficultyRequest {
  return { pagination: undefined };
}

export const QueryAllRelayMiningDifficultyRequest: MessageFns<QueryAllRelayMiningDifficultyRequest> = {
  encode(message: QueryAllRelayMiningDifficultyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllRelayMiningDifficultyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllRelayMiningDifficultyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllRelayMiningDifficultyRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllRelayMiningDifficultyRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllRelayMiningDifficultyRequest>, I>>(
    base?: I,
  ): QueryAllRelayMiningDifficultyRequest {
    return QueryAllRelayMiningDifficultyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllRelayMiningDifficultyRequest>, I>>(
    object: I,
  ): QueryAllRelayMiningDifficultyRequest {
    const message = createBaseQueryAllRelayMiningDifficultyRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllRelayMiningDifficultyResponse(): QueryAllRelayMiningDifficultyResponse {
  return { relayMiningDifficulty: [], pagination: undefined };
}

export const QueryAllRelayMiningDifficultyResponse: MessageFns<QueryAllRelayMiningDifficultyResponse> = {
  encode(message: QueryAllRelayMiningDifficultyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.relayMiningDifficulty) {
      RelayMiningDifficulty.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllRelayMiningDifficultyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllRelayMiningDifficultyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.relayMiningDifficulty.push(RelayMiningDifficulty.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllRelayMiningDifficultyResponse {
    return {
      relayMiningDifficulty: globalThis.Array.isArray(object?.relayMiningDifficulty)
        ? object.relayMiningDifficulty.map((e: any) => RelayMiningDifficulty.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllRelayMiningDifficultyResponse): unknown {
    const obj: any = {};
    if (message.relayMiningDifficulty?.length) {
      obj.relayMiningDifficulty = message.relayMiningDifficulty.map((e) => RelayMiningDifficulty.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllRelayMiningDifficultyResponse>, I>>(
    base?: I,
  ): QueryAllRelayMiningDifficultyResponse {
    return QueryAllRelayMiningDifficultyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllRelayMiningDifficultyResponse>, I>>(
    object: I,
  ): QueryAllRelayMiningDifficultyResponse {
    const message = createBaseQueryAllRelayMiningDifficultyResponse();
    message.relayMiningDifficulty = object.relayMiningDifficulty?.map((e) => RelayMiningDifficulty.fromPartial(e)) ||
      [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Service items. */
  Service(request: QueryGetServiceRequest): Promise<QueryGetServiceResponse>;
  AllServices(request: QueryAllServicesRequest): Promise<QueryAllServicesResponse>;
  /** Queries a list of RelayMiningDifficulty items. */
  RelayMiningDifficulty(request: QueryGetRelayMiningDifficultyRequest): Promise<QueryGetRelayMiningDifficultyResponse>;
  RelayMiningDifficultyAll(
    request: QueryAllRelayMiningDifficultyRequest,
  ): Promise<QueryAllRelayMiningDifficultyResponse>;
}

export const QueryServiceName = "pocket.service.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Service = this.Service.bind(this);
    this.AllServices = this.AllServices.bind(this);
    this.RelayMiningDifficulty = this.RelayMiningDifficulty.bind(this);
    this.RelayMiningDifficultyAll = this.RelayMiningDifficultyAll.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Service(request: QueryGetServiceRequest): Promise<QueryGetServiceResponse> {
    const data = QueryGetServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Service", data);
    return promise.then((data) => QueryGetServiceResponse.decode(new BinaryReader(data)));
  }

  AllServices(request: QueryAllServicesRequest): Promise<QueryAllServicesResponse> {
    const data = QueryAllServicesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllServices", data);
    return promise.then((data) => QueryAllServicesResponse.decode(new BinaryReader(data)));
  }

  RelayMiningDifficulty(request: QueryGetRelayMiningDifficultyRequest): Promise<QueryGetRelayMiningDifficultyResponse> {
    const data = QueryGetRelayMiningDifficultyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RelayMiningDifficulty", data);
    return promise.then((data) => QueryGetRelayMiningDifficultyResponse.decode(new BinaryReader(data)));
  }

  RelayMiningDifficultyAll(
    request: QueryAllRelayMiningDifficultyRequest,
  ): Promise<QueryAllRelayMiningDifficultyResponse> {
    const data = QueryAllRelayMiningDifficultyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RelayMiningDifficultyAll", data);
    return promise.then((data) => QueryAllRelayMiningDifficultyResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
