// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/service/relay_mining_difficulty.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pocket.service";

/**
 * RelayMiningDifficulty is a message used to store the onchain Relay Mining
 * difficulty associated with a specific service ID.
 * TODO_TECHDEBT: Embed this message in the Service message.
 */
export interface RelayMiningDifficulty {
  /** The service ID the relay mining difficulty is associated with. */
  serviceId: string;
  /**
   * The block height at which this relay mining difficulty was computed.
   * This is needed to determine how much time has passed since the last time
   * the exponential moving average was computed.
   */
  blockHeight: number;
  /** The exponential moving average of the number of relays for this service. */
  numRelaysEma: number;
  /**
   * The target hash determining the difficulty to mine relays for this service.
   * For example, if we use sha256 to hash the (RelayRequest,ReqlayResponse) tuple,
   * and the difficulty has 4 leading zero bits, then the target hash would be:
   * 0b0000111... (until 32 bytes are filled up).
   */
  targetHash: Uint8Array;
}

function createBaseRelayMiningDifficulty(): RelayMiningDifficulty {
  return { serviceId: "", blockHeight: 0, numRelaysEma: 0, targetHash: new Uint8Array(0) };
}

export const RelayMiningDifficulty: MessageFns<RelayMiningDifficulty> = {
  encode(message: RelayMiningDifficulty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== "") {
      writer.uint32(10).string(message.serviceId);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.numRelaysEma !== 0) {
      writer.uint32(24).uint64(message.numRelaysEma);
    }
    if (message.targetHash.length !== 0) {
      writer.uint32(34).bytes(message.targetHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayMiningDifficulty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayMiningDifficulty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numRelaysEma = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayMiningDifficulty {
    return {
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      numRelaysEma: isSet(object.numRelaysEma) ? globalThis.Number(object.numRelaysEma) : 0,
      targetHash: isSet(object.targetHash) ? bytesFromBase64(object.targetHash) : new Uint8Array(0),
    };
  },

  toJSON(message: RelayMiningDifficulty): unknown {
    const obj: any = {};
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.numRelaysEma !== 0) {
      obj.numRelaysEma = Math.round(message.numRelaysEma);
    }
    if (message.targetHash.length !== 0) {
      obj.targetHash = base64FromBytes(message.targetHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayMiningDifficulty>, I>>(base?: I): RelayMiningDifficulty {
    return RelayMiningDifficulty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayMiningDifficulty>, I>>(object: I): RelayMiningDifficulty {
    const message = createBaseRelayMiningDifficulty();
    message.serviceId = object.serviceId ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.numRelaysEma = object.numRelaysEma ?? 0;
    message.targetHash = object.targetHash ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
