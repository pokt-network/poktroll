// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/proof/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "pocket.proof";

/** Params defines the parameters for the module. */
export interface Params {
  /**
   * proof_request_probability is the probability of a session requiring a proof
   * if it's cost (i.e. compute unit consumption) is below the ProofRequirementThreshold.
   */
  proofRequestProbability: number;
  /**
   * proof_requirement_threshold is the session cost (i.e. compute unit consumption)
   * threshold which asserts that a session MUST have a corresponding proof when its cost
   * is equal to or above the threshold. This is in contrast to the this requirement
   * being determined probabilistically via ProofRequestProbability.
   *
   * TODO_MAINNET_MIGRATION: Consider renaming this to `proof_requirement_threshold_upokt`.
   */
  proofRequirementThreshold:
    | Coin
    | undefined;
  /**
   * proof_missing_penalty is the number of tokens (uPOKT) which should be slashed from a supplier
   * when a proof is required (either via proof_requirement_threshold or proof_missing_penalty)
   * but is not provided.
   * TODO_MAINNET_MIGRATION: Consider renaming this to `proof_missing_penalty_upokt`.
   */
  proofMissingPenalty:
    | Coin
    | undefined;
  /**
   * proof_submission_fee is the number of tokens (uPOKT) which should be paid by
   * the supplier operator when submitting a proof.
   * This is needed to account for the cost of storing proofs onchain and prevent
   * spamming (i.e. sybil bloat attacks) the network with non-required proofs.
   * TODO_MAINNET_MIGRATION: Consider renaming this to `proof_submission_fee_upokt`.
   */
  proofSubmissionFee: Coin | undefined;
}

function createBaseParams(): Params {
  return {
    proofRequestProbability: 0,
    proofRequirementThreshold: undefined,
    proofMissingPenalty: undefined,
    proofSubmissionFee: undefined,
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proofRequestProbability !== 0) {
      writer.uint32(17).double(message.proofRequestProbability);
    }
    if (message.proofRequirementThreshold !== undefined) {
      Coin.encode(message.proofRequirementThreshold, writer.uint32(26).fork()).join();
    }
    if (message.proofMissingPenalty !== undefined) {
      Coin.encode(message.proofMissingPenalty, writer.uint32(34).fork()).join();
    }
    if (message.proofSubmissionFee !== undefined) {
      Coin.encode(message.proofSubmissionFee, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.proofRequestProbability = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofRequirementThreshold = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proofMissingPenalty = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proofSubmissionFee = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      proofRequestProbability: isSet(object.proofRequestProbability)
        ? globalThis.Number(object.proofRequestProbability)
        : 0,
      proofRequirementThreshold: isSet(object.proofRequirementThreshold)
        ? Coin.fromJSON(object.proofRequirementThreshold)
        : undefined,
      proofMissingPenalty: isSet(object.proofMissingPenalty) ? Coin.fromJSON(object.proofMissingPenalty) : undefined,
      proofSubmissionFee: isSet(object.proofSubmissionFee) ? Coin.fromJSON(object.proofSubmissionFee) : undefined,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.proofRequestProbability !== 0) {
      obj.proofRequestProbability = message.proofRequestProbability;
    }
    if (message.proofRequirementThreshold !== undefined) {
      obj.proofRequirementThreshold = Coin.toJSON(message.proofRequirementThreshold);
    }
    if (message.proofMissingPenalty !== undefined) {
      obj.proofMissingPenalty = Coin.toJSON(message.proofMissingPenalty);
    }
    if (message.proofSubmissionFee !== undefined) {
      obj.proofSubmissionFee = Coin.toJSON(message.proofSubmissionFee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.proofRequestProbability = object.proofRequestProbability ?? 0;
    message.proofRequirementThreshold =
      (object.proofRequirementThreshold !== undefined && object.proofRequirementThreshold !== null)
        ? Coin.fromPartial(object.proofRequirementThreshold)
        : undefined;
    message.proofMissingPenalty = (object.proofMissingPenalty !== undefined && object.proofMissingPenalty !== null)
      ? Coin.fromPartial(object.proofMissingPenalty)
      : undefined;
    message.proofSubmissionFee = (object.proofSubmissionFee !== undefined && object.proofSubmissionFee !== null)
      ? Coin.fromPartial(object.proofSubmissionFee)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
