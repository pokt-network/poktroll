// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/pocket/proof/tx";
import { MsgCreateClaim } from "./types/pocket/proof/tx";
import { MsgSubmitProof } from "./types/pocket/proof/tx";
import { MsgUpdateParam } from "./types/pocket/proof/tx";

import { EventClaimCreated as typeEventClaimCreated} from "./types"
import { EventClaimUpdated as typeEventClaimUpdated} from "./types"
import { EventProofSubmitted as typeEventProofSubmitted} from "./types"
import { EventProofUpdated as typeEventProofUpdated} from "./types"
import { EventProofValidityChecked as typeEventProofValidityChecked} from "./types"
import { Params as typeParams} from "./types"
import { Proof as typeProof} from "./types"
import { Claim as typeClaim} from "./types"
import { SessionSMT as typeSessionSMT} from "./types"

export { MsgUpdateParams, MsgCreateClaim, MsgSubmitProof, MsgUpdateParam };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateClaimParams = {
  value: MsgCreateClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitProofParams = {
  value: MsgSubmitProof,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamParams = {
  value: MsgUpdateParam,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreateClaimParams = {
  value: MsgCreateClaim,
};

type msgSubmitProofParams = {
  value: MsgSubmitProof,
};

type msgUpdateParamParams = {
  value: MsgUpdateParam,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateClaim({ value, fee, memo }: sendMsgCreateClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateClaim({ value: MsgCreateClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitProof({ value, fee, memo }: sendMsgSubmitProofParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitProof: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitProof({ value: MsgSubmitProof.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitProof: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParam({ value, fee, memo }: sendMsgUpdateParamParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParam: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParam({ value: MsgUpdateParam.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParam: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.proof.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreateClaim({ value }: msgCreateClaimParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.proof.MsgCreateClaim", value: MsgCreateClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateClaim: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitProof({ value }: msgSubmitProofParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.proof.MsgSubmitProof", value: MsgSubmitProof.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitProof: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParam({ value }: msgUpdateParamParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.proof.MsgUpdateParam", value: MsgUpdateParam.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParam: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						EventClaimCreated: getStructure(typeEventClaimCreated.fromPartial({})),
						EventClaimUpdated: getStructure(typeEventClaimUpdated.fromPartial({})),
						EventProofSubmitted: getStructure(typeEventProofSubmitted.fromPartial({})),
						EventProofUpdated: getStructure(typeEventProofUpdated.fromPartial({})),
						EventProofValidityChecked: getStructure(typeEventProofValidityChecked.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						Proof: getStructure(typeProof.fromPartial({})),
						Claim: getStructure(typeClaim.fromPartial({})),
						SessionSMT: getStructure(typeSessionSMT.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			PocketProof: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;