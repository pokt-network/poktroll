// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/application/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { ApplicationServiceConfig } from "../shared/service";

export const protobufPackage = "pocket.application";

/** Application represents the onchain definition and state of an application */
export interface Application {
  /** Bech32 address of the application */
  address: string;
  /** Total amount of staked uPOKT */
  stake:
    | Coin
    | undefined;
  /**
   * CRITICAL: Must contain EXACTLY ONE service config
   * - Enforces a single service configuration per application to prevent over-servicing.
   * - Field is repeated for legacy reasons and potential future compatibility.
   * - References for rationale:
   *   - https://github.com/pokt-network/poktroll/pull/750#discussion_r1735025033
   *   - https://www.notion.so/buildwithgrove/Off-chain-Application-Stake-Tracking-6a8bebb107db4f7f9dc62cbe7ba555f7
   */
  serviceConfigs: ApplicationServiceConfig[];
  /**
   * TODO_MAINNET_MIGRATION(@bryanchriswhite): Rename `delegatee_gateway_addresses` to `gateway_addresses_delegated_to` for better clarity and consistency.
   * - Update all related configs, comments, variables, and function names throughout the codebase to reflect this change.
   * - This field is a non-nullable list of Bech32-encoded delegatee Gateway addresses.
   */
  delegateeGatewayAddresses: string[];
  /**
   * Mapping of session end heights to gateways being undelegated from
   * - Key: Height of the last block of the session when the undelegation transaction was committed
   * - Value: List of gateways being undelegated from at that session end height
   * TODO_DOCUMENT(@red-0ne): Document the complete flow and rationale behind this mapping.
   * - Ensure the documentation explains why tracking pending undelegations by session end height is necessary.
   * - See: https://github.com/pokt-network/poktroll/issues/476#issuecomment-2052639906 for context and examples.
   */
  pendingUndelegations: { [key: number]: UndelegatingGatewayList };
  /** Session end height when application initiated unstaking (0 if not unstaking) */
  unstakeSessionEndHeight: number;
  /** Information about pending application transfers */
  pendingTransfer: PendingApplicationTransfer | undefined;
}

export interface Application_PendingUndelegationsEntry {
  key: number;
  value: UndelegatingGatewayList | undefined;
}

/**
 * UndelegatingGatewayList is used as the Value of `pending_undelegations`.
 * It is required to store a repeated list of strings as a map value.
 */
export interface UndelegatingGatewayList {
  gatewayAddresses: string[];
}

/**
 * PendingTransfer is used to store the details of a pending transfer.
 * It is only intended to be used inside of an Application object.
 */
export interface PendingApplicationTransfer {
  destinationAddress: string;
  sessionEndHeight: number;
}

/**
 * Undelegation represents a connection between an application and a gateway that
 * is in the process of being removed.
 *
 * This record is stored in the undelegation index
 * and used to track and process pending undelegations after the unbonding period has elapsed.
 */
export interface PendingUndelegation {
  /** Address of the application that is undelegating from the gateway. */
  applicationAddress: string;
  /** Address of the gateway that the application is undelegating from. */
  gatewayAddress: string;
}

function createBaseApplication(): Application {
  return {
    address: "",
    stake: undefined,
    serviceConfigs: [],
    delegateeGatewayAddresses: [],
    pendingUndelegations: {},
    unstakeSessionEndHeight: 0,
    pendingTransfer: undefined,
  };
}

export const Application: MessageFns<Application> = {
  encode(message: Application, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.stake !== undefined) {
      Coin.encode(message.stake, writer.uint32(18).fork()).join();
    }
    for (const v of message.serviceConfigs) {
      ApplicationServiceConfig.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.delegateeGatewayAddresses) {
      writer.uint32(34).string(v!);
    }
    Object.entries(message.pendingUndelegations).forEach(([key, value]) => {
      Application_PendingUndelegationsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.unstakeSessionEndHeight !== 0) {
      writer.uint32(48).uint64(message.unstakeSessionEndHeight);
    }
    if (message.pendingTransfer !== undefined) {
      PendingApplicationTransfer.encode(message.pendingTransfer, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stake = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serviceConfigs.push(ApplicationServiceConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.delegateeGatewayAddresses.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = Application_PendingUndelegationsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.pendingUndelegations[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.unstakeSessionEndHeight = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pendingTransfer = PendingApplicationTransfer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      stake: isSet(object.stake) ? Coin.fromJSON(object.stake) : undefined,
      serviceConfigs: globalThis.Array.isArray(object?.serviceConfigs)
        ? object.serviceConfigs.map((e: any) => ApplicationServiceConfig.fromJSON(e))
        : [],
      delegateeGatewayAddresses: globalThis.Array.isArray(object?.delegateeGatewayAddresses)
        ? object.delegateeGatewayAddresses.map((e: any) => globalThis.String(e))
        : [],
      pendingUndelegations: isObject(object.pendingUndelegations)
        ? Object.entries(object.pendingUndelegations).reduce<{ [key: number]: UndelegatingGatewayList }>(
          (acc, [key, value]) => {
            acc[globalThis.Number(key)] = UndelegatingGatewayList.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      unstakeSessionEndHeight: isSet(object.unstakeSessionEndHeight)
        ? globalThis.Number(object.unstakeSessionEndHeight)
        : 0,
      pendingTransfer: isSet(object.pendingTransfer)
        ? PendingApplicationTransfer.fromJSON(object.pendingTransfer)
        : undefined,
    };
  },

  toJSON(message: Application): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.stake !== undefined) {
      obj.stake = Coin.toJSON(message.stake);
    }
    if (message.serviceConfigs?.length) {
      obj.serviceConfigs = message.serviceConfigs.map((e) => ApplicationServiceConfig.toJSON(e));
    }
    if (message.delegateeGatewayAddresses?.length) {
      obj.delegateeGatewayAddresses = message.delegateeGatewayAddresses;
    }
    if (message.pendingUndelegations) {
      const entries = Object.entries(message.pendingUndelegations);
      if (entries.length > 0) {
        obj.pendingUndelegations = {};
        entries.forEach(([k, v]) => {
          obj.pendingUndelegations[k] = UndelegatingGatewayList.toJSON(v);
        });
      }
    }
    if (message.unstakeSessionEndHeight !== 0) {
      obj.unstakeSessionEndHeight = Math.round(message.unstakeSessionEndHeight);
    }
    if (message.pendingTransfer !== undefined) {
      obj.pendingTransfer = PendingApplicationTransfer.toJSON(message.pendingTransfer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Application>, I>>(base?: I): Application {
    return Application.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Application>, I>>(object: I): Application {
    const message = createBaseApplication();
    message.address = object.address ?? "";
    message.stake = (object.stake !== undefined && object.stake !== null) ? Coin.fromPartial(object.stake) : undefined;
    message.serviceConfigs = object.serviceConfigs?.map((e) => ApplicationServiceConfig.fromPartial(e)) || [];
    message.delegateeGatewayAddresses = object.delegateeGatewayAddresses?.map((e) => e) || [];
    message.pendingUndelegations = Object.entries(object.pendingUndelegations ?? {}).reduce<
      { [key: number]: UndelegatingGatewayList }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = UndelegatingGatewayList.fromPartial(value);
      }
      return acc;
    }, {});
    message.unstakeSessionEndHeight = object.unstakeSessionEndHeight ?? 0;
    message.pendingTransfer = (object.pendingTransfer !== undefined && object.pendingTransfer !== null)
      ? PendingApplicationTransfer.fromPartial(object.pendingTransfer)
      : undefined;
    return message;
  },
};

function createBaseApplication_PendingUndelegationsEntry(): Application_PendingUndelegationsEntry {
  return { key: 0, value: undefined };
}

export const Application_PendingUndelegationsEntry: MessageFns<Application_PendingUndelegationsEntry> = {
  encode(message: Application_PendingUndelegationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint64(message.key);
    }
    if (message.value !== undefined) {
      UndelegatingGatewayList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application_PendingUndelegationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication_PendingUndelegationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = UndelegatingGatewayList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application_PendingUndelegationsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? UndelegatingGatewayList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Application_PendingUndelegationsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = UndelegatingGatewayList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Application_PendingUndelegationsEntry>, I>>(
    base?: I,
  ): Application_PendingUndelegationsEntry {
    return Application_PendingUndelegationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Application_PendingUndelegationsEntry>, I>>(
    object: I,
  ): Application_PendingUndelegationsEntry {
    const message = createBaseApplication_PendingUndelegationsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? UndelegatingGatewayList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUndelegatingGatewayList(): UndelegatingGatewayList {
  return { gatewayAddresses: [] };
}

export const UndelegatingGatewayList: MessageFns<UndelegatingGatewayList> = {
  encode(message: UndelegatingGatewayList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gatewayAddresses) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndelegatingGatewayList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndelegatingGatewayList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gatewayAddresses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndelegatingGatewayList {
    return {
      gatewayAddresses: globalThis.Array.isArray(object?.gatewayAddresses)
        ? object.gatewayAddresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UndelegatingGatewayList): unknown {
    const obj: any = {};
    if (message.gatewayAddresses?.length) {
      obj.gatewayAddresses = message.gatewayAddresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UndelegatingGatewayList>, I>>(base?: I): UndelegatingGatewayList {
    return UndelegatingGatewayList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UndelegatingGatewayList>, I>>(object: I): UndelegatingGatewayList {
    const message = createBaseUndelegatingGatewayList();
    message.gatewayAddresses = object.gatewayAddresses?.map((e) => e) || [];
    return message;
  },
};

function createBasePendingApplicationTransfer(): PendingApplicationTransfer {
  return { destinationAddress: "", sessionEndHeight: 0 };
}

export const PendingApplicationTransfer: MessageFns<PendingApplicationTransfer> = {
  encode(message: PendingApplicationTransfer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationAddress !== "") {
      writer.uint32(10).string(message.destinationAddress);
    }
    if (message.sessionEndHeight !== 0) {
      writer.uint32(16).uint64(message.sessionEndHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PendingApplicationTransfer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePendingApplicationTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PendingApplicationTransfer {
    return {
      destinationAddress: isSet(object.destinationAddress) ? globalThis.String(object.destinationAddress) : "",
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
    };
  },

  toJSON(message: PendingApplicationTransfer): unknown {
    const obj: any = {};
    if (message.destinationAddress !== "") {
      obj.destinationAddress = message.destinationAddress;
    }
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PendingApplicationTransfer>, I>>(base?: I): PendingApplicationTransfer {
    return PendingApplicationTransfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PendingApplicationTransfer>, I>>(object: I): PendingApplicationTransfer {
    const message = createBasePendingApplicationTransfer();
    message.destinationAddress = object.destinationAddress ?? "";
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    return message;
  },
};

function createBasePendingUndelegation(): PendingUndelegation {
  return { applicationAddress: "", gatewayAddress: "" };
}

export const PendingUndelegation: MessageFns<PendingUndelegation> = {
  encode(message: PendingUndelegation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationAddress !== "") {
      writer.uint32(10).string(message.applicationAddress);
    }
    if (message.gatewayAddress !== "") {
      writer.uint32(18).string(message.gatewayAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PendingUndelegation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePendingUndelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gatewayAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PendingUndelegation {
    return {
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      gatewayAddress: isSet(object.gatewayAddress) ? globalThis.String(object.gatewayAddress) : "",
    };
  },

  toJSON(message: PendingUndelegation): unknown {
    const obj: any = {};
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.gatewayAddress !== "") {
      obj.gatewayAddress = message.gatewayAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PendingUndelegation>, I>>(base?: I): PendingUndelegation {
    return PendingUndelegation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PendingUndelegation>, I>>(object: I): PendingUndelegation {
    const message = createBasePendingUndelegation();
    message.applicationAddress = object.applicationAddress ?? "";
    message.gatewayAddress = object.gatewayAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
