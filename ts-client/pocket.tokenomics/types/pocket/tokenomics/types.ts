// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/tokenomics/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Claim } from "../proof/types";

export const protobufPackage = "pocket.tokenomics";

/** SettlementOpReason is a distinct, tlm-specific causal reason for a given operation. */
export enum SettlementOpReason {
  /**
   * UNSPECIFIED - UNSPECIFIED is the default value for SettlementOpReason, it is used as a field
   * type for objects which need to distinguish whether a SettlementOpReason has been specified it or not.
   */
  UNSPECIFIED = 0,
  /** TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT - Value transfer (credit/debit) */
  TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT = 1,
  TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN = 2,
  /** TLM_GLOBAL_MINT_INFLATION - Inflation */
  TLM_GLOBAL_MINT_INFLATION = 3,
  /** TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION - Reward distribution */
  TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION = 4,
  TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION = 5,
  TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION = 6,
  TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION = 7,
  TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION = 8,
  TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION = 9,
  /** TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER - Self-servicing mitigation */
  TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER = 10,
  /** UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER - Penalization */
  UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER = 11,
  UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN = 12,
  /** TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER - Module accounting */
  TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER = 13,
  TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER = 14,
  UNRECOGNIZED = -1,
}

export function settlementOpReasonFromJSON(object: any): SettlementOpReason {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SettlementOpReason.UNSPECIFIED;
    case 1:
    case "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT":
      return SettlementOpReason.TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT;
    case 2:
    case "TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN":
      return SettlementOpReason.TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN;
    case 3:
    case "TLM_GLOBAL_MINT_INFLATION":
      return SettlementOpReason.TLM_GLOBAL_MINT_INFLATION;
    case 4:
    case "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION":
      return SettlementOpReason.TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION;
    case 5:
    case "TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION":
      return SettlementOpReason.TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION;
    case 6:
    case "TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION":
      return SettlementOpReason.TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION;
    case 7:
    case "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION":
      return SettlementOpReason.TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION;
    case 8:
    case "TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION":
      return SettlementOpReason.TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION;
    case 9:
    case "TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION":
      return SettlementOpReason.TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION;
    case 10:
    case "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER":
      return SettlementOpReason.TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER;
    case 11:
    case "UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER":
      return SettlementOpReason.UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER;
    case 12:
    case "UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN":
      return SettlementOpReason.UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN;
    case 13:
    case "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER":
      return SettlementOpReason.TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER;
    case 14:
    case "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER":
      return SettlementOpReason.TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SettlementOpReason.UNRECOGNIZED;
  }
}

export function settlementOpReasonToJSON(object: SettlementOpReason): string {
  switch (object) {
    case SettlementOpReason.UNSPECIFIED:
      return "UNSPECIFIED";
    case SettlementOpReason.TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT:
      return "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT";
    case SettlementOpReason.TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN:
      return "TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN";
    case SettlementOpReason.TLM_GLOBAL_MINT_INFLATION:
      return "TLM_GLOBAL_MINT_INFLATION";
    case SettlementOpReason.TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION:
      return "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION";
    case SettlementOpReason.TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION:
      return "TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION";
    case SettlementOpReason.TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION:
      return "TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION";
    case SettlementOpReason.TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION:
      return "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION";
    case SettlementOpReason.TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION:
      return "TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION";
    case SettlementOpReason.TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION:
      return "TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION";
    case SettlementOpReason.TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER:
      return "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER";
    case SettlementOpReason.UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER:
      return "UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER";
    case SettlementOpReason.UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN:
      return "UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN";
    case SettlementOpReason.TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER:
      return "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER";
    case SettlementOpReason.TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER:
      return "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER";
    case SettlementOpReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** SettlementResult holds mint, burn, and transfer operations that result from a single claim settlement. */
export interface ClaimSettlementResult {
  claim: Claim | undefined;
  mints: MintBurnOp[];
  burns: MintBurnOp[];
  modToModTransfers: ModToModTransfer[];
  modToAcctTransfers: ModToAcctTransfer[];
}

/** MintBurnOperation holds the parameters of a mint or burn operation. */
export interface MintBurnOp {
  opReason: SettlementOpReason;
  DestinationModule: string;
  coin: Coin | undefined;
}

/** ModToAcctTransfer holds the parameters of a module to account transfer operation. */
export interface ModToAcctTransfer {
  opReason: SettlementOpReason;
  SenderModule: string;
  /** bech32 address */
  RecipientAddress: string;
  coin: Coin | undefined;
}

/** ModToModTransfer holds the parameters of a module to module transfer operation. */
export interface ModToModTransfer {
  opReason: SettlementOpReason;
  SenderModule: string;
  /** This the semantic module named that can be found by searching for "ModuleName =" in the codebase */
  RecipientModule: string;
  coin: Coin | undefined;
}

function createBaseClaimSettlementResult(): ClaimSettlementResult {
  return { claim: undefined, mints: [], burns: [], modToModTransfers: [], modToAcctTransfers: [] };
}

export const ClaimSettlementResult: MessageFns<ClaimSettlementResult> = {
  encode(message: ClaimSettlementResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claim !== undefined) {
      Claim.encode(message.claim, writer.uint32(10).fork()).join();
    }
    for (const v of message.mints) {
      MintBurnOp.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.burns) {
      MintBurnOp.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.modToModTransfers) {
      ModToModTransfer.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.modToAcctTransfers) {
      ModToAcctTransfer.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimSettlementResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimSettlementResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claim = Claim.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mints.push(MintBurnOp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.burns.push(MintBurnOp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.modToModTransfers.push(ModToModTransfer.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.modToAcctTransfers.push(ModToAcctTransfer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimSettlementResult {
    return {
      claim: isSet(object.claim) ? Claim.fromJSON(object.claim) : undefined,
      mints: globalThis.Array.isArray(object?.mints) ? object.mints.map((e: any) => MintBurnOp.fromJSON(e)) : [],
      burns: globalThis.Array.isArray(object?.burns) ? object.burns.map((e: any) => MintBurnOp.fromJSON(e)) : [],
      modToModTransfers: globalThis.Array.isArray(object?.modToModTransfers)
        ? object.modToModTransfers.map((e: any) => ModToModTransfer.fromJSON(e))
        : [],
      modToAcctTransfers: globalThis.Array.isArray(object?.modToAcctTransfers)
        ? object.modToAcctTransfers.map((e: any) => ModToAcctTransfer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClaimSettlementResult): unknown {
    const obj: any = {};
    if (message.claim !== undefined) {
      obj.claim = Claim.toJSON(message.claim);
    }
    if (message.mints?.length) {
      obj.mints = message.mints.map((e) => MintBurnOp.toJSON(e));
    }
    if (message.burns?.length) {
      obj.burns = message.burns.map((e) => MintBurnOp.toJSON(e));
    }
    if (message.modToModTransfers?.length) {
      obj.modToModTransfers = message.modToModTransfers.map((e) => ModToModTransfer.toJSON(e));
    }
    if (message.modToAcctTransfers?.length) {
      obj.modToAcctTransfers = message.modToAcctTransfers.map((e) => ModToAcctTransfer.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimSettlementResult>, I>>(base?: I): ClaimSettlementResult {
    return ClaimSettlementResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimSettlementResult>, I>>(object: I): ClaimSettlementResult {
    const message = createBaseClaimSettlementResult();
    message.claim = (object.claim !== undefined && object.claim !== null) ? Claim.fromPartial(object.claim) : undefined;
    message.mints = object.mints?.map((e) => MintBurnOp.fromPartial(e)) || [];
    message.burns = object.burns?.map((e) => MintBurnOp.fromPartial(e)) || [];
    message.modToModTransfers = object.modToModTransfers?.map((e) => ModToModTransfer.fromPartial(e)) || [];
    message.modToAcctTransfers = object.modToAcctTransfers?.map((e) => ModToAcctTransfer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMintBurnOp(): MintBurnOp {
  return { opReason: 0, DestinationModule: "", coin: undefined };
}

export const MintBurnOp: MessageFns<MintBurnOp> = {
  encode(message: MintBurnOp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opReason !== 0) {
      writer.uint32(8).int32(message.opReason);
    }
    if (message.DestinationModule !== "") {
      writer.uint32(18).string(message.DestinationModule);
    }
    if (message.coin !== undefined) {
      Coin.encode(message.coin, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MintBurnOp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintBurnOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.opReason = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.DestinationModule = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.coin = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintBurnOp {
    return {
      opReason: isSet(object.opReason) ? settlementOpReasonFromJSON(object.opReason) : 0,
      DestinationModule: isSet(object.DestinationModule) ? globalThis.String(object.DestinationModule) : "",
      coin: isSet(object.coin) ? Coin.fromJSON(object.coin) : undefined,
    };
  },

  toJSON(message: MintBurnOp): unknown {
    const obj: any = {};
    if (message.opReason !== 0) {
      obj.opReason = settlementOpReasonToJSON(message.opReason);
    }
    if (message.DestinationModule !== "") {
      obj.DestinationModule = message.DestinationModule;
    }
    if (message.coin !== undefined) {
      obj.coin = Coin.toJSON(message.coin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintBurnOp>, I>>(base?: I): MintBurnOp {
    return MintBurnOp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintBurnOp>, I>>(object: I): MintBurnOp {
    const message = createBaseMintBurnOp();
    message.opReason = object.opReason ?? 0;
    message.DestinationModule = object.DestinationModule ?? "";
    message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
    return message;
  },
};

function createBaseModToAcctTransfer(): ModToAcctTransfer {
  return { opReason: 0, SenderModule: "", RecipientAddress: "", coin: undefined };
}

export const ModToAcctTransfer: MessageFns<ModToAcctTransfer> = {
  encode(message: ModToAcctTransfer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opReason !== 0) {
      writer.uint32(8).int32(message.opReason);
    }
    if (message.SenderModule !== "") {
      writer.uint32(18).string(message.SenderModule);
    }
    if (message.RecipientAddress !== "") {
      writer.uint32(26).string(message.RecipientAddress);
    }
    if (message.coin !== undefined) {
      Coin.encode(message.coin, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModToAcctTransfer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModToAcctTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.opReason = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.SenderModule = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.RecipientAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coin = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModToAcctTransfer {
    return {
      opReason: isSet(object.opReason) ? settlementOpReasonFromJSON(object.opReason) : 0,
      SenderModule: isSet(object.SenderModule) ? globalThis.String(object.SenderModule) : "",
      RecipientAddress: isSet(object.RecipientAddress) ? globalThis.String(object.RecipientAddress) : "",
      coin: isSet(object.coin) ? Coin.fromJSON(object.coin) : undefined,
    };
  },

  toJSON(message: ModToAcctTransfer): unknown {
    const obj: any = {};
    if (message.opReason !== 0) {
      obj.opReason = settlementOpReasonToJSON(message.opReason);
    }
    if (message.SenderModule !== "") {
      obj.SenderModule = message.SenderModule;
    }
    if (message.RecipientAddress !== "") {
      obj.RecipientAddress = message.RecipientAddress;
    }
    if (message.coin !== undefined) {
      obj.coin = Coin.toJSON(message.coin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModToAcctTransfer>, I>>(base?: I): ModToAcctTransfer {
    return ModToAcctTransfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModToAcctTransfer>, I>>(object: I): ModToAcctTransfer {
    const message = createBaseModToAcctTransfer();
    message.opReason = object.opReason ?? 0;
    message.SenderModule = object.SenderModule ?? "";
    message.RecipientAddress = object.RecipientAddress ?? "";
    message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
    return message;
  },
};

function createBaseModToModTransfer(): ModToModTransfer {
  return { opReason: 0, SenderModule: "", RecipientModule: "", coin: undefined };
}

export const ModToModTransfer: MessageFns<ModToModTransfer> = {
  encode(message: ModToModTransfer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opReason !== 0) {
      writer.uint32(8).int32(message.opReason);
    }
    if (message.SenderModule !== "") {
      writer.uint32(18).string(message.SenderModule);
    }
    if (message.RecipientModule !== "") {
      writer.uint32(26).string(message.RecipientModule);
    }
    if (message.coin !== undefined) {
      Coin.encode(message.coin, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModToModTransfer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModToModTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.opReason = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.SenderModule = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.RecipientModule = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coin = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModToModTransfer {
    return {
      opReason: isSet(object.opReason) ? settlementOpReasonFromJSON(object.opReason) : 0,
      SenderModule: isSet(object.SenderModule) ? globalThis.String(object.SenderModule) : "",
      RecipientModule: isSet(object.RecipientModule) ? globalThis.String(object.RecipientModule) : "",
      coin: isSet(object.coin) ? Coin.fromJSON(object.coin) : undefined,
    };
  },

  toJSON(message: ModToModTransfer): unknown {
    const obj: any = {};
    if (message.opReason !== 0) {
      obj.opReason = settlementOpReasonToJSON(message.opReason);
    }
    if (message.SenderModule !== "") {
      obj.SenderModule = message.SenderModule;
    }
    if (message.RecipientModule !== "") {
      obj.RecipientModule = message.RecipientModule;
    }
    if (message.coin !== undefined) {
      obj.coin = Coin.toJSON(message.coin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModToModTransfer>, I>>(base?: I): ModToModTransfer {
    return ModToModTransfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModToModTransfer>, I>>(object: I): ModToModTransfer {
    const message = createBaseModToModTransfer();
    message.opReason = object.opReason ?? 0;
    message.SenderModule = object.SenderModule ?? "";
    message.RecipientModule = object.RecipientModule ?? "";
    message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
