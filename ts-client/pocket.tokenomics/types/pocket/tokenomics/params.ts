// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/tokenomics/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pocket.tokenomics";

/** Params defines the parameters for the tokenomics module. */
export interface Params {
  /**
   * mint_allocation_percentages represents the distribution of newly minted tokens,
   * at the end of claim settlement, as a result of the Global Mint TLM.
   */
  mintAllocationPercentages:
    | MintAllocationPercentages
    | undefined;
  /**
   * dao_reward_address is the address to which mint_allocation_dao percentage of the
   * minted tokens are at the end of claim settlement.
   */
  daoRewardAddress: string;
  /** global_inflation_per_claim is the percentage of a claim's claimable uPOKT amount which will be minted on settlement. */
  globalInflationPerClaim: number;
}

/**
 * MintAllocationPercentages represents the distribution of newly minted tokens,
 * at the end of claim settlement, as a result of the Global Mint TLM.
 */
export interface MintAllocationPercentages {
  /**
   * dao is the percentage of the minted tokens which are sent
   * to the DAO reward address during claim settlement.
   */
  dao: number;
  /**
   * proposer is the percentage of the minted tokens which are sent
   * to the block proposer account address during claim settlement.
   */
  proposer: number;
  /**
   * supplier is the percentage of the minted tokens which are sent
   * to the block supplier account address during claim settlement.
   */
  supplier: number;
  /**
   * source_owner is the percentage of the minted tokens which are sent
   * to the service source owner account address during claim settlement.
   */
  sourceOwner: number;
  /**
   * allocation_application is the percentage of the minted tokens which are sent
   * to the application account address during claim settlement.
   */
  application: number;
}

function createBaseParams(): Params {
  return { mintAllocationPercentages: undefined, daoRewardAddress: "", globalInflationPerClaim: 0 };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintAllocationPercentages !== undefined) {
      MintAllocationPercentages.encode(message.mintAllocationPercentages, writer.uint32(10).fork()).join();
    }
    if (message.daoRewardAddress !== "") {
      writer.uint32(50).string(message.daoRewardAddress);
    }
    if (message.globalInflationPerClaim !== 0) {
      writer.uint32(57).double(message.globalInflationPerClaim);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintAllocationPercentages = MintAllocationPercentages.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.daoRewardAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.globalInflationPerClaim = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      mintAllocationPercentages: isSet(object.mintAllocationPercentages)
        ? MintAllocationPercentages.fromJSON(object.mintAllocationPercentages)
        : undefined,
      daoRewardAddress: isSet(object.daoRewardAddress) ? globalThis.String(object.daoRewardAddress) : "",
      globalInflationPerClaim: isSet(object.globalInflationPerClaim)
        ? globalThis.Number(object.globalInflationPerClaim)
        : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.mintAllocationPercentages !== undefined) {
      obj.mintAllocationPercentages = MintAllocationPercentages.toJSON(message.mintAllocationPercentages);
    }
    if (message.daoRewardAddress !== "") {
      obj.daoRewardAddress = message.daoRewardAddress;
    }
    if (message.globalInflationPerClaim !== 0) {
      obj.globalInflationPerClaim = message.globalInflationPerClaim;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.mintAllocationPercentages =
      (object.mintAllocationPercentages !== undefined && object.mintAllocationPercentages !== null)
        ? MintAllocationPercentages.fromPartial(object.mintAllocationPercentages)
        : undefined;
    message.daoRewardAddress = object.daoRewardAddress ?? "";
    message.globalInflationPerClaim = object.globalInflationPerClaim ?? 0;
    return message;
  },
};

function createBaseMintAllocationPercentages(): MintAllocationPercentages {
  return { dao: 0, proposer: 0, supplier: 0, sourceOwner: 0, application: 0 };
}

export const MintAllocationPercentages: MessageFns<MintAllocationPercentages> = {
  encode(message: MintAllocationPercentages, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dao !== 0) {
      writer.uint32(9).double(message.dao);
    }
    if (message.proposer !== 0) {
      writer.uint32(17).double(message.proposer);
    }
    if (message.supplier !== 0) {
      writer.uint32(25).double(message.supplier);
    }
    if (message.sourceOwner !== 0) {
      writer.uint32(33).double(message.sourceOwner);
    }
    if (message.application !== 0) {
      writer.uint32(41).double(message.application);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MintAllocationPercentages {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintAllocationPercentages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.dao = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.proposer = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.supplier = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.sourceOwner = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.application = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintAllocationPercentages {
    return {
      dao: isSet(object.dao) ? globalThis.Number(object.dao) : 0,
      proposer: isSet(object.proposer) ? globalThis.Number(object.proposer) : 0,
      supplier: isSet(object.supplier) ? globalThis.Number(object.supplier) : 0,
      sourceOwner: isSet(object.sourceOwner) ? globalThis.Number(object.sourceOwner) : 0,
      application: isSet(object.application) ? globalThis.Number(object.application) : 0,
    };
  },

  toJSON(message: MintAllocationPercentages): unknown {
    const obj: any = {};
    if (message.dao !== 0) {
      obj.dao = message.dao;
    }
    if (message.proposer !== 0) {
      obj.proposer = message.proposer;
    }
    if (message.supplier !== 0) {
      obj.supplier = message.supplier;
    }
    if (message.sourceOwner !== 0) {
      obj.sourceOwner = message.sourceOwner;
    }
    if (message.application !== 0) {
      obj.application = message.application;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintAllocationPercentages>, I>>(base?: I): MintAllocationPercentages {
    return MintAllocationPercentages.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintAllocationPercentages>, I>>(object: I): MintAllocationPercentages {
    const message = createBaseMintAllocationPercentages();
    message.dao = object.dao ?? 0;
    message.proposer = object.proposer ?? 0;
    message.supplier = object.supplier ?? 0;
    message.sourceOwner = object.sourceOwner ?? 0;
    message.application = object.application ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
