// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/session/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Application } from "../application/types";
import { Supplier } from "../shared/supplier";

export const protobufPackage = "pocket.session";

/**
 * SessionHeader is a lightweight header for a session that can be passed around.
 * It is the minimal amount of data required to hydrate & retrieve all data relevant to the session.
 */
export interface SessionHeader {
  /** The Bech32 address of the application. */
  applicationAddress: string;
  /** The service id this session is for */
  serviceId: string;
  /** NOTE: session_id can be derived from the above values using onchain but is included in the header for convenience */
  sessionId: string;
  /** The height at which this session started */
  sessionStartBlockHeight: number;
  /**
   * Note that`session_end_block_height` is a derivative of (`start` + `num_blocks_per_session`)
   * as governed by onchain params at the time of the session start.
   * It is stored as an additional field to simplify business logic in case
   * the number of blocks_per_session changes during the session.
   */
  sessionEndBlockHeight: number;
}

/**
 * Session is a fully hydrated session object that contains all the information for the Session
 * and its participants.
 */
export interface Session {
  /** The header of the session containing lightweight data */
  header:
    | SessionHeader
    | undefined;
  /** A unique pseudorandom ID for this session */
  sessionId: string;
  /** The session number since genesis */
  sessionNumber: number;
  /** The number of blocks per session when this session started */
  numBlocksPerSession: number;
  /** A fully hydrated application object this session is for */
  application:
    | Application
    | undefined;
  /** A fully hydrated set of servicers that are serving the application */
  suppliers: Supplier[];
}

function createBaseSessionHeader(): SessionHeader {
  return { applicationAddress: "", serviceId: "", sessionId: "", sessionStartBlockHeight: 0, sessionEndBlockHeight: 0 };
}

export const SessionHeader: MessageFns<SessionHeader> = {
  encode(message: SessionHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationAddress !== "") {
      writer.uint32(10).string(message.applicationAddress);
    }
    if (message.serviceId !== "") {
      writer.uint32(18).string(message.serviceId);
    }
    if (message.sessionId !== "") {
      writer.uint32(26).string(message.sessionId);
    }
    if (message.sessionStartBlockHeight !== 0) {
      writer.uint32(32).int64(message.sessionStartBlockHeight);
    }
    if (message.sessionEndBlockHeight !== 0) {
      writer.uint32(40).int64(message.sessionEndBlockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sessionStartBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sessionEndBlockHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionHeader {
    return {
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      sessionStartBlockHeight: isSet(object.sessionStartBlockHeight)
        ? globalThis.Number(object.sessionStartBlockHeight)
        : 0,
      sessionEndBlockHeight: isSet(object.sessionEndBlockHeight) ? globalThis.Number(object.sessionEndBlockHeight) : 0,
    };
  },

  toJSON(message: SessionHeader): unknown {
    const obj: any = {};
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.sessionStartBlockHeight !== 0) {
      obj.sessionStartBlockHeight = Math.round(message.sessionStartBlockHeight);
    }
    if (message.sessionEndBlockHeight !== 0) {
      obj.sessionEndBlockHeight = Math.round(message.sessionEndBlockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionHeader>, I>>(base?: I): SessionHeader {
    return SessionHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionHeader>, I>>(object: I): SessionHeader {
    const message = createBaseSessionHeader();
    message.applicationAddress = object.applicationAddress ?? "";
    message.serviceId = object.serviceId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.sessionStartBlockHeight = object.sessionStartBlockHeight ?? 0;
    message.sessionEndBlockHeight = object.sessionEndBlockHeight ?? 0;
    return message;
  },
};

function createBaseSession(): Session {
  return {
    header: undefined,
    sessionId: "",
    sessionNumber: 0,
    numBlocksPerSession: 0,
    application: undefined,
    suppliers: [],
  };
}

export const Session: MessageFns<Session> = {
  encode(message: Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      SessionHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    if (message.sessionNumber !== 0) {
      writer.uint32(24).int64(message.sessionNumber);
    }
    if (message.numBlocksPerSession !== 0) {
      writer.uint32(32).int64(message.numBlocksPerSession);
    }
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(42).fork()).join();
    }
    for (const v of message.suppliers) {
      Supplier.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = SessionHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sessionNumber = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numBlocksPerSession = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.suppliers.push(Supplier.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return {
      header: isSet(object.header) ? SessionHeader.fromJSON(object.header) : undefined,
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      sessionNumber: isSet(object.sessionNumber) ? globalThis.Number(object.sessionNumber) : 0,
      numBlocksPerSession: isSet(object.numBlocksPerSession) ? globalThis.Number(object.numBlocksPerSession) : 0,
      application: isSet(object.application) ? Application.fromJSON(object.application) : undefined,
      suppliers: globalThis.Array.isArray(object?.suppliers)
        ? object.suppliers.map((e: any) => Supplier.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = SessionHeader.toJSON(message.header);
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.sessionNumber !== 0) {
      obj.sessionNumber = Math.round(message.sessionNumber);
    }
    if (message.numBlocksPerSession !== 0) {
      obj.numBlocksPerSession = Math.round(message.numBlocksPerSession);
    }
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    if (message.suppliers?.length) {
      obj.suppliers = message.suppliers.map((e) => Supplier.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Session>, I>>(base?: I): Session {
    return Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Session>, I>>(object: I): Session {
    const message = createBaseSession();
    message.header = (object.header !== undefined && object.header !== null)
      ? SessionHeader.fromPartial(object.header)
      : undefined;
    message.sessionId = object.sessionId ?? "";
    message.sessionNumber = object.sessionNumber ?? 0;
    message.numBlocksPerSession = object.numBlocksPerSession ?? 0;
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    message.suppliers = object.suppliers?.map((e) => Supplier.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
