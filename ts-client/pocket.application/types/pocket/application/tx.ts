// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/application/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { ApplicationServiceConfig } from "../shared/service";
import { Params } from "./params";
import { Application } from "./types";

export const protobufPackage = "pocket.application";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /**
   * params defines the x/application parameters to update.
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgStakeApplication {
  /** The Bech32 address of the application. */
  address: string;
  /** The total amount of uPOKT the application has staked. Must be â‰¥ to the current amount that the application has staked (if any) */
  stake:
    | Coin
    | undefined;
  /** The list of services this application is staked to request service for */
  services: ApplicationServiceConfig[];
}

export interface MsgStakeApplicationResponse {
  application: Application | undefined;
}

export interface MsgUnstakeApplication {
  address: string;
}

export interface MsgUnstakeApplicationResponse {
  application: Application | undefined;
}

export interface MsgDelegateToGateway {
  /** The Bech32 address of the application. */
  appAddress: string;
  /** The Bech32 address of the gateway the application wants to delegate to. */
  gatewayAddress: string;
}

export interface MsgDelegateToGatewayResponse {
  application: Application | undefined;
}

export interface MsgUndelegateFromGateway {
  /** The Bech32 address of the application. */
  appAddress: string;
  /** The Bech32 address of the gateway the application wants to undelegate from. */
  gatewayAddress: string;
}

export interface MsgUndelegateFromGatewayResponse {
  application: Application | undefined;
}

export interface MsgTransferApplication {
  sourceAddress: string;
  destinationAddress: string;
}

export interface MsgTransferApplicationResponse {
  application: Application | undefined;
}

export interface MsgUpdateParam {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  name: string;
  asUint64?: number | undefined;
  asCoin?: Coin | undefined;
}

export interface MsgUpdateParamResponse {
  params: Params | undefined;
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgStakeApplication(): MsgStakeApplication {
  return { address: "", stake: undefined, services: [] };
}

export const MsgStakeApplication: MessageFns<MsgStakeApplication> = {
  encode(message: MsgStakeApplication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.stake !== undefined) {
      Coin.encode(message.stake, writer.uint32(18).fork()).join();
    }
    for (const v of message.services) {
      ApplicationServiceConfig.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgStakeApplication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgStakeApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stake = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.services.push(ApplicationServiceConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgStakeApplication {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      stake: isSet(object.stake) ? Coin.fromJSON(object.stake) : undefined,
      services: globalThis.Array.isArray(object?.services)
        ? object.services.map((e: any) => ApplicationServiceConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgStakeApplication): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.stake !== undefined) {
      obj.stake = Coin.toJSON(message.stake);
    }
    if (message.services?.length) {
      obj.services = message.services.map((e) => ApplicationServiceConfig.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgStakeApplication>, I>>(base?: I): MsgStakeApplication {
    return MsgStakeApplication.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgStakeApplication>, I>>(object: I): MsgStakeApplication {
    const message = createBaseMsgStakeApplication();
    message.address = object.address ?? "";
    message.stake = (object.stake !== undefined && object.stake !== null) ? Coin.fromPartial(object.stake) : undefined;
    message.services = object.services?.map((e) => ApplicationServiceConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgStakeApplicationResponse(): MsgStakeApplicationResponse {
  return { application: undefined };
}

export const MsgStakeApplicationResponse: MessageFns<MsgStakeApplicationResponse> = {
  encode(message: MsgStakeApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgStakeApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgStakeApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgStakeApplicationResponse {
    return { application: isSet(object.application) ? Application.fromJSON(object.application) : undefined };
  },

  toJSON(message: MsgStakeApplicationResponse): unknown {
    const obj: any = {};
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgStakeApplicationResponse>, I>>(base?: I): MsgStakeApplicationResponse {
    return MsgStakeApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgStakeApplicationResponse>, I>>(object: I): MsgStakeApplicationResponse {
    const message = createBaseMsgStakeApplicationResponse();
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseMsgUnstakeApplication(): MsgUnstakeApplication {
  return { address: "" };
}

export const MsgUnstakeApplication: MessageFns<MsgUnstakeApplication> = {
  encode(message: MsgUnstakeApplication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUnstakeApplication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnstakeApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUnstakeApplication {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: MsgUnstakeApplication): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnstakeApplication>, I>>(base?: I): MsgUnstakeApplication {
    return MsgUnstakeApplication.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnstakeApplication>, I>>(object: I): MsgUnstakeApplication {
    const message = createBaseMsgUnstakeApplication();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseMsgUnstakeApplicationResponse(): MsgUnstakeApplicationResponse {
  return { application: undefined };
}

export const MsgUnstakeApplicationResponse: MessageFns<MsgUnstakeApplicationResponse> = {
  encode(message: MsgUnstakeApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUnstakeApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnstakeApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUnstakeApplicationResponse {
    return { application: isSet(object.application) ? Application.fromJSON(object.application) : undefined };
  },

  toJSON(message: MsgUnstakeApplicationResponse): unknown {
    const obj: any = {};
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnstakeApplicationResponse>, I>>(base?: I): MsgUnstakeApplicationResponse {
    return MsgUnstakeApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnstakeApplicationResponse>, I>>(
    object: I,
  ): MsgUnstakeApplicationResponse {
    const message = createBaseMsgUnstakeApplicationResponse();
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseMsgDelegateToGateway(): MsgDelegateToGateway {
  return { appAddress: "", gatewayAddress: "" };
}

export const MsgDelegateToGateway: MessageFns<MsgDelegateToGateway> = {
  encode(message: MsgDelegateToGateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appAddress !== "") {
      writer.uint32(10).string(message.appAddress);
    }
    if (message.gatewayAddress !== "") {
      writer.uint32(18).string(message.gatewayAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegateToGateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateToGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gatewayAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDelegateToGateway {
    return {
      appAddress: isSet(object.appAddress) ? globalThis.String(object.appAddress) : "",
      gatewayAddress: isSet(object.gatewayAddress) ? globalThis.String(object.gatewayAddress) : "",
    };
  },

  toJSON(message: MsgDelegateToGateway): unknown {
    const obj: any = {};
    if (message.appAddress !== "") {
      obj.appAddress = message.appAddress;
    }
    if (message.gatewayAddress !== "") {
      obj.gatewayAddress = message.gatewayAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDelegateToGateway>, I>>(base?: I): MsgDelegateToGateway {
    return MsgDelegateToGateway.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDelegateToGateway>, I>>(object: I): MsgDelegateToGateway {
    const message = createBaseMsgDelegateToGateway();
    message.appAddress = object.appAddress ?? "";
    message.gatewayAddress = object.gatewayAddress ?? "";
    return message;
  },
};

function createBaseMsgDelegateToGatewayResponse(): MsgDelegateToGatewayResponse {
  return { application: undefined };
}

export const MsgDelegateToGatewayResponse: MessageFns<MsgDelegateToGatewayResponse> = {
  encode(message: MsgDelegateToGatewayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegateToGatewayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateToGatewayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDelegateToGatewayResponse {
    return { application: isSet(object.application) ? Application.fromJSON(object.application) : undefined };
  },

  toJSON(message: MsgDelegateToGatewayResponse): unknown {
    const obj: any = {};
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDelegateToGatewayResponse>, I>>(base?: I): MsgDelegateToGatewayResponse {
    return MsgDelegateToGatewayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDelegateToGatewayResponse>, I>>(object: I): MsgDelegateToGatewayResponse {
    const message = createBaseMsgDelegateToGatewayResponse();
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseMsgUndelegateFromGateway(): MsgUndelegateFromGateway {
  return { appAddress: "", gatewayAddress: "" };
}

export const MsgUndelegateFromGateway: MessageFns<MsgUndelegateFromGateway> = {
  encode(message: MsgUndelegateFromGateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appAddress !== "") {
      writer.uint32(10).string(message.appAddress);
    }
    if (message.gatewayAddress !== "") {
      writer.uint32(18).string(message.gatewayAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUndelegateFromGateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegateFromGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gatewayAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUndelegateFromGateway {
    return {
      appAddress: isSet(object.appAddress) ? globalThis.String(object.appAddress) : "",
      gatewayAddress: isSet(object.gatewayAddress) ? globalThis.String(object.gatewayAddress) : "",
    };
  },

  toJSON(message: MsgUndelegateFromGateway): unknown {
    const obj: any = {};
    if (message.appAddress !== "") {
      obj.appAddress = message.appAddress;
    }
    if (message.gatewayAddress !== "") {
      obj.gatewayAddress = message.gatewayAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUndelegateFromGateway>, I>>(base?: I): MsgUndelegateFromGateway {
    return MsgUndelegateFromGateway.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUndelegateFromGateway>, I>>(object: I): MsgUndelegateFromGateway {
    const message = createBaseMsgUndelegateFromGateway();
    message.appAddress = object.appAddress ?? "";
    message.gatewayAddress = object.gatewayAddress ?? "";
    return message;
  },
};

function createBaseMsgUndelegateFromGatewayResponse(): MsgUndelegateFromGatewayResponse {
  return { application: undefined };
}

export const MsgUndelegateFromGatewayResponse: MessageFns<MsgUndelegateFromGatewayResponse> = {
  encode(message: MsgUndelegateFromGatewayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUndelegateFromGatewayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegateFromGatewayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUndelegateFromGatewayResponse {
    return { application: isSet(object.application) ? Application.fromJSON(object.application) : undefined };
  },

  toJSON(message: MsgUndelegateFromGatewayResponse): unknown {
    const obj: any = {};
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUndelegateFromGatewayResponse>, I>>(
    base?: I,
  ): MsgUndelegateFromGatewayResponse {
    return MsgUndelegateFromGatewayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUndelegateFromGatewayResponse>, I>>(
    object: I,
  ): MsgUndelegateFromGatewayResponse {
    const message = createBaseMsgUndelegateFromGatewayResponse();
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseMsgTransferApplication(): MsgTransferApplication {
  return { sourceAddress: "", destinationAddress: "" };
}

export const MsgTransferApplication: MessageFns<MsgTransferApplication> = {
  encode(message: MsgTransferApplication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceAddress !== "") {
      writer.uint32(10).string(message.sourceAddress);
    }
    if (message.destinationAddress !== "") {
      writer.uint32(18).string(message.destinationAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgTransferApplication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgTransferApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgTransferApplication {
    return {
      sourceAddress: isSet(object.sourceAddress) ? globalThis.String(object.sourceAddress) : "",
      destinationAddress: isSet(object.destinationAddress) ? globalThis.String(object.destinationAddress) : "",
    };
  },

  toJSON(message: MsgTransferApplication): unknown {
    const obj: any = {};
    if (message.sourceAddress !== "") {
      obj.sourceAddress = message.sourceAddress;
    }
    if (message.destinationAddress !== "") {
      obj.destinationAddress = message.destinationAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgTransferApplication>, I>>(base?: I): MsgTransferApplication {
    return MsgTransferApplication.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgTransferApplication>, I>>(object: I): MsgTransferApplication {
    const message = createBaseMsgTransferApplication();
    message.sourceAddress = object.sourceAddress ?? "";
    message.destinationAddress = object.destinationAddress ?? "";
    return message;
  },
};

function createBaseMsgTransferApplicationResponse(): MsgTransferApplicationResponse {
  return { application: undefined };
}

export const MsgTransferApplicationResponse: MessageFns<MsgTransferApplicationResponse> = {
  encode(message: MsgTransferApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgTransferApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgTransferApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgTransferApplicationResponse {
    return { application: isSet(object.application) ? Application.fromJSON(object.application) : undefined };
  },

  toJSON(message: MsgTransferApplicationResponse): unknown {
    const obj: any = {};
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgTransferApplicationResponse>, I>>(base?: I): MsgTransferApplicationResponse {
    return MsgTransferApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgTransferApplicationResponse>, I>>(
    object: I,
  ): MsgTransferApplicationResponse {
    const message = createBaseMsgTransferApplicationResponse();
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParam(): MsgUpdateParam {
  return { authority: "", name: "", asUint64: undefined, asCoin: undefined };
}

export const MsgUpdateParam: MessageFns<MsgUpdateParam> = {
  encode(message: MsgUpdateParam, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.asUint64 !== undefined) {
      writer.uint32(24).uint64(message.asUint64);
    }
    if (message.asCoin !== undefined) {
      Coin.encode(message.asCoin, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.asUint64 = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.asCoin = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParam {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      asUint64: isSet(object.asUint64) ? globalThis.Number(object.asUint64) : undefined,
      asCoin: isSet(object.asCoin) ? Coin.fromJSON(object.asCoin) : undefined,
    };
  },

  toJSON(message: MsgUpdateParam): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.asUint64 !== undefined) {
      obj.asUint64 = Math.round(message.asUint64);
    }
    if (message.asCoin !== undefined) {
      obj.asCoin = Coin.toJSON(message.asCoin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParam>, I>>(base?: I): MsgUpdateParam {
    return MsgUpdateParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParam>, I>>(object: I): MsgUpdateParam {
    const message = createBaseMsgUpdateParam();
    message.authority = object.authority ?? "";
    message.name = object.name ?? "";
    message.asUint64 = object.asUint64 ?? undefined;
    message.asCoin = (object.asCoin !== undefined && object.asCoin !== null)
      ? Coin.fromPartial(object.asCoin)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamResponse(): MsgUpdateParamResponse {
  return { params: undefined };
}

export const MsgUpdateParamResponse: MessageFns<MsgUpdateParamResponse> = {
  encode(message: MsgUpdateParamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParamResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: MsgUpdateParamResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamResponse>, I>>(base?: I): MsgUpdateParamResponse {
    return MsgUpdateParamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamResponse>, I>>(object: I): MsgUpdateParamResponse {
    const message = createBaseMsgUpdateParamResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  StakeApplication(request: MsgStakeApplication): Promise<MsgStakeApplicationResponse>;
  UnstakeApplication(request: MsgUnstakeApplication): Promise<MsgUnstakeApplicationResponse>;
  DelegateToGateway(request: MsgDelegateToGateway): Promise<MsgDelegateToGatewayResponse>;
  UndelegateFromGateway(request: MsgUndelegateFromGateway): Promise<MsgUndelegateFromGatewayResponse>;
  TransferApplication(request: MsgTransferApplication): Promise<MsgTransferApplicationResponse>;
  UpdateParam(request: MsgUpdateParam): Promise<MsgUpdateParamResponse>;
}

export const MsgServiceName = "pocket.application.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.StakeApplication = this.StakeApplication.bind(this);
    this.UnstakeApplication = this.UnstakeApplication.bind(this);
    this.DelegateToGateway = this.DelegateToGateway.bind(this);
    this.UndelegateFromGateway = this.UndelegateFromGateway.bind(this);
    this.TransferApplication = this.TransferApplication.bind(this);
    this.UpdateParam = this.UpdateParam.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  StakeApplication(request: MsgStakeApplication): Promise<MsgStakeApplicationResponse> {
    const data = MsgStakeApplication.encode(request).finish();
    const promise = this.rpc.request(this.service, "StakeApplication", data);
    return promise.then((data) => MsgStakeApplicationResponse.decode(new BinaryReader(data)));
  }

  UnstakeApplication(request: MsgUnstakeApplication): Promise<MsgUnstakeApplicationResponse> {
    const data = MsgUnstakeApplication.encode(request).finish();
    const promise = this.rpc.request(this.service, "UnstakeApplication", data);
    return promise.then((data) => MsgUnstakeApplicationResponse.decode(new BinaryReader(data)));
  }

  DelegateToGateway(request: MsgDelegateToGateway): Promise<MsgDelegateToGatewayResponse> {
    const data = MsgDelegateToGateway.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegateToGateway", data);
    return promise.then((data) => MsgDelegateToGatewayResponse.decode(new BinaryReader(data)));
  }

  UndelegateFromGateway(request: MsgUndelegateFromGateway): Promise<MsgUndelegateFromGatewayResponse> {
    const data = MsgUndelegateFromGateway.encode(request).finish();
    const promise = this.rpc.request(this.service, "UndelegateFromGateway", data);
    return promise.then((data) => MsgUndelegateFromGatewayResponse.decode(new BinaryReader(data)));
  }

  TransferApplication(request: MsgTransferApplication): Promise<MsgTransferApplicationResponse> {
    const data = MsgTransferApplication.encode(request).finish();
    const promise = this.rpc.request(this.service, "TransferApplication", data);
    return promise.then((data) => MsgTransferApplicationResponse.decode(new BinaryReader(data)));
  }

  UpdateParam(request: MsgUpdateParam): Promise<MsgUpdateParamResponse> {
    const data = MsgUpdateParam.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParam", data);
    return promise.then((data) => MsgUpdateParamResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
