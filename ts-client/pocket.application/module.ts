// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/pocket/application/tx";
import { MsgStakeApplication } from "./types/pocket/application/tx";
import { MsgUnstakeApplication } from "./types/pocket/application/tx";
import { MsgDelegateToGateway } from "./types/pocket/application/tx";
import { MsgUndelegateFromGateway } from "./types/pocket/application/tx";
import { MsgTransferApplication } from "./types/pocket/application/tx";
import { MsgUpdateParam } from "./types/pocket/application/tx";

import { EventApplicationStaked as typeEventApplicationStaked} from "./types"
import { EventRedelegation as typeEventRedelegation} from "./types"
import { EventTransferBegin as typeEventTransferBegin} from "./types"
import { EventTransferEnd as typeEventTransferEnd} from "./types"
import { EventTransferError as typeEventTransferError} from "./types"
import { EventApplicationUnbondingBegin as typeEventApplicationUnbondingBegin} from "./types"
import { EventApplicationUnbondingEnd as typeEventApplicationUnbondingEnd} from "./types"
import { EventApplicationUnbondingCanceled as typeEventApplicationUnbondingCanceled} from "./types"
import { Params as typeParams} from "./types"
import { Application as typeApplication} from "./types"
import { UndelegatingGatewayList as typeUndelegatingGatewayList} from "./types"
import { PendingApplicationTransfer as typePendingApplicationTransfer} from "./types"
import { PendingUndelegation as typePendingUndelegation} from "./types"

export { MsgUpdateParams, MsgStakeApplication, MsgUnstakeApplication, MsgDelegateToGateway, MsgUndelegateFromGateway, MsgTransferApplication, MsgUpdateParam };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgStakeApplicationParams = {
  value: MsgStakeApplication,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnstakeApplicationParams = {
  value: MsgUnstakeApplication,
  fee?: StdFee,
  memo?: string
};

type sendMsgDelegateToGatewayParams = {
  value: MsgDelegateToGateway,
  fee?: StdFee,
  memo?: string
};

type sendMsgUndelegateFromGatewayParams = {
  value: MsgUndelegateFromGateway,
  fee?: StdFee,
  memo?: string
};

type sendMsgTransferApplicationParams = {
  value: MsgTransferApplication,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamParams = {
  value: MsgUpdateParam,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgStakeApplicationParams = {
  value: MsgStakeApplication,
};

type msgUnstakeApplicationParams = {
  value: MsgUnstakeApplication,
};

type msgDelegateToGatewayParams = {
  value: MsgDelegateToGateway,
};

type msgUndelegateFromGatewayParams = {
  value: MsgUndelegateFromGateway,
};

type msgTransferApplicationParams = {
  value: MsgTransferApplication,
};

type msgUpdateParamParams = {
  value: MsgUpdateParam,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgStakeApplication({ value, fee, memo }: sendMsgStakeApplicationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgStakeApplication: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgStakeApplication({ value: MsgStakeApplication.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgStakeApplication: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnstakeApplication({ value, fee, memo }: sendMsgUnstakeApplicationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnstakeApplication: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUnstakeApplication({ value: MsgUnstakeApplication.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnstakeApplication: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDelegateToGateway({ value, fee, memo }: sendMsgDelegateToGatewayParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDelegateToGateway: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDelegateToGateway({ value: MsgDelegateToGateway.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDelegateToGateway: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUndelegateFromGateway({ value, fee, memo }: sendMsgUndelegateFromGatewayParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUndelegateFromGateway: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUndelegateFromGateway({ value: MsgUndelegateFromGateway.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUndelegateFromGateway: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTransferApplication({ value, fee, memo }: sendMsgTransferApplicationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTransferApplication: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTransferApplication({ value: MsgTransferApplication.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTransferApplication: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParam({ value, fee, memo }: sendMsgUpdateParamParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParam: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParam({ value: MsgUpdateParam.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParam: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgStakeApplication({ value }: msgStakeApplicationParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgStakeApplication", value: MsgStakeApplication.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgStakeApplication: Could not create message: ' + e.message)
			}
		},
		
		msgUnstakeApplication({ value }: msgUnstakeApplicationParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgUnstakeApplication", value: MsgUnstakeApplication.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnstakeApplication: Could not create message: ' + e.message)
			}
		},
		
		msgDelegateToGateway({ value }: msgDelegateToGatewayParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgDelegateToGateway", value: MsgDelegateToGateway.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDelegateToGateway: Could not create message: ' + e.message)
			}
		},
		
		msgUndelegateFromGateway({ value }: msgUndelegateFromGatewayParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgUndelegateFromGateway", value: MsgUndelegateFromGateway.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUndelegateFromGateway: Could not create message: ' + e.message)
			}
		},
		
		msgTransferApplication({ value }: msgTransferApplicationParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgTransferApplication", value: MsgTransferApplication.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTransferApplication: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParam({ value }: msgUpdateParamParams): EncodeObject {
			try {
				return { typeUrl: "/pocket.application.MsgUpdateParam", value: MsgUpdateParam.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParam: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						EventApplicationStaked: getStructure(typeEventApplicationStaked.fromPartial({})),
						EventRedelegation: getStructure(typeEventRedelegation.fromPartial({})),
						EventTransferBegin: getStructure(typeEventTransferBegin.fromPartial({})),
						EventTransferEnd: getStructure(typeEventTransferEnd.fromPartial({})),
						EventTransferError: getStructure(typeEventTransferError.fromPartial({})),
						EventApplicationUnbondingBegin: getStructure(typeEventApplicationUnbondingBegin.fromPartial({})),
						EventApplicationUnbondingEnd: getStructure(typeEventApplicationUnbondingEnd.fromPartial({})),
						EventApplicationUnbondingCanceled: getStructure(typeEventApplicationUnbondingCanceled.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						Application: getStructure(typeApplication.fromPartial({})),
						UndelegatingGatewayList: getStructure(typeUndelegatingGatewayList.fromPartial({})),
						PendingApplicationTransfer: getStructure(typePendingApplicationTransfer.fromPartial({})),
						PendingUndelegation: getStructure(typePendingUndelegation.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			PocketApplication: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;