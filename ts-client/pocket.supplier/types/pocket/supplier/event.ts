// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/supplier/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Supplier } from "../shared/supplier";

export const protobufPackage = "pocket.supplier";

export enum SupplierUnbondingReason {
  SUPPLIER_UNBONDING_REASON_UNSPECIFIED = 0,
  SUPPLIER_UNBONDING_REASON_VOLUNTARY = 1,
  SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE = 2,
  SUPPLIER_UNBONDING_REASON_MIGRATION = 3,
  UNRECOGNIZED = -1,
}

export function supplierUnbondingReasonFromJSON(object: any): SupplierUnbondingReason {
  switch (object) {
    case 0:
    case "SUPPLIER_UNBONDING_REASON_UNSPECIFIED":
      return SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_UNSPECIFIED;
    case 1:
    case "SUPPLIER_UNBONDING_REASON_VOLUNTARY":
      return SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_VOLUNTARY;
    case 2:
    case "SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE":
      return SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE;
    case 3:
    case "SUPPLIER_UNBONDING_REASON_MIGRATION":
      return SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_MIGRATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SupplierUnbondingReason.UNRECOGNIZED;
  }
}

export function supplierUnbondingReasonToJSON(object: SupplierUnbondingReason): string {
  switch (object) {
    case SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_UNSPECIFIED:
      return "SUPPLIER_UNBONDING_REASON_UNSPECIFIED";
    case SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_VOLUNTARY:
      return "SUPPLIER_UNBONDING_REASON_VOLUNTARY";
    case SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE:
      return "SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE";
    case SupplierUnbondingReason.SUPPLIER_UNBONDING_REASON_MIGRATION:
      return "SUPPLIER_UNBONDING_REASON_MIGRATION";
    case SupplierUnbondingReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** EventSupplierStaked is emitted when a supplier stake message is committed onchain. */
export interface EventSupplierStaked {
  supplier:
    | Supplier
    | undefined;
  /** The session end height of the last session in which the supplier was staked. */
  sessionEndHeight: number;
}

/**
 * EventSupplierUnbondingBegin is emitted when an application unstake message
 * is committed onchain, indicating that the supplier will now begin unbonding.
 */
export interface EventSupplierUnbondingBegin {
  supplier: Supplier | undefined;
  reason: SupplierUnbondingReason;
  /** The session end height of the last session in which the supplier unbonding began. */
  sessionEndHeight: number;
  /** The height at which supplier unbonding will end. */
  unbondingEndHeight: number;
}

/**
 * EventSupplierUnbondingEnd is emitted when an supplier has completed
 * unbonding. The unbonding period is determined by the shared param,
 * supplier_unbonding_period_sessions.
 */
export interface EventSupplierUnbondingEnd {
  supplier: Supplier | undefined;
  reason: SupplierUnbondingReason;
  /** The session end height of the session in which the supplier unbonding endeded. */
  sessionEndHeight: number;
  /** The height at which supplier unbonding will end. */
  unbondingEndHeight: number;
}

/**
 * EventSupplierUnbondingCanceled is emitted when an supplier which was unbonding
 * successfully (re-)stakes before the unbonding period has elapsed. An EventSupplierStaked
 * event will also be emitted immediately after this event.
 */
export interface EventSupplierUnbondingCanceled {
  supplier:
    | Supplier
    | undefined;
  /** The exact height at which the supplier unbonding was canceled. */
  height: number;
  /** The session end height of the session in which the supplier unbonding was canceled. */
  sessionEndHeight: number;
}

/**
 * EventSupplierServiceConfigActivated is emitted when a supplier service configuration
 * becomes effective at a specific block height.
 */
export interface EventSupplierServiceConfigActivated {
  /**
   * supplier contains the complete updated supplier information including the
   * active service configurations in supplier.Services.
   */
  supplier:
    | Supplier
    | undefined;
  /**
   * activation_height indicates the block height at which the new service
   * configurations became active.
   */
  activationHeight: number;
}

function createBaseEventSupplierStaked(): EventSupplierStaked {
  return { supplier: undefined, sessionEndHeight: 0 };
}

export const EventSupplierStaked: MessageFns<EventSupplierStaked> = {
  encode(message: EventSupplierStaked, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.sessionEndHeight !== 0) {
      writer.uint32(16).int64(message.sessionEndHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierStaked {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierStaked();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierStaked {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
    };
  },

  toJSON(message: EventSupplierStaked): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierStaked>, I>>(base?: I): EventSupplierStaked {
    return EventSupplierStaked.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierStaked>, I>>(object: I): EventSupplierStaked {
    const message = createBaseEventSupplierStaked();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    return message;
  },
};

function createBaseEventSupplierUnbondingBegin(): EventSupplierUnbondingBegin {
  return { supplier: undefined, reason: 0, sessionEndHeight: 0, unbondingEndHeight: 0 };
}

export const EventSupplierUnbondingBegin: MessageFns<EventSupplierUnbondingBegin> = {
  encode(message: EventSupplierUnbondingBegin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.sessionEndHeight !== 0) {
      writer.uint32(24).int64(message.sessionEndHeight);
    }
    if (message.unbondingEndHeight !== 0) {
      writer.uint32(32).int64(message.unbondingEndHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierUnbondingBegin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierUnbondingBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.unbondingEndHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierUnbondingBegin {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      reason: isSet(object.reason) ? supplierUnbondingReasonFromJSON(object.reason) : 0,
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
      unbondingEndHeight: isSet(object.unbondingEndHeight) ? globalThis.Number(object.unbondingEndHeight) : 0,
    };
  },

  toJSON(message: EventSupplierUnbondingBegin): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.reason !== 0) {
      obj.reason = supplierUnbondingReasonToJSON(message.reason);
    }
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    if (message.unbondingEndHeight !== 0) {
      obj.unbondingEndHeight = Math.round(message.unbondingEndHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierUnbondingBegin>, I>>(base?: I): EventSupplierUnbondingBegin {
    return EventSupplierUnbondingBegin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierUnbondingBegin>, I>>(object: I): EventSupplierUnbondingBegin {
    const message = createBaseEventSupplierUnbondingBegin();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.reason = object.reason ?? 0;
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    message.unbondingEndHeight = object.unbondingEndHeight ?? 0;
    return message;
  },
};

function createBaseEventSupplierUnbondingEnd(): EventSupplierUnbondingEnd {
  return { supplier: undefined, reason: 0, sessionEndHeight: 0, unbondingEndHeight: 0 };
}

export const EventSupplierUnbondingEnd: MessageFns<EventSupplierUnbondingEnd> = {
  encode(message: EventSupplierUnbondingEnd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.sessionEndHeight !== 0) {
      writer.uint32(24).int64(message.sessionEndHeight);
    }
    if (message.unbondingEndHeight !== 0) {
      writer.uint32(32).int64(message.unbondingEndHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierUnbondingEnd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierUnbondingEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.unbondingEndHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierUnbondingEnd {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      reason: isSet(object.reason) ? supplierUnbondingReasonFromJSON(object.reason) : 0,
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
      unbondingEndHeight: isSet(object.unbondingEndHeight) ? globalThis.Number(object.unbondingEndHeight) : 0,
    };
  },

  toJSON(message: EventSupplierUnbondingEnd): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.reason !== 0) {
      obj.reason = supplierUnbondingReasonToJSON(message.reason);
    }
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    if (message.unbondingEndHeight !== 0) {
      obj.unbondingEndHeight = Math.round(message.unbondingEndHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierUnbondingEnd>, I>>(base?: I): EventSupplierUnbondingEnd {
    return EventSupplierUnbondingEnd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierUnbondingEnd>, I>>(object: I): EventSupplierUnbondingEnd {
    const message = createBaseEventSupplierUnbondingEnd();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.reason = object.reason ?? 0;
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    message.unbondingEndHeight = object.unbondingEndHeight ?? 0;
    return message;
  },
};

function createBaseEventSupplierUnbondingCanceled(): EventSupplierUnbondingCanceled {
  return { supplier: undefined, height: 0, sessionEndHeight: 0 };
}

export const EventSupplierUnbondingCanceled: MessageFns<EventSupplierUnbondingCanceled> = {
  encode(message: EventSupplierUnbondingCanceled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.sessionEndHeight !== 0) {
      writer.uint32(16).int64(message.sessionEndHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierUnbondingCanceled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierUnbondingCanceled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sessionEndHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierUnbondingCanceled {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      sessionEndHeight: isSet(object.sessionEndHeight) ? globalThis.Number(object.sessionEndHeight) : 0,
    };
  },

  toJSON(message: EventSupplierUnbondingCanceled): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.sessionEndHeight !== 0) {
      obj.sessionEndHeight = Math.round(message.sessionEndHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierUnbondingCanceled>, I>>(base?: I): EventSupplierUnbondingCanceled {
    return EventSupplierUnbondingCanceled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierUnbondingCanceled>, I>>(
    object: I,
  ): EventSupplierUnbondingCanceled {
    const message = createBaseEventSupplierUnbondingCanceled();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.height = object.height ?? 0;
    message.sessionEndHeight = object.sessionEndHeight ?? 0;
    return message;
  },
};

function createBaseEventSupplierServiceConfigActivated(): EventSupplierServiceConfigActivated {
  return { supplier: undefined, activationHeight: 0 };
}

export const EventSupplierServiceConfigActivated: MessageFns<EventSupplierServiceConfigActivated> = {
  encode(message: EventSupplierServiceConfigActivated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.activationHeight !== 0) {
      writer.uint32(16).int64(message.activationHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierServiceConfigActivated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierServiceConfigActivated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.activationHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierServiceConfigActivated {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      activationHeight: isSet(object.activationHeight) ? globalThis.Number(object.activationHeight) : 0,
    };
  },

  toJSON(message: EventSupplierServiceConfigActivated): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.activationHeight !== 0) {
      obj.activationHeight = Math.round(message.activationHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierServiceConfigActivated>, I>>(
    base?: I,
  ): EventSupplierServiceConfigActivated {
    return EventSupplierServiceConfigActivated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierServiceConfigActivated>, I>>(
    object: I,
  ): EventSupplierServiceConfigActivated {
    const message = createBaseEventSupplierServiceConfigActivated();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.activationHeight = object.activationHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
